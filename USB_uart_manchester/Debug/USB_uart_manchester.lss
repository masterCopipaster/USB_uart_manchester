
USB_uart_manchester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003964  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000754  20070000  00083964  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00001208  20070754  000840b8  00020754  2**2
                  ALLOC
  3 .stack        00002004  2007195c  000852c0  00020754  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020754  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002077d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c1d8  00000000  00000000  000207d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a69  00000000  00000000  0003c9ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006a9d  00000000  00000000  00040417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000be8  00000000  00000000  00046eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cc8  00000000  00000000  00047a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b689  00000000  00000000  00048764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012174  00000000  00000000  00063ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072c92  00000000  00000000  00075f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d84  00000000  00000000  000e8bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	60 39 07 20 c1 31 08 00 bd 31 08 00 bd 31 08 00     `9. .1...1...1..
   80010:	bd 31 08 00 bd 31 08 00 bd 31 08 00 00 00 00 00     .1...1...1......
	...
   8002c:	bd 31 08 00 bd 31 08 00 00 00 00 00 bd 31 08 00     .1...1.......1..
   8003c:	bd 31 08 00 bd 31 08 00 bd 31 08 00 bd 31 08 00     .1...1...1...1..
   8004c:	bd 31 08 00 bd 31 08 00 bd 31 08 00 bd 31 08 00     .1...1...1...1..
   8005c:	bd 31 08 00 bd 31 08 00 bd 31 08 00 00 00 00 00     .1...1...1......
   8006c:	7d 17 08 00 91 17 08 00 a5 17 08 00 b9 17 08 00     }...............
	...
   80084:	99 35 08 00 89 35 08 00 bd 31 08 00 bd 31 08 00     .5...5...1...1..
   80094:	bd 31 08 00 bd 31 08 00 bd 31 08 00 bd 31 08 00     .1...1...1...1..
   800a4:	00 00 00 00 bd 31 08 00 bd 31 08 00 bd 31 08 00     .....1...1...1..
   800b4:	bd 31 08 00 bd 31 08 00 bd 31 08 00 bd 31 08 00     .1...1...1...1..
   800c4:	bd 31 08 00 bd 31 08 00 bd 31 08 00 bd 31 08 00     .1...1...1...1..
   800d4:	bd 31 08 00 bd 31 08 00 bd 31 08 00 51 23 08 00     .1...1...1..Q#..
   800e4:	bd 31 08 00 bd 31 08 00 bd 31 08 00 bd 31 08 00     .1...1...1...1..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070754 	.word	0x20070754
   80110:	00000000 	.word	0x00000000
   80114:	00083964 	.word	0x00083964

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00083964 	.word	0x00083964
   80154:	20070758 	.word	0x20070758
   80158:	00083964 	.word	0x00083964
   8015c:	00000000 	.word	0x00000000

00080160 <ui_init>:
#include "board.h"
#include "led.h"
#include "ui.h"

void ui_init(void)
{
   80160:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_On(LED0_GPIO);
   80162:	203b      	movs	r0, #59	; 0x3b
   80164:	4b03      	ldr	r3, [pc, #12]	; (80174 <ui_init+0x14>)
   80166:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   80168:	2055      	movs	r0, #85	; 0x55
   8016a:	4c03      	ldr	r4, [pc, #12]	; (80178 <ui_init+0x18>)
   8016c:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   8016e:	2056      	movs	r0, #86	; 0x56
   80170:	47a0      	blx	r4
   80172:	bd10      	pop	{r4, pc}
   80174:	000814b1 	.word	0x000814b1
   80178:	00081475 	.word	0x00081475

0008017c <ui_powerdown>:
}

void ui_powerdown(void)
{
   8017c:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   8017e:	203b      	movs	r0, #59	; 0x3b
   80180:	4c03      	ldr	r4, [pc, #12]	; (80190 <ui_powerdown+0x14>)
   80182:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   80184:	2055      	movs	r0, #85	; 0x55
   80186:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   80188:	2056      	movs	r0, #86	; 0x56
   8018a:	47a0      	blx	r4
   8018c:	bd10      	pop	{r4, pc}
   8018e:	bf00      	nop
   80190:	00081475 	.word	0x00081475

00080194 <ui_wakeup>:
}

void ui_wakeup(void)
{
   80194:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   80196:	203b      	movs	r0, #59	; 0x3b
   80198:	4b01      	ldr	r3, [pc, #4]	; (801a0 <ui_wakeup+0xc>)
   8019a:	4798      	blx	r3
   8019c:	bd08      	pop	{r3, pc}
   8019e:	bf00      	nop
   801a0:	000814b1 	.word	0x000814b1

000801a4 <ui_com_open>:
}

void ui_com_open(uint8_t port)
{
   801a4:	b508      	push	{r3, lr}
	if (0 == port) {
   801a6:	b110      	cbz	r0, 801ae <ui_com_open+0xa>
		LED_On(LED1_GPIO);
	} else if (1 == port) {
   801a8:	2801      	cmp	r0, #1
   801aa:	d004      	beq.n	801b6 <ui_com_open+0x12>
   801ac:	bd08      	pop	{r3, pc}
		LED_On(LED1_GPIO);
   801ae:	2055      	movs	r0, #85	; 0x55
   801b0:	4b03      	ldr	r3, [pc, #12]	; (801c0 <ui_com_open+0x1c>)
   801b2:	4798      	blx	r3
   801b4:	bd08      	pop	{r3, pc}
		LED_On(LED2_GPIO);
   801b6:	2056      	movs	r0, #86	; 0x56
   801b8:	4b01      	ldr	r3, [pc, #4]	; (801c0 <ui_com_open+0x1c>)
   801ba:	4798      	blx	r3
	}
}
   801bc:	e7f6      	b.n	801ac <ui_com_open+0x8>
   801be:	bf00      	nop
   801c0:	000814b1 	.word	0x000814b1

000801c4 <ui_com_close>:

void ui_com_close(uint8_t port)
{
   801c4:	b508      	push	{r3, lr}
	if (0 == port) {
   801c6:	b110      	cbz	r0, 801ce <ui_com_close+0xa>
		LED_Off(LED1_GPIO);
	} else if (1 == port) {
   801c8:	2801      	cmp	r0, #1
   801ca:	d004      	beq.n	801d6 <ui_com_close+0x12>
   801cc:	bd08      	pop	{r3, pc}
		LED_Off(LED1_GPIO);
   801ce:	2055      	movs	r0, #85	; 0x55
   801d0:	4b03      	ldr	r3, [pc, #12]	; (801e0 <ui_com_close+0x1c>)
   801d2:	4798      	blx	r3
   801d4:	bd08      	pop	{r3, pc}
		LED_Off(LED2_GPIO);
   801d6:	2056      	movs	r0, #86	; 0x56
   801d8:	4b01      	ldr	r3, [pc, #4]	; (801e0 <ui_com_close+0x1c>)
   801da:	4798      	blx	r3
	}
}
   801dc:	e7f6      	b.n	801cc <ui_com_close+0x8>
   801de:	bf00      	nop
   801e0:	00081475 	.word	0x00081475

000801e4 <ui_com_rx_start>:

void ui_com_rx_start(void)
{
   801e4:	4770      	bx	lr

000801e6 <ui_com_rx_stop>:
}

void ui_com_rx_stop(void)
{
   801e6:	4770      	bx	lr

000801e8 <ui_com_tx_start>:
}

void ui_com_tx_start(void)
{
   801e8:	4770      	bx	lr

000801ea <ui_com_tx_stop>:
}

void ui_com_tx_stop(void)
{
   801ea:	4770      	bx	lr

000801ec <ui_com_error>:
}

void ui_com_error(void)
{
   801ec:	4770      	bx	lr

000801ee <ui_com_overflow>:

}

void ui_com_overflow(void)
{
   801ee:	4770      	bx	lr

000801f0 <ui_process>:

}

void ui_process(uint16_t framenumber)
{
   801f0:	b508      	push	{r3, lr}
	if (0 == framenumber) {
   801f2:	b118      	cbz	r0, 801fc <ui_process+0xc>
		LED_On(LED0_GPIO);
	}
	if (1000 == framenumber) {
   801f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   801f8:	d004      	beq.n	80204 <ui_process+0x14>
   801fa:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   801fc:	203b      	movs	r0, #59	; 0x3b
   801fe:	4b03      	ldr	r3, [pc, #12]	; (8020c <ui_process+0x1c>)
   80200:	4798      	blx	r3
   80202:	bd08      	pop	{r3, pc}
		LED_Off(LED0_GPIO);
   80204:	203b      	movs	r0, #59	; 0x3b
   80206:	4b02      	ldr	r3, [pc, #8]	; (80210 <ui_process+0x20>)
   80208:	4798      	blx	r3
	}
}
   8020a:	e7f6      	b.n	801fa <ui_process+0xa>
   8020c:	000814b1 	.word	0x000814b1
   80210:	00081475 	.word	0x00081475

00080214 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   80214:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   80216:	4b04      	ldr	r3, [pc, #16]	; (80228 <sysclk_enable_usb+0x14>)
   80218:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   8021a:	2000      	movs	r0, #0
   8021c:	4b03      	ldr	r3, [pc, #12]	; (8022c <sysclk_enable_usb+0x18>)
   8021e:	4798      	blx	r3
		pmc_enable_udpck();
   80220:	4b03      	ldr	r3, [pc, #12]	; (80230 <sysclk_enable_usb+0x1c>)
   80222:	4798      	blx	r3
   80224:	bd08      	pop	{r3, pc}
   80226:	bf00      	nop
   80228:	000818b5 	.word	0x000818b5
   8022c:	000818fd 	.word	0x000818fd
   80230:	00081911 	.word	0x00081911

00080234 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80234:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80236:	480e      	ldr	r0, [pc, #56]	; (80270 <sysclk_init+0x3c>)
   80238:	4b0e      	ldr	r3, [pc, #56]	; (80274 <sysclk_init+0x40>)
   8023a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8023c:	213e      	movs	r1, #62	; 0x3e
   8023e:	2000      	movs	r0, #0
   80240:	4b0d      	ldr	r3, [pc, #52]	; (80278 <sysclk_init+0x44>)
   80242:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80244:	4c0d      	ldr	r4, [pc, #52]	; (8027c <sysclk_init+0x48>)
   80246:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80248:	2800      	cmp	r0, #0
   8024a:	d0fc      	beq.n	80246 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8024c:	4b0c      	ldr	r3, [pc, #48]	; (80280 <sysclk_init+0x4c>)
   8024e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80250:	4a0c      	ldr	r2, [pc, #48]	; (80284 <sysclk_init+0x50>)
   80252:	4b0d      	ldr	r3, [pc, #52]	; (80288 <sysclk_init+0x54>)
   80254:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80256:	4c0d      	ldr	r4, [pc, #52]	; (8028c <sysclk_init+0x58>)
   80258:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8025a:	2800      	cmp	r0, #0
   8025c:	d0fc      	beq.n	80258 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8025e:	2010      	movs	r0, #16
   80260:	4b0b      	ldr	r3, [pc, #44]	; (80290 <sysclk_init+0x5c>)
   80262:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80264:	4b0b      	ldr	r3, [pc, #44]	; (80294 <sysclk_init+0x60>)
   80266:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80268:	4801      	ldr	r0, [pc, #4]	; (80270 <sysclk_init+0x3c>)
   8026a:	4b02      	ldr	r3, [pc, #8]	; (80274 <sysclk_init+0x40>)
   8026c:	4798      	blx	r3
   8026e:	bd10      	pop	{r4, pc}
   80270:	0501bd00 	.word	0x0501bd00
   80274:	200700a5 	.word	0x200700a5
   80278:	00081831 	.word	0x00081831
   8027c:	00081885 	.word	0x00081885
   80280:	00081895 	.word	0x00081895
   80284:	200d3f01 	.word	0x200d3f01
   80288:	400e0600 	.word	0x400e0600
   8028c:	000818a5 	.word	0x000818a5
   80290:	000817cd 	.word	0x000817cd
   80294:	00083259 	.word	0x00083259

00080298 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80298:	4a02      	ldr	r2, [pc, #8]	; (802a4 <udi_cdc_comm_disable+0xc>)
   8029a:	7813      	ldrb	r3, [r2, #0]
   8029c:	3b01      	subs	r3, #1
   8029e:	b2db      	uxtb	r3, r3
   802a0:	7013      	strb	r3, [r2, #0]
   802a2:	4770      	bx	lr
   802a4:	20070786 	.word	0x20070786

000802a8 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   802a8:	2000      	movs	r0, #0
   802aa:	4770      	bx	lr

000802ac <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   802ac:	2000      	movs	r0, #0
   802ae:	4770      	bx	lr

000802b0 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   802b0:	b508      	push	{r3, lr}
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   802b2:	4b06      	ldr	r3, [pc, #24]	; (802cc <udi_cdc_line_coding_received+0x1c>)
   802b4:	7918      	ldrb	r0, [r3, #4]
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
   802b6:	2802      	cmp	r0, #2
   802b8:	bf14      	ite	ne
   802ba:	2000      	movne	r0, #0
   802bc:	2001      	moveq	r0, #1
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   802be:	4904      	ldr	r1, [pc, #16]	; (802d0 <udi_cdc_line_coding_received+0x20>)
   802c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   802c4:	1a09      	subs	r1, r1, r0
   802c6:	4b03      	ldr	r3, [pc, #12]	; (802d4 <udi_cdc_line_coding_received+0x24>)
   802c8:	4798      	blx	r3
   802ca:	bd08      	pop	{r3, pc}
   802cc:	20071920 	.word	0x20071920
   802d0:	20070778 	.word	0x20070778
   802d4:	000835ed 	.word	0x000835ed

000802d8 <udi_cdc_comm_enable>:
{
   802d8:	b538      	push	{r3, r4, r5, lr}
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   802da:	4b23      	ldr	r3, [pc, #140]	; (80368 <udi_cdc_comm_enable+0x90>)
   802dc:	781b      	ldrb	r3, [r3, #0]
   802de:	b2db      	uxtb	r3, r3
   802e0:	2b02      	cmp	r3, #2
   802e2:	d902      	bls.n	802ea <udi_cdc_comm_enable+0x12>
		udi_cdc_nb_comm_enabled = 0;
   802e4:	2200      	movs	r2, #0
   802e6:	4b20      	ldr	r3, [pc, #128]	; (80368 <udi_cdc_comm_enable+0x90>)
   802e8:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_comm_enabled;
   802ea:	4b1f      	ldr	r3, [pc, #124]	; (80368 <udi_cdc_comm_enable+0x90>)
   802ec:	781c      	ldrb	r4, [r3, #0]
   802ee:	b2e4      	uxtb	r4, r4
	udi_cdc_state[port] = CPU_TO_LE16(0);
   802f0:	2100      	movs	r1, #0
   802f2:	4b1e      	ldr	r3, [pc, #120]	; (8036c <udi_cdc_comm_enable+0x94>)
   802f4:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	uid_cdc_state_msg[port].header.bmRequestType =
   802f8:	481d      	ldr	r0, [pc, #116]	; (80370 <udi_cdc_comm_enable+0x98>)
   802fa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   802fe:	005b      	lsls	r3, r3, #1
   80300:	18c2      	adds	r2, r0, r3
   80302:	25a1      	movs	r5, #161	; 0xa1
   80304:	54c5      	strb	r5, [r0, r3]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   80306:	2320      	movs	r3, #32
   80308:	7053      	strb	r3, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   8030a:	8051      	strh	r1, [r2, #2]
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
   8030c:	2c01      	cmp	r4, #1
   8030e:	bf0c      	ite	eq
   80310:	2202      	moveq	r2, #2
   80312:	460a      	movne	r2, r1
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   80314:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   80318:	eb00 0341 	add.w	r3, r0, r1, lsl #1
   8031c:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   8031e:	2202      	movs	r2, #2
   80320:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   80322:	2200      	movs	r2, #0
   80324:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   80326:	4913      	ldr	r1, [pc, #76]	; (80374 <udi_cdc_comm_enable+0x9c>)
   80328:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   8032c:	180b      	adds	r3, r1, r0
   8032e:	2540      	movs	r5, #64	; 0x40
   80330:	540d      	strb	r5, [r1, r0]
   80332:	2042      	movs	r0, #66	; 0x42
   80334:	7058      	strb	r0, [r3, #1]
   80336:	200f      	movs	r0, #15
   80338:	7098      	strb	r0, [r3, #2]
   8033a:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   8033c:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   8033e:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   80340:	2208      	movs	r2, #8
   80342:	719a      	strb	r2, [r3, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   80344:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80348:	4419      	add	r1, r3
   8034a:	4620      	mov	r0, r4
   8034c:	4b0a      	ldr	r3, [pc, #40]	; (80378 <udi_cdc_comm_enable+0xa0>)
   8034e:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   80350:	4620      	mov	r0, r4
   80352:	4b0a      	ldr	r3, [pc, #40]	; (8037c <udi_cdc_comm_enable+0xa4>)
   80354:	4798      	blx	r3
   80356:	4602      	mov	r2, r0
   80358:	b120      	cbz	r0, 80364 <udi_cdc_comm_enable+0x8c>
	udi_cdc_nb_comm_enabled++;
   8035a:	4903      	ldr	r1, [pc, #12]	; (80368 <udi_cdc_comm_enable+0x90>)
   8035c:	780b      	ldrb	r3, [r1, #0]
   8035e:	3301      	adds	r3, #1
   80360:	b2db      	uxtb	r3, r3
   80362:	700b      	strb	r3, [r1, #0]
}
   80364:	4610      	mov	r0, r2
   80366:	bd38      	pop	{r3, r4, r5, pc}
   80368:	20070786 	.word	0x20070786
   8036c:	20070fa0 	.word	0x20070fa0
   80370:	200717bc 	.word	0x200717bc
   80374:	20070778 	.word	0x20070778
   80378:	000835ed 	.word	0x000835ed
   8037c:	00083441 	.word	0x00083441

00080380 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80380:	4b4d      	ldr	r3, [pc, #308]	; (804b8 <udi_cdc_tx_send+0x138>)
   80382:	5c1b      	ldrb	r3, [r3, r0]
   80384:	b103      	cbz	r3, 80388 <udi_cdc_tx_send+0x8>
   80386:	4770      	bx	lr
{
   80388:	b5f0      	push	{r4, r5, r6, r7, lr}
   8038a:	b085      	sub	sp, #20
   8038c:	4604      	mov	r4, r0
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8038e:	4b4b      	ldr	r3, [pc, #300]	; (804bc <udi_cdc_tx_send+0x13c>)
   80390:	4798      	blx	r3
   80392:	2800      	cmp	r0, #0
   80394:	d049      	beq.n	8042a <udi_cdc_tx_send+0xaa>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80396:	4b4a      	ldr	r3, [pc, #296]	; (804c0 <udi_cdc_tx_send+0x140>)
   80398:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
   8039c:	4b49      	ldr	r3, [pc, #292]	; (804c4 <udi_cdc_tx_send+0x144>)
   8039e:	4798      	blx	r3
   803a0:	4285      	cmp	r5, r0
   803a2:	f000 8087 	beq.w	804b4 <udi_cdc_tx_send+0x134>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   803a6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   803aa:	fab3 f383 	clz	r3, r3
   803ae:	095b      	lsrs	r3, r3, #5
   803b0:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   803b2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   803b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803b8:	2200      	movs	r2, #0
   803ba:	4b43      	ldr	r3, [pc, #268]	; (804c8 <udi_cdc_tx_send+0x148>)
   803bc:	701a      	strb	r2, [r3, #0]
	return flags;
   803be:	9e03      	ldr	r6, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   803c0:	4b42      	ldr	r3, [pc, #264]	; (804cc <udi_cdc_tx_send+0x14c>)
   803c2:	5d1d      	ldrb	r5, [r3, r4]
   803c4:	b2ed      	uxtb	r5, r5
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   803c6:	eb05 0244 	add.w	r2, r5, r4, lsl #1
   803ca:	4b41      	ldr	r3, [pc, #260]	; (804d0 <udi_cdc_tx_send+0x150>)
   803cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   803d0:	2b00      	cmp	r3, #0
   803d2:	d032      	beq.n	8043a <udi_cdc_tx_send+0xba>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   803d4:	2200      	movs	r2, #0
   803d6:	4b3f      	ldr	r3, [pc, #252]	; (804d4 <udi_cdc_tx_send+0x154>)
   803d8:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   803da:	4b3f      	ldr	r3, [pc, #252]	; (804d8 <udi_cdc_tx_send+0x158>)
   803dc:	5d1b      	ldrb	r3, [r3, r4]
   803de:	2b00      	cmp	r3, #0
   803e0:	d147      	bne.n	80472 <udi_cdc_tx_send+0xf2>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   803e2:	fab5 f385 	clz	r3, r5
   803e6:	095b      	lsrs	r3, r3, #5
   803e8:	4a38      	ldr	r2, [pc, #224]	; (804cc <udi_cdc_tx_send+0x14c>)
   803ea:	5513      	strb	r3, [r2, r4]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   803ec:	2201      	movs	r2, #1
   803ee:	4b32      	ldr	r3, [pc, #200]	; (804b8 <udi_cdc_tx_send+0x138>)
   803f0:	551a      	strb	r2, [r3, r4]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   803f2:	b126      	cbz	r6, 803fe <udi_cdc_tx_send+0x7e>
		cpu_irq_enable();
   803f4:	4b34      	ldr	r3, [pc, #208]	; (804c8 <udi_cdc_tx_send+0x148>)
   803f6:	701a      	strb	r2, [r3, #0]
   803f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   803fc:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   803fe:	462e      	mov	r6, r5
   80400:	eb05 0344 	add.w	r3, r5, r4, lsl #1
   80404:	4a32      	ldr	r2, [pc, #200]	; (804d0 <udi_cdc_tx_send+0x150>)
   80406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8040a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8040e:	bf14      	ite	ne
   80410:	2701      	movne	r7, #1
   80412:	2700      	moveq	r7, #0
	if (b_short_packet) {
   80414:	d037      	beq.n	80486 <udi_cdc_tx_send+0x106>
		if (udd_is_high_speed()) {
   80416:	4b29      	ldr	r3, [pc, #164]	; (804bc <udi_cdc_tx_send+0x13c>)
   80418:	4798      	blx	r3
   8041a:	2800      	cmp	r0, #0
   8041c:	d02d      	beq.n	8047a <udi_cdc_tx_send+0xfa>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   8041e:	4b29      	ldr	r3, [pc, #164]	; (804c4 <udi_cdc_tx_send+0x144>)
   80420:	4798      	blx	r3
   80422:	4b27      	ldr	r3, [pc, #156]	; (804c0 <udi_cdc_tx_send+0x140>)
   80424:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   80428:	e031      	b.n	8048e <udi_cdc_tx_send+0x10e>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8042a:	4b25      	ldr	r3, [pc, #148]	; (804c0 <udi_cdc_tx_send+0x140>)
   8042c:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
   80430:	4b2a      	ldr	r3, [pc, #168]	; (804dc <udi_cdc_tx_send+0x15c>)
   80432:	4798      	blx	r3
   80434:	4285      	cmp	r5, r0
   80436:	d1b6      	bne.n	803a6 <udi_cdc_tx_send+0x26>
   80438:	e03c      	b.n	804b4 <udi_cdc_tx_send+0x134>
		sof_zlp_counter++;
   8043a:	4a26      	ldr	r2, [pc, #152]	; (804d4 <udi_cdc_tx_send+0x154>)
   8043c:	8813      	ldrh	r3, [r2, #0]
   8043e:	3301      	adds	r3, #1
   80440:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   80442:	4b1e      	ldr	r3, [pc, #120]	; (804bc <udi_cdc_tx_send+0x13c>)
   80444:	4798      	blx	r3
   80446:	b918      	cbnz	r0, 80450 <udi_cdc_tx_send+0xd0>
   80448:	4b22      	ldr	r3, [pc, #136]	; (804d4 <udi_cdc_tx_send+0x154>)
   8044a:	881b      	ldrh	r3, [r3, #0]
   8044c:	2b63      	cmp	r3, #99	; 0x63
   8044e:	d908      	bls.n	80462 <udi_cdc_tx_send+0xe2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   80450:	4b1a      	ldr	r3, [pc, #104]	; (804bc <udi_cdc_tx_send+0x13c>)
   80452:	4798      	blx	r3
   80454:	2800      	cmp	r0, #0
   80456:	d0bd      	beq.n	803d4 <udi_cdc_tx_send+0x54>
   80458:	4b1e      	ldr	r3, [pc, #120]	; (804d4 <udi_cdc_tx_send+0x154>)
   8045a:	881b      	ldrh	r3, [r3, #0]
   8045c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   80460:	d2b8      	bcs.n	803d4 <udi_cdc_tx_send+0x54>
	if (cpu_irq_is_enabled_flags(flags))
   80462:	b33e      	cbz	r6, 804b4 <udi_cdc_tx_send+0x134>
		cpu_irq_enable();
   80464:	2201      	movs	r2, #1
   80466:	4b18      	ldr	r3, [pc, #96]	; (804c8 <udi_cdc_tx_send+0x148>)
   80468:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8046a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8046e:	b662      	cpsie	i
   80470:	e020      	b.n	804b4 <udi_cdc_tx_send+0x134>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   80472:	fab5 f585 	clz	r5, r5
   80476:	096d      	lsrs	r5, r5, #5
   80478:	e7b8      	b.n	803ec <udi_cdc_tx_send+0x6c>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8047a:	4b18      	ldr	r3, [pc, #96]	; (804dc <udi_cdc_tx_send+0x15c>)
   8047c:	4798      	blx	r3
   8047e:	4b10      	ldr	r3, [pc, #64]	; (804c0 <udi_cdc_tx_send+0x140>)
   80480:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   80484:	e003      	b.n	8048e <udi_cdc_tx_send+0x10e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80486:	2200      	movs	r2, #0
   80488:	4b0d      	ldr	r3, [pc, #52]	; (804c0 <udi_cdc_tx_send+0x140>)
   8048a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	switch (port) {
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
   8048e:	2c01      	cmp	r4, #1
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   80490:	eb06 0644 	add.w	r6, r6, r4, lsl #1
	udd_ep_run( ep,
   80494:	4b0e      	ldr	r3, [pc, #56]	; (804d0 <udi_cdc_tx_send+0x150>)
   80496:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
			udi_cdc_tx_buf[port][buf_sel_trans],
   8049a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
	udd_ep_run( ep,
   8049e:	4a10      	ldr	r2, [pc, #64]	; (804e0 <udi_cdc_tx_send+0x160>)
   804a0:	9200      	str	r2, [sp, #0]
   804a2:	4a10      	ldr	r2, [pc, #64]	; (804e4 <udi_cdc_tx_send+0x164>)
   804a4:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   804a8:	4639      	mov	r1, r7
   804aa:	bf0c      	ite	eq
   804ac:	2084      	moveq	r0, #132	; 0x84
   804ae:	2081      	movne	r0, #129	; 0x81
   804b0:	4c0d      	ldr	r4, [pc, #52]	; (804e8 <udi_cdc_tx_send+0x168>)
   804b2:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   804b4:	b005      	add	sp, #20
   804b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   804b8:	200717b8 	.word	0x200717b8
   804bc:	0008297d 	.word	0x0008297d
   804c0:	200717b4 	.word	0x200717b4
   804c4:	000829d9 	.word	0x000829d9
   804c8:	2007031c 	.word	0x2007031c
   804cc:	200717b0 	.word	0x200717b0
   804d0:	200717a8 	.word	0x200717a8
   804d4:	20070772 	.word	0x20070772
   804d8:	20070fa4 	.word	0x20070fa4
   804dc:	000829c9 	.word	0x000829c9
   804e0:	000804ed 	.word	0x000804ed
   804e4:	20070fa8 	.word	0x20070fa8
   804e8:	00082c41 	.word	0x00082c41

000804ec <udi_cdc_data_sent>:
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
   804ec:	2a84      	cmp	r2, #132	; 0x84
   804ee:	bf14      	ite	ne
   804f0:	2200      	movne	r2, #0
   804f2:	2201      	moveq	r2, #1
	if (UDD_EP_TRANSFER_OK != status) {
   804f4:	b100      	cbz	r0, 804f8 <udi_cdc_data_sent+0xc>
   804f6:	4770      	bx	lr
{
   804f8:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   804fa:	4b09      	ldr	r3, [pc, #36]	; (80520 <udi_cdc_data_sent+0x34>)
   804fc:	5c9b      	ldrb	r3, [r3, r2]
   804fe:	0051      	lsls	r1, r2, #1
   80500:	2b00      	cmp	r3, #0
   80502:	bf08      	it	eq
   80504:	3101      	addeq	r1, #1
   80506:	2300      	movs	r3, #0
   80508:	4806      	ldr	r0, [pc, #24]	; (80524 <udi_cdc_data_sent+0x38>)
   8050a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   8050e:	4906      	ldr	r1, [pc, #24]	; (80528 <udi_cdc_data_sent+0x3c>)
   80510:	548b      	strb	r3, [r1, r2]
	udi_cdc_tx_trans_ongoing[port] = false;
   80512:	4906      	ldr	r1, [pc, #24]	; (8052c <udi_cdc_data_sent+0x40>)
   80514:	548b      	strb	r3, [r1, r2]
	udi_cdc_tx_send(port);
   80516:	4610      	mov	r0, r2
   80518:	4b05      	ldr	r3, [pc, #20]	; (80530 <udi_cdc_data_sent+0x44>)
   8051a:	4798      	blx	r3
   8051c:	bd08      	pop	{r3, pc}
   8051e:	bf00      	nop
   80520:	200717b0 	.word	0x200717b0
   80524:	200717a8 	.word	0x200717a8
   80528:	20070fa4 	.word	0x20070fa4
   8052c:	200717b8 	.word	0x200717b8
   80530:	00080381 	.word	0x00080381

00080534 <udi_cdc_data_sof_notify>:
{
   80534:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
   80536:	4c07      	ldr	r4, [pc, #28]	; (80554 <udi_cdc_data_sof_notify+0x20>)
   80538:	7820      	ldrb	r0, [r4, #0]
   8053a:	4b07      	ldr	r3, [pc, #28]	; (80558 <udi_cdc_data_sof_notify+0x24>)
   8053c:	4798      	blx	r3
	port_notify++;
   8053e:	7823      	ldrb	r3, [r4, #0]
   80540:	3301      	adds	r3, #1
   80542:	b2db      	uxtb	r3, r3
	if (port_notify >= UDI_CDC_PORT_NB) {
   80544:	2b01      	cmp	r3, #1
   80546:	d903      	bls.n	80550 <udi_cdc_data_sof_notify+0x1c>
		port_notify = 0;
   80548:	2200      	movs	r2, #0
   8054a:	4b02      	ldr	r3, [pc, #8]	; (80554 <udi_cdc_data_sof_notify+0x20>)
   8054c:	701a      	strb	r2, [r3, #0]
   8054e:	bd10      	pop	{r4, pc}
	port_notify++;
   80550:	7023      	strb	r3, [r4, #0]
   80552:	bd10      	pop	{r4, pc}
   80554:	20070770 	.word	0x20070770
   80558:	00080381 	.word	0x00080381

0008055c <udi_cdc_ctrl_state_notify>:
	if ((!udi_cdc_serial_state_msg_ongoing[port])
   8055c:	4b15      	ldr	r3, [pc, #84]	; (805b4 <udi_cdc_ctrl_state_notify+0x58>)
   8055e:	5c1b      	ldrb	r3, [r3, r0]
   80560:	bb3b      	cbnz	r3, 805b2 <udi_cdc_ctrl_state_notify+0x56>
{
   80562:	b530      	push	{r4, r5, lr}
   80564:	b083      	sub	sp, #12
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
   80566:	4b14      	ldr	r3, [pc, #80]	; (805b8 <udi_cdc_ctrl_state_notify+0x5c>)
   80568:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   8056c:	b29b      	uxth	r3, r3
   8056e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   80572:	4c12      	ldr	r4, [pc, #72]	; (805bc <udi_cdc_ctrl_state_notify+0x60>)
   80574:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   80578:	8912      	ldrh	r2, [r2, #8]
   8057a:	429a      	cmp	r2, r3
   8057c:	d017      	beq.n	805ae <udi_cdc_ctrl_state_notify+0x52>
   8057e:	460d      	mov	r5, r1
   80580:	4604      	mov	r4, r0
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
   80582:	4b0d      	ldr	r3, [pc, #52]	; (805b8 <udi_cdc_ctrl_state_notify+0x5c>)
   80584:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
   80588:	4a0c      	ldr	r2, [pc, #48]	; (805bc <udi_cdc_ctrl_state_notify+0x60>)
   8058a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   8058e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   80592:	8119      	strh	r1, [r3, #8]
				(uint8_t *) & uid_cdc_state_msg[port],
   80594:	eb00 0180 	add.w	r1, r0, r0, lsl #2
				udd_ep_run(ep,
   80598:	4b09      	ldr	r3, [pc, #36]	; (805c0 <udi_cdc_ctrl_state_notify+0x64>)
   8059a:	9300      	str	r3, [sp, #0]
   8059c:	230a      	movs	r3, #10
   8059e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   805a2:	2100      	movs	r1, #0
   805a4:	4628      	mov	r0, r5
   805a6:	4d07      	ldr	r5, [pc, #28]	; (805c4 <udi_cdc_ctrl_state_notify+0x68>)
   805a8:	47a8      	blx	r5
		udi_cdc_serial_state_msg_ongoing[port] =
   805aa:	4b02      	ldr	r3, [pc, #8]	; (805b4 <udi_cdc_ctrl_state_notify+0x58>)
   805ac:	5518      	strb	r0, [r3, r4]
}
   805ae:	b003      	add	sp, #12
   805b0:	bd30      	pop	{r4, r5, pc}
   805b2:	4770      	bx	lr
   805b4:	20070f9c 	.word	0x20070f9c
   805b8:	20070fa0 	.word	0x20070fa0
   805bc:	200717bc 	.word	0x200717bc
   805c0:	00080635 	.word	0x00080635
   805c4:	00082c41 	.word	0x00082c41

000805c8 <udi_cdc_ctrl_state_change>:
{
   805c8:	b510      	push	{r4, lr}
   805ca:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   805cc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   805d0:	fab3 f383 	clz	r3, r3
   805d4:	095b      	lsrs	r3, r3, #5
   805d6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   805d8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   805da:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   805de:	2400      	movs	r4, #0
   805e0:	4b11      	ldr	r3, [pc, #68]	; (80628 <udi_cdc_ctrl_state_change+0x60>)
   805e2:	701c      	strb	r4, [r3, #0]
	return flags;
   805e4:	9c01      	ldr	r4, [sp, #4]
	if (b_set) {
   805e6:	b1a9      	cbz	r1, 80614 <udi_cdc_ctrl_state_change+0x4c>
		udi_cdc_state[port] |= bit_mask;
   805e8:	4910      	ldr	r1, [pc, #64]	; (8062c <udi_cdc_ctrl_state_change+0x64>)
   805ea:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   805ee:	b29b      	uxth	r3, r3
   805f0:	431a      	orrs	r2, r3
   805f2:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
   805f6:	b12c      	cbz	r4, 80604 <udi_cdc_ctrl_state_change+0x3c>
		cpu_irq_enable();
   805f8:	2201      	movs	r2, #1
   805fa:	4b0b      	ldr	r3, [pc, #44]	; (80628 <udi_cdc_ctrl_state_change+0x60>)
   805fc:	701a      	strb	r2, [r3, #0]
   805fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80602:	b662      	cpsie	i
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_COMM_EP, ~)
   80604:	2801      	cmp	r0, #1
	udi_cdc_ctrl_state_notify(port, ep_comm);
   80606:	bf0c      	ite	eq
   80608:	2186      	moveq	r1, #134	; 0x86
   8060a:	2183      	movne	r1, #131	; 0x83
   8060c:	4b08      	ldr	r3, [pc, #32]	; (80630 <udi_cdc_ctrl_state_change+0x68>)
   8060e:	4798      	blx	r3
}
   80610:	b002      	add	sp, #8
   80612:	bd10      	pop	{r4, pc}
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
   80614:	4905      	ldr	r1, [pc, #20]	; (8062c <udi_cdc_ctrl_state_change+0x64>)
   80616:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   8061a:	b29b      	uxth	r3, r3
   8061c:	ea23 0202 	bic.w	r2, r3, r2
   80620:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
   80624:	e7e7      	b.n	805f6 <udi_cdc_ctrl_state_change+0x2e>
   80626:	bf00      	nop
   80628:	2007031c 	.word	0x2007031c
   8062c:	20070fa0 	.word	0x20070fa0
   80630:	0008055d 	.word	0x0008055d

00080634 <udi_cdc_serial_state_msg_sent>:
{
   80634:	b538      	push	{r3, r4, r5, lr}
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_GET_PORT_FROM_COMM_EP, ~)
   80636:	2a86      	cmp	r2, #134	; 0x86
   80638:	bf14      	ite	ne
   8063a:	2000      	movne	r0, #0
   8063c:	2001      	moveq	r0, #1
	udi_cdc_serial_state_msg_ongoing[port] = false;
   8063e:	2100      	movs	r1, #0
   80640:	4b0b      	ldr	r3, [pc, #44]	; (80670 <udi_cdc_serial_state_msg_sent+0x3c>)
   80642:	5419      	strb	r1, [r3, r0]
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
   80644:	490b      	ldr	r1, [pc, #44]	; (80674 <udi_cdc_serial_state_msg_sent+0x40>)
   80646:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   8064a:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
   8064e:	041b      	lsls	r3, r3, #16
   80650:	0c1b      	lsrs	r3, r3, #16
   80652:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
   80656:	4b08      	ldr	r3, [pc, #32]	; (80678 <udi_cdc_serial_state_msg_sent+0x44>)
   80658:	0084      	lsls	r4, r0, #2
   8065a:	1825      	adds	r5, r4, r0
   8065c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   80660:	892b      	ldrh	r3, [r5, #8]
   80662:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
   80666:	812b      	strh	r3, [r5, #8]
	udi_cdc_ctrl_state_notify(port, ep);
   80668:	4611      	mov	r1, r2
   8066a:	4b04      	ldr	r3, [pc, #16]	; (8067c <udi_cdc_serial_state_msg_sent+0x48>)
   8066c:	4798      	blx	r3
   8066e:	bd38      	pop	{r3, r4, r5, pc}
   80670:	20070f9c 	.word	0x20070f9c
   80674:	20070fa0 	.word	0x20070fa0
   80678:	200717bc 	.word	0x200717bc
   8067c:	0008055d 	.word	0x0008055d

00080680 <udi_cdc_data_disable>:
{
   80680:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   80682:	4a06      	ldr	r2, [pc, #24]	; (8069c <udi_cdc_data_disable+0x1c>)
   80684:	7813      	ldrb	r3, [r2, #0]
   80686:	3b01      	subs	r3, #1
   80688:	b2db      	uxtb	r3, r3
   8068a:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   8068c:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   8068e:	4b04      	ldr	r3, [pc, #16]	; (806a0 <udi_cdc_data_disable+0x20>)
   80690:	4798      	blx	r3
	udi_cdc_data_running = false;
   80692:	2200      	movs	r2, #0
   80694:	4b03      	ldr	r3, [pc, #12]	; (806a4 <udi_cdc_data_disable+0x24>)
   80696:	701a      	strb	r2, [r3, #0]
   80698:	bd08      	pop	{r3, pc}
   8069a:	bf00      	nop
   8069c:	20070787 	.word	0x20070787
   806a0:	00083459 	.word	0x00083459
   806a4:	20070774 	.word	0x20070774

000806a8 <udi_cdc_comm_setup>:
{
   806a8:	b508      	push	{r3, lr}
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   806aa:	4b27      	ldr	r3, [pc, #156]	; (80748 <udi_cdc_comm_setup+0xa0>)
   806ac:	7918      	ldrb	r0, [r3, #4]
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
   806ae:	2802      	cmp	r0, #2
   806b0:	bf14      	ite	ne
   806b2:	2000      	movne	r0, #0
   806b4:	2001      	moveq	r0, #1
	if (Udd_setup_is_in()) {
   806b6:	781b      	ldrb	r3, [r3, #0]
   806b8:	f013 0f80 	tst.w	r3, #128	; 0x80
   806bc:	d105      	bne.n	806ca <udi_cdc_comm_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   806be:	f003 0360 	and.w	r3, r3, #96	; 0x60
   806c2:	2b20      	cmp	r3, #32
   806c4:	d01b      	beq.n	806fe <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
   806c6:	2000      	movs	r0, #0
   806c8:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   806ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
   806ce:	2b20      	cmp	r3, #32
   806d0:	d001      	beq.n	806d6 <udi_cdc_comm_setup+0x2e>
	return false;  // request Not supported
   806d2:	2000      	movs	r0, #0
   806d4:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
   806d6:	4b1c      	ldr	r3, [pc, #112]	; (80748 <udi_cdc_comm_setup+0xa0>)
   806d8:	785b      	ldrb	r3, [r3, #1]
   806da:	2b21      	cmp	r3, #33	; 0x21
   806dc:	d131      	bne.n	80742 <udi_cdc_comm_setup+0x9a>
						udd_g_ctrlreq.req.wLength)
   806de:	4b1a      	ldr	r3, [pc, #104]	; (80748 <udi_cdc_comm_setup+0xa0>)
				if (sizeof(usb_cdc_line_coding_t) !=
   806e0:	88db      	ldrh	r3, [r3, #6]
   806e2:	2b07      	cmp	r3, #7
   806e4:	d001      	beq.n	806ea <udi_cdc_comm_setup+0x42>
					return false; // Error for USB host
   806e6:	2000      	movs	r0, #0
   806e8:	bd08      	pop	{r3, pc}
				udd_g_ctrlreq.payload =
   806ea:	4a17      	ldr	r2, [pc, #92]	; (80748 <udi_cdc_comm_setup+0xa0>)
						(uint8_t *) &
   806ec:	4b17      	ldr	r3, [pc, #92]	; (8074c <udi_cdc_comm_setup+0xa4>)
   806ee:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   806f2:	1a18      	subs	r0, r3, r0
				udd_g_ctrlreq.payload =
   806f4:	6090      	str	r0, [r2, #8]
				udd_g_ctrlreq.payload_size =
   806f6:	2307      	movs	r3, #7
   806f8:	8193      	strh	r3, [r2, #12]
				return true;
   806fa:	2001      	movs	r0, #1
   806fc:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
   806fe:	4b12      	ldr	r3, [pc, #72]	; (80748 <udi_cdc_comm_setup+0xa0>)
   80700:	785b      	ldrb	r3, [r3, #1]
   80702:	2b20      	cmp	r3, #32
   80704:	d003      	beq.n	8070e <udi_cdc_comm_setup+0x66>
   80706:	2b22      	cmp	r3, #34	; 0x22
   80708:	d013      	beq.n	80732 <udi_cdc_comm_setup+0x8a>
	return false;  // request Not supported
   8070a:	2000      	movs	r0, #0
   8070c:	bd08      	pop	{r3, pc}
						udd_g_ctrlreq.req.wLength)
   8070e:	4b0e      	ldr	r3, [pc, #56]	; (80748 <udi_cdc_comm_setup+0xa0>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80710:	88db      	ldrh	r3, [r3, #6]
   80712:	2b07      	cmp	r3, #7
   80714:	d001      	beq.n	8071a <udi_cdc_comm_setup+0x72>
					return false; // Error for USB host
   80716:	2000      	movs	r0, #0
}
   80718:	bd08      	pop	{r3, pc}
				udd_g_ctrlreq.callback =
   8071a:	4a0b      	ldr	r2, [pc, #44]	; (80748 <udi_cdc_comm_setup+0xa0>)
   8071c:	4b0c      	ldr	r3, [pc, #48]	; (80750 <udi_cdc_comm_setup+0xa8>)
   8071e:	6113      	str	r3, [r2, #16]
						(uint8_t *) &
   80720:	4b0a      	ldr	r3, [pc, #40]	; (8074c <udi_cdc_comm_setup+0xa4>)
   80722:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   80726:	1a18      	subs	r0, r3, r0
				udd_g_ctrlreq.payload =
   80728:	6090      	str	r0, [r2, #8]
				udd_g_ctrlreq.payload_size =
   8072a:	2307      	movs	r3, #7
   8072c:	8193      	strh	r3, [r2, #12]
				return true;
   8072e:	2001      	movs	r0, #1
   80730:	bd08      	pop	{r3, pc}
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   80732:	4b05      	ldr	r3, [pc, #20]	; (80748 <udi_cdc_comm_setup+0xa0>)
   80734:	7899      	ldrb	r1, [r3, #2]
   80736:	f001 0101 	and.w	r1, r1, #1
   8073a:	4b06      	ldr	r3, [pc, #24]	; (80754 <udi_cdc_comm_setup+0xac>)
   8073c:	4798      	blx	r3
				return true;
   8073e:	2001      	movs	r0, #1
   80740:	bd08      	pop	{r3, pc}
	return false;  // request Not supported
   80742:	2000      	movs	r0, #0
   80744:	bd08      	pop	{r3, pc}
   80746:	bf00      	nop
   80748:	20071920 	.word	0x20071920
   8074c:	20070778 	.word	0x20070778
   80750:	000802b1 	.word	0x000802b1
   80754:	00083471 	.word	0x00083471

00080758 <udi_cdc_multi_signal_framing_error>:
{
	udi_cdc_ctrl_state_change(port, b_set, CDC_SERIAL_STATE_DSR);
}

void udi_cdc_multi_signal_framing_error(uint8_t port)
{
   80758:	b508      	push	{r3, lr}
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_FRAMING);
   8075a:	2210      	movs	r2, #16
   8075c:	2101      	movs	r1, #1
   8075e:	4b01      	ldr	r3, [pc, #4]	; (80764 <udi_cdc_multi_signal_framing_error+0xc>)
   80760:	4798      	blx	r3
   80762:	bd08      	pop	{r3, pc}
   80764:	000805c9 	.word	0x000805c9

00080768 <udi_cdc_multi_signal_overrun>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_multi_signal_overrun(uint8_t port)
{
   80768:	b508      	push	{r3, lr}
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
   8076a:	2240      	movs	r2, #64	; 0x40
   8076c:	2101      	movs	r1, #1
   8076e:	4b01      	ldr	r3, [pc, #4]	; (80774 <udi_cdc_multi_signal_overrun+0xc>)
   80770:	4798      	blx	r3
   80772:	bd08      	pop	{r3, pc}
   80774:	000805c9 	.word	0x000805c9

00080778 <udi_cdc_multi_get_nb_received_data>:
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
   80778:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8077a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8077e:	fab3 f383 	clz	r3, r3
   80782:	095b      	lsrs	r3, r3, #5
   80784:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80786:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   80788:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8078c:	2200      	movs	r2, #0
   8078e:	4b0c      	ldr	r3, [pc, #48]	; (807c0 <udi_cdc_multi_get_nb_received_data+0x48>)
   80790:	701a      	strb	r2, [r3, #0]
	return flags;
   80792:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80794:	4b0b      	ldr	r3, [pc, #44]	; (807c4 <udi_cdc_multi_get_nb_received_data+0x4c>)
   80796:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   8079a:	b29b      	uxth	r3, r3
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   8079c:	4a0a      	ldr	r2, [pc, #40]	; (807c8 <udi_cdc_multi_get_nb_received_data+0x50>)
   8079e:	5c12      	ldrb	r2, [r2, r0]
   807a0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   807a4:	4a09      	ldr	r2, [pc, #36]	; (807cc <udi_cdc_multi_get_nb_received_data+0x54>)
   807a6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   807aa:	b280      	uxth	r0, r0
   807ac:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   807ae:	b129      	cbz	r1, 807bc <udi_cdc_multi_get_nb_received_data+0x44>
		cpu_irq_enable();
   807b0:	2201      	movs	r2, #1
   807b2:	4b03      	ldr	r3, [pc, #12]	; (807c0 <udi_cdc_multi_get_nb_received_data+0x48>)
   807b4:	701a      	strb	r2, [r3, #0]
   807b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   807ba:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   807bc:	b002      	add	sp, #8
   807be:	4770      	bx	lr
   807c0:	2007031c 	.word	0x2007031c
   807c4:	20070f94 	.word	0x20070f94
   807c8:	20070f90 	.word	0x20070f90
   807cc:	20070f88 	.word	0x20070f88

000807d0 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   807d0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   807d2:	4b03      	ldr	r3, [pc, #12]	; (807e0 <udi_cdc_multi_is_rx_ready+0x10>)
   807d4:	4798      	blx	r3
}
   807d6:	3000      	adds	r0, #0
   807d8:	bf18      	it	ne
   807da:	2001      	movne	r0, #1
   807dc:	bd08      	pop	{r3, pc}
   807de:	bf00      	nop
   807e0:	00080779 	.word	0x00080779

000807e4 <udi_cdc_rx_start>:
{
   807e4:	b530      	push	{r4, r5, lr}
   807e6:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   807e8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   807ec:	fab3 f383 	clz	r3, r3
   807f0:	095b      	lsrs	r3, r3, #5
   807f2:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   807f4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   807f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   807fa:	2200      	movs	r2, #0
   807fc:	4b26      	ldr	r3, [pc, #152]	; (80898 <udi_cdc_rx_start+0xb4>)
   807fe:	701a      	strb	r2, [r3, #0]
	return flags;
   80800:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80802:	4a26      	ldr	r2, [pc, #152]	; (8089c <udi_cdc_rx_start+0xb8>)
   80804:	5c15      	ldrb	r5, [r2, r0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80806:	4a26      	ldr	r2, [pc, #152]	; (808a0 <udi_cdc_rx_start+0xbc>)
   80808:	5c12      	ldrb	r2, [r2, r0]
   8080a:	b962      	cbnz	r2, 80826 <udi_cdc_rx_start+0x42>
   8080c:	b2ed      	uxtb	r5, r5
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8080e:	4a25      	ldr	r2, [pc, #148]	; (808a4 <udi_cdc_rx_start+0xc0>)
   80810:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   80814:	b289      	uxth	r1, r1
   80816:	eb05 0240 	add.w	r2, r5, r0, lsl #1
   8081a:	4c23      	ldr	r4, [pc, #140]	; (808a8 <udi_cdc_rx_start+0xc4>)
   8081c:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
   80820:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   80822:	4291      	cmp	r1, r2
   80824:	d20a      	bcs.n	8083c <udi_cdc_rx_start+0x58>
	if (cpu_irq_is_enabled_flags(flags))
   80826:	2b00      	cmp	r3, #0
   80828:	d034      	beq.n	80894 <udi_cdc_rx_start+0xb0>
		cpu_irq_enable();
   8082a:	2201      	movs	r2, #1
   8082c:	4b1a      	ldr	r3, [pc, #104]	; (80898 <udi_cdc_rx_start+0xb4>)
   8082e:	701a      	strb	r2, [r3, #0]
   80830:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80834:	b662      	cpsie	i
		return false;
   80836:	2000      	movs	r0, #0
}
   80838:	b005      	add	sp, #20
   8083a:	bd30      	pop	{r4, r5, pc}
	udi_cdc_rx_pos[port] = 0;
   8083c:	2100      	movs	r1, #0
   8083e:	4a19      	ldr	r2, [pc, #100]	; (808a4 <udi_cdc_rx_start+0xc0>)
   80840:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80844:	fab5 f285 	clz	r2, r5
   80848:	0952      	lsrs	r2, r2, #5
   8084a:	4914      	ldr	r1, [pc, #80]	; (8089c <udi_cdc_rx_start+0xb8>)
   8084c:	540a      	strb	r2, [r1, r0]
	udi_cdc_rx_trans_ongoing[port] = true;
   8084e:	2101      	movs	r1, #1
   80850:	4a13      	ldr	r2, [pc, #76]	; (808a0 <udi_cdc_rx_start+0xbc>)
   80852:	5411      	strb	r1, [r2, r0]
	if (cpu_irq_is_enabled_flags(flags))
   80854:	b123      	cbz	r3, 80860 <udi_cdc_rx_start+0x7c>
		cpu_irq_enable();
   80856:	4b10      	ldr	r3, [pc, #64]	; (80898 <udi_cdc_rx_start+0xb4>)
   80858:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8085a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8085e:	b662      	cpsie	i
   80860:	4604      	mov	r4, r0
	if (udi_cdc_multi_is_rx_ready(port)) {
   80862:	4b12      	ldr	r3, [pc, #72]	; (808ac <udi_cdc_rx_start+0xc8>)
   80864:	4798      	blx	r3
   80866:	b988      	cbnz	r0, 8088c <udi_cdc_rx_start+0xa8>
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
   80868:	2c01      	cmp	r4, #1
			udi_cdc_rx_buf[port][buf_sel_trans],
   8086a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
	return udd_ep_run(ep,
   8086e:	4b10      	ldr	r3, [pc, #64]	; (808b0 <udi_cdc_rx_start+0xcc>)
   80870:	9300      	str	r3, [sp, #0]
   80872:	f44f 7300 	mov.w	r3, #512	; 0x200
   80876:	4a0f      	ldr	r2, [pc, #60]	; (808b4 <udi_cdc_rx_start+0xd0>)
   80878:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8087c:	f04f 0101 	mov.w	r1, #1
   80880:	bf0c      	ite	eq
   80882:	2005      	moveq	r0, #5
   80884:	2002      	movne	r0, #2
   80886:	4c0c      	ldr	r4, [pc, #48]	; (808b8 <udi_cdc_rx_start+0xd4>)
   80888:	47a0      	blx	r4
   8088a:	e7d5      	b.n	80838 <udi_cdc_rx_start+0x54>
		UDI_CDC_RX_NOTIFY(port);
   8088c:	4620      	mov	r0, r4
   8088e:	4b0b      	ldr	r3, [pc, #44]	; (808bc <udi_cdc_rx_start+0xd8>)
   80890:	4798      	blx	r3
   80892:	e7e9      	b.n	80868 <udi_cdc_rx_start+0x84>
		return false;
   80894:	2000      	movs	r0, #0
   80896:	e7cf      	b.n	80838 <udi_cdc_rx_start+0x54>
   80898:	2007031c 	.word	0x2007031c
   8089c:	20070f90 	.word	0x20070f90
   808a0:	20070f98 	.word	0x20070f98
   808a4:	20070f94 	.word	0x20070f94
   808a8:	20070f88 	.word	0x20070f88
   808ac:	000807d1 	.word	0x000807d1
   808b0:	00080975 	.word	0x00080975
   808b4:	20070788 	.word	0x20070788
   808b8:	00082c41 	.word	0x00082c41
   808bc:	000835a9 	.word	0x000835a9

000808c0 <udi_cdc_data_enable>:
{
   808c0:	b570      	push	{r4, r5, r6, lr}
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   808c2:	4b1f      	ldr	r3, [pc, #124]	; (80940 <udi_cdc_data_enable+0x80>)
   808c4:	781b      	ldrb	r3, [r3, #0]
   808c6:	b2db      	uxtb	r3, r3
   808c8:	2b02      	cmp	r3, #2
   808ca:	d902      	bls.n	808d2 <udi_cdc_data_enable+0x12>
		udi_cdc_nb_data_enabled = 0;
   808cc:	2200      	movs	r2, #0
   808ce:	4b1c      	ldr	r3, [pc, #112]	; (80940 <udi_cdc_data_enable+0x80>)
   808d0:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   808d2:	4b1b      	ldr	r3, [pc, #108]	; (80940 <udi_cdc_data_enable+0x80>)
   808d4:	781c      	ldrb	r4, [r3, #0]
   808d6:	b2e4      	uxtb	r4, r4
	udi_cdc_tx_trans_ongoing[port] = false;
   808d8:	2500      	movs	r5, #0
   808da:	4b1a      	ldr	r3, [pc, #104]	; (80944 <udi_cdc_data_enable+0x84>)
   808dc:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_both_buf_to_send[port] = false;
   808de:	4b1a      	ldr	r3, [pc, #104]	; (80948 <udi_cdc_data_enable+0x88>)
   808e0:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_buf_sel[port] = 0;
   808e2:	4b1a      	ldr	r3, [pc, #104]	; (8094c <udi_cdc_data_enable+0x8c>)
   808e4:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_buf_nb[port][0] = 0;
   808e6:	4b1a      	ldr	r3, [pc, #104]	; (80950 <udi_cdc_data_enable+0x90>)
   808e8:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
	udi_cdc_tx_buf_nb[port][1] = 0;
   808ec:	00a6      	lsls	r6, r4, #2
   808ee:	4433      	add	r3, r6
   808f0:	805d      	strh	r5, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   808f2:	4b18      	ldr	r3, [pc, #96]	; (80954 <udi_cdc_data_enable+0x94>)
   808f4:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	udi_cdc_tx_send(port);
   808f8:	4620      	mov	r0, r4
   808fa:	4b17      	ldr	r3, [pc, #92]	; (80958 <udi_cdc_data_enable+0x98>)
   808fc:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   808fe:	4b17      	ldr	r3, [pc, #92]	; (8095c <udi_cdc_data_enable+0x9c>)
   80900:	551d      	strb	r5, [r3, r4]
	udi_cdc_rx_buf_sel[port] = 0;
   80902:	4b17      	ldr	r3, [pc, #92]	; (80960 <udi_cdc_data_enable+0xa0>)
   80904:	551d      	strb	r5, [r3, r4]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80906:	4b17      	ldr	r3, [pc, #92]	; (80964 <udi_cdc_data_enable+0xa4>)
   80908:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8090c:	4433      	add	r3, r6
   8090e:	805d      	strh	r5, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   80910:	4b15      	ldr	r3, [pc, #84]	; (80968 <udi_cdc_data_enable+0xa8>)
   80912:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	if (!udi_cdc_rx_start(port)) {
   80916:	4620      	mov	r0, r4
   80918:	4b14      	ldr	r3, [pc, #80]	; (8096c <udi_cdc_data_enable+0xac>)
   8091a:	4798      	blx	r3
   8091c:	4601      	mov	r1, r0
   8091e:	b140      	cbz	r0, 80932 <udi_cdc_data_enable+0x72>
	udi_cdc_nb_data_enabled++;
   80920:	4a07      	ldr	r2, [pc, #28]	; (80940 <udi_cdc_data_enable+0x80>)
   80922:	7813      	ldrb	r3, [r2, #0]
   80924:	3301      	adds	r3, #1
   80926:	b2db      	uxtb	r3, r3
   80928:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   8092a:	7813      	ldrb	r3, [r2, #0]
   8092c:	b2db      	uxtb	r3, r3
   8092e:	2b02      	cmp	r3, #2
   80930:	d001      	beq.n	80936 <udi_cdc_data_enable+0x76>
}
   80932:	4608      	mov	r0, r1
   80934:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
   80936:	2201      	movs	r2, #1
   80938:	4b0d      	ldr	r3, [pc, #52]	; (80970 <udi_cdc_data_enable+0xb0>)
   8093a:	701a      	strb	r2, [r3, #0]
   8093c:	e7f9      	b.n	80932 <udi_cdc_data_enable+0x72>
   8093e:	bf00      	nop
   80940:	20070787 	.word	0x20070787
   80944:	200717b8 	.word	0x200717b8
   80948:	20070fa4 	.word	0x20070fa4
   8094c:	200717b0 	.word	0x200717b0
   80950:	200717a8 	.word	0x200717a8
   80954:	200717b4 	.word	0x200717b4
   80958:	00080381 	.word	0x00080381
   8095c:	20070f98 	.word	0x20070f98
   80960:	20070f90 	.word	0x20070f90
   80964:	20070f88 	.word	0x20070f88
   80968:	20070f94 	.word	0x20070f94
   8096c:	000807e5 	.word	0x000807e5
   80970:	20070774 	.word	0x20070774

00080974 <udi_cdc_data_received>:
{
   80974:	b510      	push	{r4, lr}
   80976:	b082      	sub	sp, #8
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
   80978:	2a05      	cmp	r2, #5
   8097a:	bf14      	ite	ne
   8097c:	2400      	movne	r4, #0
   8097e:	2401      	moveq	r4, #1
	if (UDD_EP_TRANSFER_OK != status) {
   80980:	b990      	cbnz	r0, 809a8 <udi_cdc_data_received+0x34>
   80982:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   80984:	4b10      	ldr	r3, [pc, #64]	; (809c8 <udi_cdc_data_received+0x54>)
   80986:	5d1b      	ldrb	r3, [r3, r4]
   80988:	fab3 f383 	clz	r3, r3
   8098c:	095b      	lsrs	r3, r3, #5
	if (!n) {
   8098e:	b169      	cbz	r1, 809ac <udi_cdc_data_received+0x38>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80990:	b289      	uxth	r1, r1
   80992:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   80996:	4a0d      	ldr	r2, [pc, #52]	; (809cc <udi_cdc_data_received+0x58>)
   80998:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   8099c:	2200      	movs	r2, #0
   8099e:	4b0c      	ldr	r3, [pc, #48]	; (809d0 <udi_cdc_data_received+0x5c>)
   809a0:	551a      	strb	r2, [r3, r4]
	udi_cdc_rx_start(port);
   809a2:	4620      	mov	r0, r4
   809a4:	4b0b      	ldr	r3, [pc, #44]	; (809d4 <udi_cdc_data_received+0x60>)
   809a6:	4798      	blx	r3
}
   809a8:	b002      	add	sp, #8
   809aa:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
   809ac:	eb03 0444 	add.w	r4, r3, r4, lsl #1
		udd_ep_run( ep,
   809b0:	4b09      	ldr	r3, [pc, #36]	; (809d8 <udi_cdc_data_received+0x64>)
   809b2:	9300      	str	r3, [sp, #0]
   809b4:	f44f 7300 	mov.w	r3, #512	; 0x200
   809b8:	4a08      	ldr	r2, [pc, #32]	; (809dc <udi_cdc_data_received+0x68>)
   809ba:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   809be:	2101      	movs	r1, #1
   809c0:	4c07      	ldr	r4, [pc, #28]	; (809e0 <udi_cdc_data_received+0x6c>)
   809c2:	47a0      	blx	r4
		return;
   809c4:	e7f0      	b.n	809a8 <udi_cdc_data_received+0x34>
   809c6:	bf00      	nop
   809c8:	20070f90 	.word	0x20070f90
   809cc:	20070f88 	.word	0x20070f88
   809d0:	20070f98 	.word	0x20070f98
   809d4:	000807e5 	.word	0x000807e5
   809d8:	00080975 	.word	0x00080975
   809dc:	20070788 	.word	0x20070788
   809e0:	00082c41 	.word	0x00082c41

000809e4 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
   809e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   809e8:	b083      	sub	sp, #12
   809ea:	4683      	mov	fp, r0

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   809ec:	4604      	mov	r4, r0
   809ee:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   809f2:	4b29      	ldr	r3, [pc, #164]	; (80a98 <udi_cdc_multi_getc+0xb4>)
   809f4:	4413      	add	r3, r2
   809f6:	f893 a006 	ldrb.w	sl, [r3, #6]
   809fa:	f1ba 0f09 	cmp.w	sl, #9
   809fe:	bf14      	ite	ne
   80a00:	f04f 0a00 	movne.w	sl, #0
   80a04:	f04f 0a01 	moveq.w	sl, #1
	int rx_data = 0;
   80a08:	2700      	movs	r7, #0
	cpu_irq_disable();
   80a0a:	4d24      	ldr	r5, [pc, #144]	; (80a9c <udi_cdc_multi_getc+0xb8>)
   80a0c:	f04f 0900 	mov.w	r9, #0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80a10:	4e23      	ldr	r6, [pc, #140]	; (80aa0 <udi_cdc_multi_getc+0xbc>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   80a12:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80ab4 <udi_cdc_multi_getc+0xd0>
   80a16:	e004      	b.n	80a22 <udi_cdc_multi_getc+0x3e>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
   80a18:	428b      	cmp	r3, r1
   80a1a:	d327      	bcc.n	80a6c <udi_cdc_multi_getc+0x88>
		if (!udi_cdc_data_running) {
   80a1c:	4b21      	ldr	r3, [pc, #132]	; (80aa4 <udi_cdc_multi_getc+0xc0>)
   80a1e:	781b      	ldrb	r3, [r3, #0]
   80a20:	b1fb      	cbz	r3, 80a62 <udi_cdc_multi_getc+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   80a22:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80a26:	fab3 f383 	clz	r3, r3
   80a2a:	095b      	lsrs	r3, r3, #5
   80a2c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80a2e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   80a30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80a34:	f885 9000 	strb.w	r9, [r5]
	return flags;
   80a38:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
   80a3a:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
   80a3e:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
   80a40:	f818 2004 	ldrb.w	r2, [r8, r4]
   80a44:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80a46:	eb02 0e44 	add.w	lr, r2, r4, lsl #1
   80a4a:	4917      	ldr	r1, [pc, #92]	; (80aa8 <udi_cdc_multi_getc+0xc4>)
   80a4c:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
   80a50:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
   80a52:	2800      	cmp	r0, #0
   80a54:	d0e0      	beq.n	80a18 <udi_cdc_multi_getc+0x34>
		cpu_irq_enable();
   80a56:	2001      	movs	r0, #1
   80a58:	7028      	strb	r0, [r5, #0]
   80a5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80a5e:	b662      	cpsie	i
   80a60:	e7da      	b.n	80a18 <udi_cdc_multi_getc+0x34>
			return 0;
   80a62:	2700      	movs	r7, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
   80a64:	4638      	mov	r0, r7
   80a66:	b003      	add	sp, #12
   80a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
   80a6c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
   80a70:	490e      	ldr	r1, [pc, #56]	; (80aac <udi_cdc_multi_getc+0xc8>)
   80a72:	eb01 2242 	add.w	r2, r1, r2, lsl #9
   80a76:	5cd2      	ldrb	r2, [r2, r3]
   80a78:	4317      	orrs	r7, r2
	udi_cdc_rx_pos[port] = pos+1;
   80a7a:	3301      	adds	r3, #1
   80a7c:	b29b      	uxth	r3, r3
   80a7e:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	udi_cdc_rx_start(port);
   80a82:	4658      	mov	r0, fp
   80a84:	4b0a      	ldr	r3, [pc, #40]	; (80ab0 <udi_cdc_multi_getc+0xcc>)
   80a86:	4798      	blx	r3
	if (b_databit_9) {
   80a88:	f1ba 0f00 	cmp.w	sl, #0
   80a8c:	d0ea      	beq.n	80a64 <udi_cdc_multi_getc+0x80>
		rx_data = rx_data << 8;
   80a8e:	023f      	lsls	r7, r7, #8
		b_databit_9 = false;
   80a90:	f04f 0a00 	mov.w	sl, #0
		goto udi_cdc_getc_process_one_byte;
   80a94:	e7c5      	b.n	80a22 <udi_cdc_multi_getc+0x3e>
   80a96:	bf00      	nop
   80a98:	20070778 	.word	0x20070778
   80a9c:	2007031c 	.word	0x2007031c
   80aa0:	20070f94 	.word	0x20070f94
   80aa4:	20070774 	.word	0x20070774
   80aa8:	20070f88 	.word	0x20070f88
   80aac:	20070788 	.word	0x20070788
   80ab0:	000807e5 	.word	0x000807e5
   80ab4:	20070f90 	.word	0x20070f90

00080ab8 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   80ab8:	b410      	push	{r4}
   80aba:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   80abc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80ac0:	fab3 f383 	clz	r3, r3
   80ac4:	095b      	lsrs	r3, r3, #5
   80ac6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80ac8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   80aca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80ace:	2200      	movs	r2, #0
   80ad0:	4b15      	ldr	r3, [pc, #84]	; (80b28 <udi_cdc_multi_get_free_tx_buffer+0x70>)
   80ad2:	701a      	strb	r2, [r3, #0]
	return flags;
   80ad4:	9901      	ldr	r1, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80ad6:	4b15      	ldr	r3, [pc, #84]	; (80b2c <udi_cdc_multi_get_free_tx_buffer+0x74>)
   80ad8:	5c1a      	ldrb	r2, [r3, r0]
   80ada:	b2d2      	uxtb	r2, r2
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80adc:	eb02 0440 	add.w	r4, r2, r0, lsl #1
   80ae0:	4b13      	ldr	r3, [pc, #76]	; (80b30 <udi_cdc_multi_get_free_tx_buffer+0x78>)
   80ae2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80aea:	d00b      	beq.n	80b04 <udi_cdc_multi_get_free_tx_buffer+0x4c>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   80aec:	f5c3 7000 	rsb	r0, r3, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   80af0:	b129      	cbz	r1, 80afe <udi_cdc_multi_get_free_tx_buffer+0x46>
		cpu_irq_enable();
   80af2:	2201      	movs	r2, #1
   80af4:	4b0c      	ldr	r3, [pc, #48]	; (80b28 <udi_cdc_multi_get_free_tx_buffer+0x70>)
   80af6:	701a      	strb	r2, [r3, #0]
   80af8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80afc:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   80afe:	b003      	add	sp, #12
   80b00:	bc10      	pop	{r4}
   80b02:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   80b04:	4c0b      	ldr	r4, [pc, #44]	; (80b34 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
   80b06:	5c24      	ldrb	r4, [r4, r0]
   80b08:	2c00      	cmp	r4, #0
   80b0a:	d1ef      	bne.n	80aec <udi_cdc_multi_get_free_tx_buffer+0x34>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   80b0c:	4c0a      	ldr	r4, [pc, #40]	; (80b38 <udi_cdc_multi_get_free_tx_buffer+0x80>)
   80b0e:	5c24      	ldrb	r4, [r4, r0]
   80b10:	2c00      	cmp	r4, #0
   80b12:	d1eb      	bne.n	80aec <udi_cdc_multi_get_free_tx_buffer+0x34>
			udi_cdc_tx_both_buf_to_send[port] = true;
   80b14:	2401      	movs	r4, #1
   80b16:	4b08      	ldr	r3, [pc, #32]	; (80b38 <udi_cdc_multi_get_free_tx_buffer+0x80>)
   80b18:	541c      	strb	r4, [r3, r0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   80b1a:	fab2 f282 	clz	r2, r2
   80b1e:	0952      	lsrs	r2, r2, #5
   80b20:	4b02      	ldr	r3, [pc, #8]	; (80b2c <udi_cdc_multi_get_free_tx_buffer+0x74>)
   80b22:	541a      	strb	r2, [r3, r0]
			buf_sel_nb = 0;
   80b24:	2300      	movs	r3, #0
   80b26:	e7e1      	b.n	80aec <udi_cdc_multi_get_free_tx_buffer+0x34>
   80b28:	2007031c 	.word	0x2007031c
   80b2c:	200717b0 	.word	0x200717b0
   80b30:	200717a8 	.word	0x200717a8
   80b34:	200717b8 	.word	0x200717b8
   80b38:	20070fa4 	.word	0x20070fa4

00080b3c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   80b3c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   80b3e:	4b03      	ldr	r3, [pc, #12]	; (80b4c <udi_cdc_multi_is_tx_ready+0x10>)
   80b40:	4798      	blx	r3
}
   80b42:	3000      	adds	r0, #0
   80b44:	bf18      	it	ne
   80b46:	2001      	movne	r0, #1
   80b48:	bd08      	pop	{r3, pc}
   80b4a:	bf00      	nop
   80b4c:	00080ab9 	.word	0x00080ab9

00080b50 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80b54:	b082      	sub	sp, #8
   80b56:	4605      	mov	r5, r0
   80b58:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   80b5a:	4680      	mov	r8, r0
   80b5c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   80b60:	4b1f      	ldr	r3, [pc, #124]	; (80be0 <udi_cdc_multi_putc+0x90>)
   80b62:	4413      	add	r3, r2
   80b64:	799e      	ldrb	r6, [r3, #6]
   80b66:	2e09      	cmp	r6, #9
   80b68:	bf14      	ite	ne
   80b6a:	2600      	movne	r6, #0
   80b6c:	2601      	moveq	r6, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80b6e:	4f1d      	ldr	r7, [pc, #116]	; (80be4 <udi_cdc_multi_putc+0x94>)
	cpu_irq_disable();
   80b70:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80bf4 <udi_cdc_multi_putc+0xa4>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80b74:	f8df a080 	ldr.w	sl, [pc, #128]	; 80bf8 <udi_cdc_multi_putc+0xa8>
   80b78:	e025      	b.n	80bc6 <udi_cdc_multi_putc+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   80b7a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80b7e:	fab3 f383 	clz	r3, r3
   80b82:	095b      	lsrs	r3, r3, #5
   80b84:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80b86:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   80b88:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80b8c:	2300      	movs	r3, #0
   80b8e:	f889 3000 	strb.w	r3, [r9]
	return flags;
   80b92:	9801      	ldr	r0, [sp, #4]
   80b94:	f81a 3008 	ldrb.w	r3, [sl, r8]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80b98:	4a13      	ldr	r2, [pc, #76]	; (80be8 <udi_cdc_multi_putc+0x98>)
   80b9a:	eb03 0348 	add.w	r3, r3, r8, lsl #1
   80b9e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   80ba2:	f101 0e01 	add.w	lr, r1, #1
   80ba6:	f822 e013 	strh.w	lr, [r2, r3, lsl #1]
   80baa:	4a10      	ldr	r2, [pc, #64]	; (80bec <udi_cdc_multi_putc+0x9c>)
   80bac:	eb02 2343 	add.w	r3, r2, r3, lsl #9
   80bb0:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
   80bb2:	b128      	cbz	r0, 80bc0 <udi_cdc_multi_putc+0x70>
		cpu_irq_enable();
   80bb4:	2301      	movs	r3, #1
   80bb6:	f889 3000 	strb.w	r3, [r9]
   80bba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80bbe:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80bc0:	b166      	cbz	r6, 80bdc <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80bc2:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   80bc4:	2600      	movs	r6, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80bc6:	4628      	mov	r0, r5
   80bc8:	47b8      	blx	r7
   80bca:	2800      	cmp	r0, #0
   80bcc:	d1d5      	bne.n	80b7a <udi_cdc_multi_putc+0x2a>
		if (!udi_cdc_data_running) {
   80bce:	4b08      	ldr	r3, [pc, #32]	; (80bf0 <udi_cdc_multi_putc+0xa0>)
   80bd0:	781b      	ldrb	r3, [r3, #0]
   80bd2:	2b00      	cmp	r3, #0
   80bd4:	d1f7      	bne.n	80bc6 <udi_cdc_multi_putc+0x76>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
   80bd6:	b002      	add	sp, #8
   80bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   80bdc:	2001      	movs	r0, #1
   80bde:	e7fa      	b.n	80bd6 <udi_cdc_multi_putc+0x86>
   80be0:	20070778 	.word	0x20070778
   80be4:	00080b3d 	.word	0x00080b3d
   80be8:	200717a8 	.word	0x200717a8
   80bec:	20070fa8 	.word	0x20070fa8
   80bf0:	20070774 	.word	0x20070774
   80bf4:	2007031c 	.word	0x2007031c
   80bf8:	200717b0 	.word	0x200717b0

00080bfc <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   80bfc:	4b10      	ldr	r3, [pc, #64]	; (80c40 <udc_next_desc_in_iface+0x44>)
   80bfe:	681b      	ldr	r3, [r3, #0]
   80c00:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80c02:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80c04:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   80c06:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80c08:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   80c0a:	4290      	cmp	r0, r2
   80c0c:	d211      	bcs.n	80c32 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80c0e:	7843      	ldrb	r3, [r0, #1]
   80c10:	2b04      	cmp	r3, #4
   80c12:	d010      	beq.n	80c36 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   80c14:	428b      	cmp	r3, r1
   80c16:	d009      	beq.n	80c2c <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   80c18:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80c1a:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   80c1c:	4290      	cmp	r0, r2
   80c1e:	d206      	bcs.n	80c2e <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80c20:	7843      	ldrb	r3, [r0, #1]
   80c22:	2b04      	cmp	r3, #4
   80c24:	d009      	beq.n	80c3a <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
   80c26:	428b      	cmp	r3, r1
   80c28:	d1f6      	bne.n	80c18 <udc_next_desc_in_iface+0x1c>
   80c2a:	e007      	b.n	80c3c <udc_next_desc_in_iface+0x40>
   80c2c:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
   80c2e:	2000      	movs	r0, #0
   80c30:	4770      	bx	lr
   80c32:	2000      	movs	r0, #0
   80c34:	4770      	bx	lr
   80c36:	2000      	movs	r0, #0
   80c38:	4770      	bx	lr
   80c3a:	2000      	movs	r0, #0
}
   80c3c:	4770      	bx	lr
   80c3e:	bf00      	nop
   80c40:	200717dc 	.word	0x200717dc

00080c44 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   80c44:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   80c46:	4b03      	ldr	r3, [pc, #12]	; (80c54 <udc_valid_address+0x10>)
   80c48:	7898      	ldrb	r0, [r3, #2]
   80c4a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80c4e:	4b02      	ldr	r3, [pc, #8]	; (80c58 <udc_valid_address+0x14>)
   80c50:	4798      	blx	r3
   80c52:	bd08      	pop	{r3, pc}
   80c54:	20071920 	.word	0x20071920
   80c58:	00082991 	.word	0x00082991

00080c5c <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   80c5c:	4b19      	ldr	r3, [pc, #100]	; (80cc4 <udc_update_iface_desc+0x68>)
   80c5e:	781b      	ldrb	r3, [r3, #0]
   80c60:	b34b      	cbz	r3, 80cb6 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80c62:	4b19      	ldr	r3, [pc, #100]	; (80cc8 <udc_update_iface_desc+0x6c>)
   80c64:	681b      	ldr	r3, [r3, #0]
   80c66:	681b      	ldr	r3, [r3, #0]
   80c68:	791a      	ldrb	r2, [r3, #4]
   80c6a:	4282      	cmp	r2, r0
   80c6c:	d925      	bls.n	80cba <udc_update_iface_desc+0x5e>
{
   80c6e:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80c70:	4a16      	ldr	r2, [pc, #88]	; (80ccc <udc_update_iface_desc+0x70>)
   80c72:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80c74:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80c76:	441c      	add	r4, r3
	while (ptr_end_desc >
   80c78:	42a3      	cmp	r3, r4
   80c7a:	d220      	bcs.n	80cbe <udc_update_iface_desc+0x62>
   80c7c:	2500      	movs	r5, #0
   80c7e:	2601      	movs	r6, #1
   80c80:	e007      	b.n	80c92 <udc_update_iface_desc+0x36>
   80c82:	4a12      	ldr	r2, [pc, #72]	; (80ccc <udc_update_iface_desc+0x70>)
   80c84:	6013      	str	r3, [r2, #0]
   80c86:	e00f      	b.n	80ca8 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
   80c88:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   80c8a:	4413      	add	r3, r2
   80c8c:	4635      	mov	r5, r6
	while (ptr_end_desc >
   80c8e:	42a3      	cmp	r3, r4
   80c90:	d20c      	bcs.n	80cac <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   80c92:	785a      	ldrb	r2, [r3, #1]
   80c94:	2a04      	cmp	r2, #4
   80c96:	d1f7      	bne.n	80c88 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80c98:	789a      	ldrb	r2, [r3, #2]
   80c9a:	4282      	cmp	r2, r0
   80c9c:	d1f4      	bne.n	80c88 <udc_update_iface_desc+0x2c>
   80c9e:	78da      	ldrb	r2, [r3, #3]
   80ca0:	428a      	cmp	r2, r1
   80ca2:	d1f1      	bne.n	80c88 <udc_update_iface_desc+0x2c>
   80ca4:	2d00      	cmp	r5, #0
   80ca6:	d1ec      	bne.n	80c82 <udc_update_iface_desc+0x26>
				return true; // Interface found
   80ca8:	2001      	movs	r0, #1
   80caa:	e002      	b.n	80cb2 <udc_update_iface_desc+0x56>
   80cac:	4a07      	ldr	r2, [pc, #28]	; (80ccc <udc_update_iface_desc+0x70>)
   80cae:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   80cb0:	2000      	movs	r0, #0
}
   80cb2:	bc70      	pop	{r4, r5, r6}
   80cb4:	4770      	bx	lr
		return false;
   80cb6:	2000      	movs	r0, #0
   80cb8:	4770      	bx	lr
		return false;
   80cba:	2000      	movs	r0, #0
   80cbc:	4770      	bx	lr
	return false; // Interface not found
   80cbe:	2000      	movs	r0, #0
   80cc0:	e7f7      	b.n	80cb2 <udc_update_iface_desc+0x56>
   80cc2:	bf00      	nop
   80cc4:	200717d8 	.word	0x200717d8
   80cc8:	200717dc 	.word	0x200717dc
   80ccc:	200717e0 	.word	0x200717e0

00080cd0 <udc_iface_disable>:
{
   80cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80cd4:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   80cd6:	2100      	movs	r1, #0
   80cd8:	4b13      	ldr	r3, [pc, #76]	; (80d28 <udc_iface_disable+0x58>)
   80cda:	4798      	blx	r3
   80cdc:	4680      	mov	r8, r0
   80cde:	b910      	cbnz	r0, 80ce6 <udc_iface_disable+0x16>
}
   80ce0:	4640      	mov	r0, r8
   80ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80ce6:	4b11      	ldr	r3, [pc, #68]	; (80d2c <udc_iface_disable+0x5c>)
   80ce8:	681b      	ldr	r3, [r3, #0]
   80cea:	685b      	ldr	r3, [r3, #4]
   80cec:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80cf0:	f8d9 300c 	ldr.w	r3, [r9, #12]
   80cf4:	4798      	blx	r3
   80cf6:	4601      	mov	r1, r0
   80cf8:	4620      	mov	r0, r4
   80cfa:	4b0b      	ldr	r3, [pc, #44]	; (80d28 <udc_iface_disable+0x58>)
   80cfc:	4798      	blx	r3
   80cfe:	4680      	mov	r8, r0
   80d00:	2800      	cmp	r0, #0
   80d02:	d0ed      	beq.n	80ce0 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80d04:	4b0a      	ldr	r3, [pc, #40]	; (80d30 <udc_iface_disable+0x60>)
   80d06:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80d08:	2605      	movs	r6, #5
   80d0a:	4d0a      	ldr	r5, [pc, #40]	; (80d34 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
   80d0c:	4f0a      	ldr	r7, [pc, #40]	; (80d38 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80d0e:	4631      	mov	r1, r6
   80d10:	4620      	mov	r0, r4
   80d12:	47a8      	blx	r5
			if (NULL == ep_desc) {
   80d14:	4604      	mov	r4, r0
   80d16:	b110      	cbz	r0, 80d1e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
   80d18:	7880      	ldrb	r0, [r0, #2]
   80d1a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80d1c:	e7f7      	b.n	80d0e <udc_iface_disable+0x3e>
	udi_api->disable();
   80d1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   80d22:	4798      	blx	r3
	return true;
   80d24:	e7dc      	b.n	80ce0 <udc_iface_disable+0x10>
   80d26:	bf00      	nop
   80d28:	00080c5d 	.word	0x00080c5d
   80d2c:	200717dc 	.word	0x200717dc
   80d30:	200717e0 	.word	0x200717e0
   80d34:	00080bfd 	.word	0x00080bfd
   80d38:	000829f5 	.word	0x000829f5

00080d3c <udc_iface_enable>:
{
   80d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d40:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   80d42:	4b10      	ldr	r3, [pc, #64]	; (80d84 <udc_iface_enable+0x48>)
   80d44:	4798      	blx	r3
   80d46:	4603      	mov	r3, r0
   80d48:	b1c8      	cbz	r0, 80d7e <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80d4a:	4b0f      	ldr	r3, [pc, #60]	; (80d88 <udc_iface_enable+0x4c>)
   80d4c:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80d4e:	2605      	movs	r6, #5
   80d50:	4d0e      	ldr	r5, [pc, #56]	; (80d8c <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80d52:	4f0f      	ldr	r7, [pc, #60]	; (80d90 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80d54:	4631      	mov	r1, r6
   80d56:	4620      	mov	r0, r4
   80d58:	47a8      	blx	r5
		if (NULL == ep_desc)
   80d5a:	4604      	mov	r4, r0
   80d5c:	b138      	cbz	r0, 80d6e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80d5e:	8882      	ldrh	r2, [r0, #4]
   80d60:	78c1      	ldrb	r1, [r0, #3]
   80d62:	7880      	ldrb	r0, [r0, #2]
   80d64:	47b8      	blx	r7
   80d66:	4603      	mov	r3, r0
   80d68:	2800      	cmp	r0, #0
   80d6a:	d1f3      	bne.n	80d54 <udc_iface_enable+0x18>
   80d6c:	e007      	b.n	80d7e <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   80d6e:	4b09      	ldr	r3, [pc, #36]	; (80d94 <udc_iface_enable+0x58>)
   80d70:	681b      	ldr	r3, [r3, #0]
   80d72:	685b      	ldr	r3, [r3, #4]
   80d74:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   80d78:	681b      	ldr	r3, [r3, #0]
   80d7a:	4798      	blx	r3
   80d7c:	4603      	mov	r3, r0
}
   80d7e:	4618      	mov	r0, r3
   80d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d84:	00080c5d 	.word	0x00080c5d
   80d88:	200717e0 	.word	0x200717e0
   80d8c:	00080bfd 	.word	0x00080bfd
   80d90:	00082d3d 	.word	0x00082d3d
   80d94:	200717dc 	.word	0x200717dc

00080d98 <udc_start>:
{
   80d98:	b508      	push	{r3, lr}
	udd_enable();
   80d9a:	4b01      	ldr	r3, [pc, #4]	; (80da0 <udc_start+0x8>)
   80d9c:	4798      	blx	r3
   80d9e:	bd08      	pop	{r3, pc}
   80da0:	00082105 	.word	0x00082105

00080da4 <udc_reset>:
{
   80da4:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   80da6:	4b0d      	ldr	r3, [pc, #52]	; (80ddc <udc_reset+0x38>)
   80da8:	781b      	ldrb	r3, [r3, #0]
   80daa:	b183      	cbz	r3, 80dce <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80dac:	4b0c      	ldr	r3, [pc, #48]	; (80de0 <udc_reset+0x3c>)
   80dae:	681b      	ldr	r3, [r3, #0]
   80db0:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   80db2:	791b      	ldrb	r3, [r3, #4]
   80db4:	b15b      	cbz	r3, 80dce <udc_reset+0x2a>
   80db6:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   80db8:	4e0a      	ldr	r6, [pc, #40]	; (80de4 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80dba:	4d09      	ldr	r5, [pc, #36]	; (80de0 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   80dbc:	4620      	mov	r0, r4
   80dbe:	47b0      	blx	r6
				iface_num++) {
   80dc0:	3401      	adds	r4, #1
   80dc2:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80dc4:	682b      	ldr	r3, [r5, #0]
   80dc6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   80dc8:	791b      	ldrb	r3, [r3, #4]
   80dca:	42a3      	cmp	r3, r4
   80dcc:	d8f6      	bhi.n	80dbc <udc_reset+0x18>
	udc_num_configuration = 0;
   80dce:	2200      	movs	r2, #0
   80dd0:	4b02      	ldr	r3, [pc, #8]	; (80ddc <udc_reset+0x38>)
   80dd2:	701a      	strb	r2, [r3, #0]
	udc_device_status =
   80dd4:	2201      	movs	r2, #1
   80dd6:	4b04      	ldr	r3, [pc, #16]	; (80de8 <udc_reset+0x44>)
   80dd8:	801a      	strh	r2, [r3, #0]
   80dda:	bd70      	pop	{r4, r5, r6, pc}
   80ddc:	200717d8 	.word	0x200717d8
   80de0:	200717dc 	.word	0x200717dc
   80de4:	00080cd1 	.word	0x00080cd1
   80de8:	200717d0 	.word	0x200717d0

00080dec <udc_sof_notify>:
{
   80dec:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   80dee:	4b0d      	ldr	r3, [pc, #52]	; (80e24 <udc_sof_notify+0x38>)
   80df0:	781b      	ldrb	r3, [r3, #0]
   80df2:	b1b3      	cbz	r3, 80e22 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80df4:	4b0c      	ldr	r3, [pc, #48]	; (80e28 <udc_sof_notify+0x3c>)
   80df6:	681b      	ldr	r3, [r3, #0]
   80df8:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   80dfa:	7912      	ldrb	r2, [r2, #4]
   80dfc:	b18a      	cbz	r2, 80e22 <udc_sof_notify+0x36>
   80dfe:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80e00:	4d09      	ldr	r5, [pc, #36]	; (80e28 <udc_sof_notify+0x3c>)
   80e02:	e006      	b.n	80e12 <udc_sof_notify+0x26>
				iface_num++) {
   80e04:	3401      	adds	r4, #1
   80e06:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80e08:	682b      	ldr	r3, [r5, #0]
   80e0a:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   80e0c:	7912      	ldrb	r2, [r2, #4]
   80e0e:	42a2      	cmp	r2, r4
   80e10:	d907      	bls.n	80e22 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   80e12:	685b      	ldr	r3, [r3, #4]
   80e14:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   80e18:	691b      	ldr	r3, [r3, #16]
   80e1a:	2b00      	cmp	r3, #0
   80e1c:	d0f2      	beq.n	80e04 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   80e1e:	4798      	blx	r3
   80e20:	e7f0      	b.n	80e04 <udc_sof_notify+0x18>
   80e22:	bd38      	pop	{r3, r4, r5, pc}
   80e24:	200717d8 	.word	0x200717d8
   80e28:	200717dc 	.word	0x200717dc

00080e2c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   80e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   80e2e:	4b94      	ldr	r3, [pc, #592]	; (81080 <udc_process_setup+0x254>)
   80e30:	2200      	movs	r2, #0
   80e32:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   80e34:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   80e36:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   80e38:	781b      	ldrb	r3, [r3, #0]
   80e3a:	f013 0f80 	tst.w	r3, #128	; 0x80
   80e3e:	d114      	bne.n	80e6a <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80e40:	f013 0f60 	tst.w	r3, #96	; 0x60
   80e44:	f000 813a 	beq.w	810bc <udc_process_setup+0x290>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   80e48:	4b8d      	ldr	r3, [pc, #564]	; (81080 <udc_process_setup+0x254>)
   80e4a:	781b      	ldrb	r3, [r3, #0]
   80e4c:	f003 031f 	and.w	r3, r3, #31
   80e50:	2b01      	cmp	r3, #1
   80e52:	f000 8206 	beq.w	81262 <udc_process_setup+0x436>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   80e56:	4b8a      	ldr	r3, [pc, #552]	; (81080 <udc_process_setup+0x254>)
   80e58:	781b      	ldrb	r3, [r3, #0]
   80e5a:	f003 031f 	and.w	r3, r3, #31
   80e5e:	2b02      	cmp	r3, #2
   80e60:	f000 8284 	beq.w	8136c <udc_process_setup+0x540>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   80e64:	2300      	movs	r3, #0
#endif
}
   80e66:	4618      	mov	r0, r3
   80e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   80e6a:	4a85      	ldr	r2, [pc, #532]	; (81080 <udc_process_setup+0x254>)
   80e6c:	88d2      	ldrh	r2, [r2, #6]
   80e6e:	2a00      	cmp	r2, #0
   80e70:	f000 82a5 	beq.w	813be <udc_process_setup+0x592>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80e74:	f013 0f60 	tst.w	r3, #96	; 0x60
   80e78:	d1e6      	bne.n	80e48 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80e7a:	f013 031f 	ands.w	r3, r3, #31
   80e7e:	d107      	bne.n	80e90 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
   80e80:	497f      	ldr	r1, [pc, #508]	; (81080 <udc_process_setup+0x254>)
   80e82:	7849      	ldrb	r1, [r1, #1]
   80e84:	2906      	cmp	r1, #6
   80e86:	d016      	beq.n	80eb6 <udc_process_setup+0x8a>
   80e88:	2908      	cmp	r1, #8
   80e8a:	f000 80ba 	beq.w	81002 <udc_process_setup+0x1d6>
   80e8e:	b159      	cbz	r1, 80ea8 <udc_process_setup+0x7c>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80e90:	2b01      	cmp	r3, #1
   80e92:	f000 80be 	beq.w	81012 <udc_process_setup+0x1e6>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80e96:	2b02      	cmp	r3, #2
   80e98:	d1d6      	bne.n	80e48 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
   80e9a:	4b79      	ldr	r3, [pc, #484]	; (81080 <udc_process_setup+0x254>)
   80e9c:	785b      	ldrb	r3, [r3, #1]
   80e9e:	2b00      	cmp	r3, #0
   80ea0:	f000 80e0 	beq.w	81064 <udc_process_setup+0x238>
	return false;
   80ea4:	2300      	movs	r3, #0
   80ea6:	e1ce      	b.n	81246 <udc_process_setup+0x41a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   80ea8:	2a02      	cmp	r2, #2
   80eaa:	d1d4      	bne.n	80e56 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   80eac:	2102      	movs	r1, #2
   80eae:	4875      	ldr	r0, [pc, #468]	; (81084 <udc_process_setup+0x258>)
   80eb0:	4b75      	ldr	r3, [pc, #468]	; (81088 <udc_process_setup+0x25c>)
   80eb2:	4798      	blx	r3
   80eb4:	e11f      	b.n	810f6 <udc_process_setup+0x2ca>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   80eb6:	4b72      	ldr	r3, [pc, #456]	; (81080 <udc_process_setup+0x254>)
   80eb8:	885a      	ldrh	r2, [r3, #2]
   80eba:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   80ebc:	0a13      	lsrs	r3, r2, #8
   80ebe:	3b01      	subs	r3, #1
   80ec0:	2b0e      	cmp	r3, #14
   80ec2:	f200 820f 	bhi.w	812e4 <udc_process_setup+0x4b8>
   80ec6:	e8df f013 	tbh	[pc, r3, lsl #1]
   80eca:	000f      	.short	0x000f
   80ecc:	0079001e 	.word	0x0079001e
   80ed0:	020d020d 	.word	0x020d020d
   80ed4:	004d003f 	.word	0x004d003f
   80ed8:	020d020d 	.word	0x020d020d
   80edc:	020d020d 	.word	0x020d020d
   80ee0:	020d020d 	.word	0x020d020d
   80ee4:	0070020d 	.word	0x0070020d
		if (!udd_is_high_speed()) {
   80ee8:	4b68      	ldr	r3, [pc, #416]	; (8108c <udc_process_setup+0x260>)
   80eea:	4798      	blx	r3
   80eec:	b928      	cbnz	r0, 80efa <udc_process_setup+0xce>
				(uint8_t *) udc_config.confdev_hs,
   80eee:	4b68      	ldr	r3, [pc, #416]	; (81090 <udc_process_setup+0x264>)
   80ef0:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   80ef2:	7801      	ldrb	r1, [r0, #0]
   80ef4:	4b64      	ldr	r3, [pc, #400]	; (81088 <udc_process_setup+0x25c>)
   80ef6:	4798      	blx	r3
   80ef8:	e02b      	b.n	80f52 <udc_process_setup+0x126>
				(uint8_t *) udc_config.confdev_lsfs,
   80efa:	4b65      	ldr	r3, [pc, #404]	; (81090 <udc_process_setup+0x264>)
   80efc:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   80efe:	7801      	ldrb	r1, [r0, #0]
   80f00:	4b61      	ldr	r3, [pc, #388]	; (81088 <udc_process_setup+0x25c>)
   80f02:	4798      	blx	r3
   80f04:	e025      	b.n	80f52 <udc_process_setup+0x126>
		if (udd_is_high_speed()) {
   80f06:	4b61      	ldr	r3, [pc, #388]	; (8108c <udc_process_setup+0x260>)
   80f08:	4798      	blx	r3
   80f0a:	b180      	cbz	r0, 80f2e <udc_process_setup+0x102>
			if (conf_num >= udc_config.confdev_hs->
   80f0c:	4b60      	ldr	r3, [pc, #384]	; (81090 <udc_process_setup+0x264>)
   80f0e:	689b      	ldr	r3, [r3, #8]
   80f10:	7c5b      	ldrb	r3, [r3, #17]
   80f12:	42a3      	cmp	r3, r4
   80f14:	d998      	bls.n	80e48 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   80f16:	4b5e      	ldr	r3, [pc, #376]	; (81090 <udc_process_setup+0x264>)
   80f18:	691b      	ldr	r3, [r3, #16]
   80f1a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   80f1e:	8841      	ldrh	r1, [r0, #2]
   80f20:	4b59      	ldr	r3, [pc, #356]	; (81088 <udc_process_setup+0x25c>)
   80f22:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   80f24:	4b56      	ldr	r3, [pc, #344]	; (81080 <udc_process_setup+0x254>)
   80f26:	689b      	ldr	r3, [r3, #8]
   80f28:	2202      	movs	r2, #2
   80f2a:	705a      	strb	r2, [r3, #1]
   80f2c:	e011      	b.n	80f52 <udc_process_setup+0x126>
			if (conf_num >= udc_config.confdev_lsfs->
   80f2e:	4b58      	ldr	r3, [pc, #352]	; (81090 <udc_process_setup+0x264>)
   80f30:	681b      	ldr	r3, [r3, #0]
   80f32:	7c5b      	ldrb	r3, [r3, #17]
   80f34:	42a3      	cmp	r3, r4
   80f36:	d987      	bls.n	80e48 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   80f38:	4b55      	ldr	r3, [pc, #340]	; (81090 <udc_process_setup+0x264>)
   80f3a:	685b      	ldr	r3, [r3, #4]
   80f3c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   80f40:	8841      	ldrh	r1, [r0, #2]
   80f42:	4b51      	ldr	r3, [pc, #324]	; (81088 <udc_process_setup+0x25c>)
   80f44:	4798      	blx	r3
   80f46:	e7ed      	b.n	80f24 <udc_process_setup+0xf8>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   80f48:	4b51      	ldr	r3, [pc, #324]	; (81090 <udc_process_setup+0x264>)
   80f4a:	68d8      	ldr	r0, [r3, #12]
   80f4c:	7801      	ldrb	r1, [r0, #0]
   80f4e:	4b4e      	ldr	r3, [pc, #312]	; (81088 <udc_process_setup+0x25c>)
   80f50:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   80f52:	4b4b      	ldr	r3, [pc, #300]	; (81080 <udc_process_setup+0x254>)
   80f54:	88da      	ldrh	r2, [r3, #6]
   80f56:	899b      	ldrh	r3, [r3, #12]
   80f58:	4293      	cmp	r3, r2
   80f5a:	f240 80cc 	bls.w	810f6 <udc_process_setup+0x2ca>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   80f5e:	4b48      	ldr	r3, [pc, #288]	; (81080 <udc_process_setup+0x254>)
   80f60:	819a      	strh	r2, [r3, #12]
   80f62:	e0c8      	b.n	810f6 <udc_process_setup+0x2ca>
		if (!udd_is_high_speed()) {
   80f64:	4b49      	ldr	r3, [pc, #292]	; (8108c <udc_process_setup+0x260>)
   80f66:	4798      	blx	r3
   80f68:	b988      	cbnz	r0, 80f8e <udc_process_setup+0x162>
			if (conf_num >= udc_config.confdev_hs->
   80f6a:	4b49      	ldr	r3, [pc, #292]	; (81090 <udc_process_setup+0x264>)
   80f6c:	689b      	ldr	r3, [r3, #8]
   80f6e:	7c5b      	ldrb	r3, [r3, #17]
   80f70:	42a3      	cmp	r3, r4
   80f72:	f67f af69 	bls.w	80e48 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   80f76:	4b46      	ldr	r3, [pc, #280]	; (81090 <udc_process_setup+0x264>)
   80f78:	691b      	ldr	r3, [r3, #16]
   80f7a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   80f7e:	8841      	ldrh	r1, [r0, #2]
   80f80:	4b41      	ldr	r3, [pc, #260]	; (81088 <udc_process_setup+0x25c>)
   80f82:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   80f84:	4b3e      	ldr	r3, [pc, #248]	; (81080 <udc_process_setup+0x254>)
   80f86:	689b      	ldr	r3, [r3, #8]
   80f88:	2207      	movs	r2, #7
   80f8a:	705a      	strb	r2, [r3, #1]
   80f8c:	e7e1      	b.n	80f52 <udc_process_setup+0x126>
			if (conf_num >= udc_config.confdev_lsfs->
   80f8e:	4b40      	ldr	r3, [pc, #256]	; (81090 <udc_process_setup+0x264>)
   80f90:	681b      	ldr	r3, [r3, #0]
   80f92:	7c5b      	ldrb	r3, [r3, #17]
   80f94:	42a3      	cmp	r3, r4
   80f96:	f67f af57 	bls.w	80e48 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   80f9a:	4b3d      	ldr	r3, [pc, #244]	; (81090 <udc_process_setup+0x264>)
   80f9c:	685b      	ldr	r3, [r3, #4]
   80f9e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   80fa2:	8841      	ldrh	r1, [r0, #2]
   80fa4:	4b38      	ldr	r3, [pc, #224]	; (81088 <udc_process_setup+0x25c>)
   80fa6:	4798      	blx	r3
   80fa8:	e7ec      	b.n	80f84 <udc_process_setup+0x158>
		if (udc_config.conf_bos == NULL) {
   80faa:	4b39      	ldr	r3, [pc, #228]	; (81090 <udc_process_setup+0x264>)
   80fac:	6958      	ldr	r0, [r3, #20]
   80fae:	2800      	cmp	r0, #0
   80fb0:	f43f af51 	beq.w	80e56 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   80fb4:	8841      	ldrh	r1, [r0, #2]
   80fb6:	4b34      	ldr	r3, [pc, #208]	; (81088 <udc_process_setup+0x25c>)
   80fb8:	4798      	blx	r3
   80fba:	e7ca      	b.n	80f52 <udc_process_setup+0x126>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   80fbc:	b2d2      	uxtb	r2, r2
   80fbe:	2a01      	cmp	r2, #1
   80fc0:	d01c      	beq.n	80ffc <udc_process_setup+0x1d0>
   80fc2:	b1b2      	cbz	r2, 80ff2 <udc_process_setup+0x1c6>
   80fc4:	2a02      	cmp	r2, #2
   80fc6:	f47f af3f 	bne.w	80e48 <udc_process_setup+0x1c>
		str = udc_string_product_name;
   80fca:	4a32      	ldr	r2, [pc, #200]	; (81094 <udc_process_setup+0x268>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   80fcc:	2113      	movs	r1, #19
   80fce:	3a01      	subs	r2, #1
   80fd0:	4831      	ldr	r0, [pc, #196]	; (81098 <udc_process_setup+0x26c>)
   80fd2:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   80fd4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   80fd8:	f820 4f02 	strh.w	r4, [r0, #2]!
		for(i = 0; i < str_length; i++) {
   80fdc:	3301      	adds	r3, #1
   80fde:	b2db      	uxtb	r3, r3
   80fe0:	428b      	cmp	r3, r1
   80fe2:	d3f7      	bcc.n	80fd4 <udc_process_setup+0x1a8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   80fe4:	0049      	lsls	r1, r1, #1
   80fe6:	3102      	adds	r1, #2
   80fe8:	482b      	ldr	r0, [pc, #172]	; (81098 <udc_process_setup+0x26c>)
   80fea:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   80fec:	4b26      	ldr	r3, [pc, #152]	; (81088 <udc_process_setup+0x25c>)
   80fee:	4798      	blx	r3
   80ff0:	e7af      	b.n	80f52 <udc_process_setup+0x126>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   80ff2:	2104      	movs	r1, #4
   80ff4:	4829      	ldr	r0, [pc, #164]	; (8109c <udc_process_setup+0x270>)
   80ff6:	4b24      	ldr	r3, [pc, #144]	; (81088 <udc_process_setup+0x25c>)
   80ff8:	4798      	blx	r3
   80ffa:	e7aa      	b.n	80f52 <udc_process_setup+0x126>
		str = udc_string_manufacturer_name;
   80ffc:	4a28      	ldr	r2, [pc, #160]	; (810a0 <udc_process_setup+0x274>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   80ffe:	210f      	movs	r1, #15
   81000:	e7e5      	b.n	80fce <udc_process_setup+0x1a2>
	if (udd_g_ctrlreq.req.wLength != 1) {
   81002:	2a01      	cmp	r2, #1
   81004:	f47f af27 	bne.w	80e56 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   81008:	2101      	movs	r1, #1
   8100a:	4826      	ldr	r0, [pc, #152]	; (810a4 <udc_process_setup+0x278>)
   8100c:	4b1e      	ldr	r3, [pc, #120]	; (81088 <udc_process_setup+0x25c>)
   8100e:	4798      	blx	r3
   81010:	e071      	b.n	810f6 <udc_process_setup+0x2ca>
			switch (udd_g_ctrlreq.req.bRequest) {
   81012:	491b      	ldr	r1, [pc, #108]	; (81080 <udc_process_setup+0x254>)
   81014:	7849      	ldrb	r1, [r1, #1]
   81016:	290a      	cmp	r1, #10
   81018:	f47f af3d 	bne.w	80e96 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   8101c:	2a01      	cmp	r2, #1
   8101e:	f040 8120 	bne.w	81262 <udc_process_setup+0x436>
	if (!udc_num_configuration) {
   81022:	4b20      	ldr	r3, [pc, #128]	; (810a4 <udc_process_setup+0x278>)
   81024:	781b      	ldrb	r3, [r3, #0]
   81026:	2b00      	cmp	r3, #0
   81028:	f000 811b 	beq.w	81262 <udc_process_setup+0x436>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8102c:	4b14      	ldr	r3, [pc, #80]	; (81080 <udc_process_setup+0x254>)
   8102e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81030:	4b1d      	ldr	r3, [pc, #116]	; (810a8 <udc_process_setup+0x27c>)
   81032:	681d      	ldr	r5, [r3, #0]
   81034:	682b      	ldr	r3, [r5, #0]
   81036:	791b      	ldrb	r3, [r3, #4]
   81038:	42a3      	cmp	r3, r4
   8103a:	f240 8112 	bls.w	81262 <udc_process_setup+0x436>
	if (!udc_update_iface_desc(iface_num, 0)) {
   8103e:	2100      	movs	r1, #0
   81040:	4620      	mov	r0, r4
   81042:	4b1a      	ldr	r3, [pc, #104]	; (810ac <udc_process_setup+0x280>)
   81044:	4798      	blx	r3
   81046:	2800      	cmp	r0, #0
   81048:	f43f aefe 	beq.w	80e48 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8104c:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   8104e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   81052:	68db      	ldr	r3, [r3, #12]
   81054:	4798      	blx	r3
   81056:	4b16      	ldr	r3, [pc, #88]	; (810b0 <udc_process_setup+0x284>)
   81058:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   8105a:	2101      	movs	r1, #1
   8105c:	4618      	mov	r0, r3
   8105e:	4b0a      	ldr	r3, [pc, #40]	; (81088 <udc_process_setup+0x25c>)
   81060:	4798      	blx	r3
   81062:	e048      	b.n	810f6 <udc_process_setup+0x2ca>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   81064:	2a02      	cmp	r2, #2
   81066:	f47f aef6 	bne.w	80e56 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8106a:	4b05      	ldr	r3, [pc, #20]	; (81080 <udc_process_setup+0x254>)
   8106c:	7918      	ldrb	r0, [r3, #4]
   8106e:	4b11      	ldr	r3, [pc, #68]	; (810b4 <udc_process_setup+0x288>)
   81070:	4798      	blx	r3
   81072:	4b11      	ldr	r3, [pc, #68]	; (810b8 <udc_process_setup+0x28c>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   81074:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   81076:	2102      	movs	r1, #2
   81078:	4618      	mov	r0, r3
   8107a:	4b03      	ldr	r3, [pc, #12]	; (81088 <udc_process_setup+0x25c>)
   8107c:	4798      	blx	r3
   8107e:	e03a      	b.n	810f6 <udc_process_setup+0x2ca>
   81080:	20071920 	.word	0x20071920
   81084:	200717d0 	.word	0x200717d0
   81088:	000829e9 	.word	0x000829e9
   8108c:	0008297d 	.word	0x0008297d
   81090:	20070154 	.word	0x20070154
   81094:	20070308 	.word	0x20070308
   81098:	200702cc 	.word	0x200702cc
   8109c:	200702f4 	.word	0x200702f4
   810a0:	200702f8 	.word	0x200702f8
   810a4:	200717d8 	.word	0x200717d8
   810a8:	200717dc 	.word	0x200717dc
   810ac:	00080c5d 	.word	0x00080c5d
   810b0:	200717d4 	.word	0x200717d4
   810b4:	00082a51 	.word	0x00082a51
   810b8:	200717d2 	.word	0x200717d2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   810bc:	f013 031f 	ands.w	r3, r3, #31
   810c0:	f040 80b5 	bne.w	8122e <udc_process_setup+0x402>
			switch (udd_g_ctrlreq.req.bRequest) {
   810c4:	4a8a      	ldr	r2, [pc, #552]	; (812f0 <udc_process_setup+0x4c4>)
   810c6:	7852      	ldrb	r2, [r2, #1]
   810c8:	3a01      	subs	r2, #1
   810ca:	2a08      	cmp	r2, #8
   810cc:	f200 80af 	bhi.w	8122e <udc_process_setup+0x402>
   810d0:	e8df f012 	tbh	[pc, r2, lsl #1]
   810d4:	00ad0013 	.word	0x00ad0013
   810d8:	00ad0023 	.word	0x00ad0023
   810dc:	00ad0009 	.word	0x00ad0009
   810e0:	00ad00ad 	.word	0x00ad00ad
   810e4:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   810e6:	4b82      	ldr	r3, [pc, #520]	; (812f0 <udc_process_setup+0x4c4>)
   810e8:	88db      	ldrh	r3, [r3, #6]
   810ea:	2b00      	cmp	r3, #0
   810ec:	f47f aeb3 	bne.w	80e56 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   810f0:	4a80      	ldr	r2, [pc, #512]	; (812f4 <udc_process_setup+0x4c8>)
   810f2:	4b7f      	ldr	r3, [pc, #508]	; (812f0 <udc_process_setup+0x4c4>)
   810f4:	611a      	str	r2, [r3, #16]
			return true;
   810f6:	2301      	movs	r3, #1
   810f8:	e6b5      	b.n	80e66 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
   810fa:	4b7d      	ldr	r3, [pc, #500]	; (812f0 <udc_process_setup+0x4c4>)
   810fc:	88db      	ldrh	r3, [r3, #6]
   810fe:	2b00      	cmp	r3, #0
   81100:	f47f aea9 	bne.w	80e56 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   81104:	4b7a      	ldr	r3, [pc, #488]	; (812f0 <udc_process_setup+0x4c4>)
   81106:	885b      	ldrh	r3, [r3, #2]
   81108:	2b01      	cmp	r3, #1
   8110a:	f47f aea4 	bne.w	80e56 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   8110e:	4a7a      	ldr	r2, [pc, #488]	; (812f8 <udc_process_setup+0x4cc>)
   81110:	8813      	ldrh	r3, [r2, #0]
   81112:	f023 0302 	bic.w	r3, r3, #2
   81116:	8013      	strh	r3, [r2, #0]
   81118:	e7ed      	b.n	810f6 <udc_process_setup+0x2ca>
	if (udd_g_ctrlreq.req.wLength) {
   8111a:	4b75      	ldr	r3, [pc, #468]	; (812f0 <udc_process_setup+0x4c4>)
   8111c:	88db      	ldrh	r3, [r3, #6]
   8111e:	2b00      	cmp	r3, #0
   81120:	f47f ae99 	bne.w	80e56 <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   81124:	4b72      	ldr	r3, [pc, #456]	; (812f0 <udc_process_setup+0x4c4>)
   81126:	885b      	ldrh	r3, [r3, #2]
   81128:	2b02      	cmp	r3, #2
   8112a:	f040 80dd 	bne.w	812e8 <udc_process_setup+0x4bc>
		if (!udd_is_high_speed()) {
   8112e:	4b73      	ldr	r3, [pc, #460]	; (812fc <udc_process_setup+0x4d0>)
   81130:	4798      	blx	r3
   81132:	2800      	cmp	r0, #0
   81134:	f43f ae88 	beq.w	80e48 <udc_process_setup+0x1c>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   81138:	4b6d      	ldr	r3, [pc, #436]	; (812f0 <udc_process_setup+0x4c4>)
   8113a:	791b      	ldrb	r3, [r3, #4]
   8113c:	2b00      	cmp	r3, #0
   8113e:	f47f ae83 	bne.w	80e48 <udc_process_setup+0x1c>
		udc_reset();
   81142:	4b6f      	ldr	r3, [pc, #444]	; (81300 <udc_process_setup+0x4d4>)
   81144:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   81146:	4b6a      	ldr	r3, [pc, #424]	; (812f0 <udc_process_setup+0x4c4>)
   81148:	889b      	ldrh	r3, [r3, #4]
   8114a:	0a1b      	lsrs	r3, r3, #8
   8114c:	3b01      	subs	r3, #1
   8114e:	2b03      	cmp	r3, #3
   81150:	f200 80cc 	bhi.w	812ec <udc_process_setup+0x4c0>
   81154:	e8df f003 	tbb	[pc, r3]
   81158:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   8115c:	4a69      	ldr	r2, [pc, #420]	; (81304 <udc_process_setup+0x4d8>)
   8115e:	4b64      	ldr	r3, [pc, #400]	; (812f0 <udc_process_setup+0x4c4>)
   81160:	611a      	str	r2, [r3, #16]
   81162:	e7c8      	b.n	810f6 <udc_process_setup+0x2ca>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   81164:	4a68      	ldr	r2, [pc, #416]	; (81308 <udc_process_setup+0x4dc>)
   81166:	4b62      	ldr	r3, [pc, #392]	; (812f0 <udc_process_setup+0x4c4>)
   81168:	611a      	str	r2, [r3, #16]
   8116a:	e7c4      	b.n	810f6 <udc_process_setup+0x2ca>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   8116c:	4a67      	ldr	r2, [pc, #412]	; (8130c <udc_process_setup+0x4e0>)
   8116e:	4b60      	ldr	r3, [pc, #384]	; (812f0 <udc_process_setup+0x4c4>)
   81170:	611a      	str	r2, [r3, #16]
   81172:	e7c0      	b.n	810f6 <udc_process_setup+0x2ca>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   81174:	4a66      	ldr	r2, [pc, #408]	; (81310 <udc_process_setup+0x4e4>)
   81176:	4b5e      	ldr	r3, [pc, #376]	; (812f0 <udc_process_setup+0x4c4>)
   81178:	611a      	str	r2, [r3, #16]
   8117a:	e7bc      	b.n	810f6 <udc_process_setup+0x2ca>
	if (udd_g_ctrlreq.req.wLength) {
   8117c:	4b5c      	ldr	r3, [pc, #368]	; (812f0 <udc_process_setup+0x4c4>)
   8117e:	88db      	ldrh	r3, [r3, #6]
   81180:	2b00      	cmp	r3, #0
   81182:	f47f ae68 	bne.w	80e56 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   81186:	4b63      	ldr	r3, [pc, #396]	; (81314 <udc_process_setup+0x4e8>)
   81188:	4798      	blx	r3
   8118a:	2800      	cmp	r0, #0
   8118c:	f43f ae5c 	beq.w	80e48 <udc_process_setup+0x1c>
	if (udd_is_high_speed()) {
   81190:	4b5a      	ldr	r3, [pc, #360]	; (812fc <udc_process_setup+0x4d0>)
   81192:	4798      	blx	r3
   81194:	2800      	cmp	r0, #0
   81196:	d036      	beq.n	81206 <udc_process_setup+0x3da>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81198:	4b55      	ldr	r3, [pc, #340]	; (812f0 <udc_process_setup+0x4c4>)
   8119a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   8119c:	4b5e      	ldr	r3, [pc, #376]	; (81318 <udc_process_setup+0x4ec>)
   8119e:	689b      	ldr	r3, [r3, #8]
   811a0:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   811a2:	429a      	cmp	r2, r3
   811a4:	f73f ae50 	bgt.w	80e48 <udc_process_setup+0x1c>
	udc_reset();
   811a8:	4b55      	ldr	r3, [pc, #340]	; (81300 <udc_process_setup+0x4d4>)
   811aa:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   811ac:	4b50      	ldr	r3, [pc, #320]	; (812f0 <udc_process_setup+0x4c4>)
   811ae:	789b      	ldrb	r3, [r3, #2]
   811b0:	4a5a      	ldr	r2, [pc, #360]	; (8131c <udc_process_setup+0x4f0>)
   811b2:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   811b4:	2b00      	cmp	r3, #0
   811b6:	d09e      	beq.n	810f6 <udc_process_setup+0x2ca>
	if (udd_is_high_speed()) {
   811b8:	4b50      	ldr	r3, [pc, #320]	; (812fc <udc_process_setup+0x4d0>)
   811ba:	4798      	blx	r3
   811bc:	2800      	cmp	r0, #0
   811be:	d02a      	beq.n	81216 <udc_process_setup+0x3ea>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   811c0:	4b56      	ldr	r3, [pc, #344]	; (8131c <udc_process_setup+0x4f0>)
   811c2:	781b      	ldrb	r3, [r3, #0]
   811c4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   811c8:	3b01      	subs	r3, #1
   811ca:	4a53      	ldr	r2, [pc, #332]	; (81318 <udc_process_setup+0x4ec>)
   811cc:	6912      	ldr	r2, [r2, #16]
   811ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   811d2:	4a53      	ldr	r2, [pc, #332]	; (81320 <udc_process_setup+0x4f4>)
   811d4:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811d6:	4b52      	ldr	r3, [pc, #328]	; (81320 <udc_process_setup+0x4f4>)
   811d8:	681b      	ldr	r3, [r3, #0]
   811da:	681b      	ldr	r3, [r3, #0]
   811dc:	791b      	ldrb	r3, [r3, #4]
   811de:	2b00      	cmp	r3, #0
   811e0:	d089      	beq.n	810f6 <udc_process_setup+0x2ca>
   811e2:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   811e4:	4626      	mov	r6, r4
   811e6:	4d4f      	ldr	r5, [pc, #316]	; (81324 <udc_process_setup+0x4f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811e8:	4f4d      	ldr	r7, [pc, #308]	; (81320 <udc_process_setup+0x4f4>)
		if (!udc_iface_enable(iface_num, 0)) {
   811ea:	4631      	mov	r1, r6
   811ec:	4620      	mov	r0, r4
   811ee:	47a8      	blx	r5
   811f0:	2800      	cmp	r0, #0
   811f2:	f43f ae29 	beq.w	80e48 <udc_process_setup+0x1c>
			iface_num++) {
   811f6:	3401      	adds	r4, #1
   811f8:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811fa:	683b      	ldr	r3, [r7, #0]
   811fc:	681b      	ldr	r3, [r3, #0]
   811fe:	791b      	ldrb	r3, [r3, #4]
   81200:	42a3      	cmp	r3, r4
   81202:	d8f2      	bhi.n	811ea <udc_process_setup+0x3be>
   81204:	e777      	b.n	810f6 <udc_process_setup+0x2ca>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81206:	4b3a      	ldr	r3, [pc, #232]	; (812f0 <udc_process_setup+0x4c4>)
   81208:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   8120a:	4b43      	ldr	r3, [pc, #268]	; (81318 <udc_process_setup+0x4ec>)
   8120c:	681b      	ldr	r3, [r3, #0]
   8120e:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81210:	429a      	cmp	r2, r3
   81212:	ddc9      	ble.n	811a8 <udc_process_setup+0x37c>
   81214:	e618      	b.n	80e48 <udc_process_setup+0x1c>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   81216:	4b41      	ldr	r3, [pc, #260]	; (8131c <udc_process_setup+0x4f0>)
   81218:	781b      	ldrb	r3, [r3, #0]
   8121a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8121e:	3b01      	subs	r3, #1
   81220:	4a3d      	ldr	r2, [pc, #244]	; (81318 <udc_process_setup+0x4ec>)
   81222:	6852      	ldr	r2, [r2, #4]
   81224:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81228:	4a3d      	ldr	r2, [pc, #244]	; (81320 <udc_process_setup+0x4f4>)
   8122a:	6013      	str	r3, [r2, #0]
   8122c:	e7d3      	b.n	811d6 <udc_process_setup+0x3aa>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8122e:	2b01      	cmp	r3, #1
   81230:	d00d      	beq.n	8124e <udc_process_setup+0x422>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81232:	2b02      	cmp	r3, #2
   81234:	f47f ae08 	bne.w	80e48 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
   81238:	4b2d      	ldr	r3, [pc, #180]	; (812f0 <udc_process_setup+0x4c4>)
   8123a:	785b      	ldrb	r3, [r3, #1]
   8123c:	2b01      	cmp	r3, #1
   8123e:	d02e      	beq.n	8129e <udc_process_setup+0x472>
   81240:	2b03      	cmp	r3, #3
   81242:	d03c      	beq.n	812be <udc_process_setup+0x492>
	return false;
   81244:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   81246:	2b00      	cmp	r3, #0
   81248:	f47f ae0d 	bne.w	80e66 <udc_process_setup+0x3a>
   8124c:	e5fc      	b.n	80e48 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
   8124e:	4a28      	ldr	r2, [pc, #160]	; (812f0 <udc_process_setup+0x4c4>)
   81250:	7852      	ldrb	r2, [r2, #1]
   81252:	2a0b      	cmp	r2, #11
   81254:	d1ed      	bne.n	81232 <udc_process_setup+0x406>
	if (udd_g_ctrlreq.req.wLength) {
   81256:	4b26      	ldr	r3, [pc, #152]	; (812f0 <udc_process_setup+0x4c4>)
   81258:	88db      	ldrh	r3, [r3, #6]
   8125a:	b913      	cbnz	r3, 81262 <udc_process_setup+0x436>
	if (!udc_num_configuration) {
   8125c:	4b2f      	ldr	r3, [pc, #188]	; (8131c <udc_process_setup+0x4f0>)
   8125e:	781b      	ldrb	r3, [r3, #0]
   81260:	b973      	cbnz	r3, 81280 <udc_process_setup+0x454>
	if (0 == udc_num_configuration) {
   81262:	4b2e      	ldr	r3, [pc, #184]	; (8131c <udc_process_setup+0x4f0>)
   81264:	781b      	ldrb	r3, [r3, #0]
   81266:	2b00      	cmp	r3, #0
   81268:	f000 80ab 	beq.w	813c2 <udc_process_setup+0x596>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8126c:	4b20      	ldr	r3, [pc, #128]	; (812f0 <udc_process_setup+0x4c4>)
   8126e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81270:	4b2b      	ldr	r3, [pc, #172]	; (81320 <udc_process_setup+0x4f4>)
   81272:	681d      	ldr	r5, [r3, #0]
   81274:	682b      	ldr	r3, [r5, #0]
   81276:	791b      	ldrb	r3, [r3, #4]
   81278:	42a3      	cmp	r3, r4
   8127a:	d85d      	bhi.n	81338 <udc_process_setup+0x50c>
	return false;
   8127c:	2300      	movs	r3, #0
   8127e:	e5f2      	b.n	80e66 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81280:	4b1b      	ldr	r3, [pc, #108]	; (812f0 <udc_process_setup+0x4c4>)
   81282:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   81284:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   81286:	4620      	mov	r0, r4
   81288:	4b27      	ldr	r3, [pc, #156]	; (81328 <udc_process_setup+0x4fc>)
   8128a:	4798      	blx	r3
   8128c:	2800      	cmp	r0, #0
   8128e:	f43f addb 	beq.w	80e48 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
   81292:	b2e9      	uxtb	r1, r5
   81294:	4620      	mov	r0, r4
   81296:	4b23      	ldr	r3, [pc, #140]	; (81324 <udc_process_setup+0x4f8>)
   81298:	4798      	blx	r3
   8129a:	4603      	mov	r3, r0
   8129c:	e7d3      	b.n	81246 <udc_process_setup+0x41a>
	if (udd_g_ctrlreq.req.wLength) {
   8129e:	4b14      	ldr	r3, [pc, #80]	; (812f0 <udc_process_setup+0x4c4>)
   812a0:	88db      	ldrh	r3, [r3, #6]
   812a2:	2b00      	cmp	r3, #0
   812a4:	f47f add7 	bne.w	80e56 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   812a8:	4b11      	ldr	r3, [pc, #68]	; (812f0 <udc_process_setup+0x4c4>)
   812aa:	885b      	ldrh	r3, [r3, #2]
   812ac:	2b00      	cmp	r3, #0
   812ae:	f47f add2 	bne.w	80e56 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   812b2:	4b0f      	ldr	r3, [pc, #60]	; (812f0 <udc_process_setup+0x4c4>)
   812b4:	7918      	ldrb	r0, [r3, #4]
   812b6:	4b1d      	ldr	r3, [pc, #116]	; (8132c <udc_process_setup+0x500>)
   812b8:	4798      	blx	r3
   812ba:	4603      	mov	r3, r0
   812bc:	e7c3      	b.n	81246 <udc_process_setup+0x41a>
	if (udd_g_ctrlreq.req.wLength) {
   812be:	4b0c      	ldr	r3, [pc, #48]	; (812f0 <udc_process_setup+0x4c4>)
   812c0:	88db      	ldrh	r3, [r3, #6]
   812c2:	2b00      	cmp	r3, #0
   812c4:	f47f adc7 	bne.w	80e56 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   812c8:	4b09      	ldr	r3, [pc, #36]	; (812f0 <udc_process_setup+0x4c4>)
   812ca:	885b      	ldrh	r3, [r3, #2]
   812cc:	2b00      	cmp	r3, #0
   812ce:	f47f adc2 	bne.w	80e56 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   812d2:	4c07      	ldr	r4, [pc, #28]	; (812f0 <udc_process_setup+0x4c4>)
   812d4:	7920      	ldrb	r0, [r4, #4]
   812d6:	4b16      	ldr	r3, [pc, #88]	; (81330 <udc_process_setup+0x504>)
   812d8:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   812da:	7920      	ldrb	r0, [r4, #4]
   812dc:	4b15      	ldr	r3, [pc, #84]	; (81334 <udc_process_setup+0x508>)
   812de:	4798      	blx	r3
   812e0:	4603      	mov	r3, r0
   812e2:	e7b0      	b.n	81246 <udc_process_setup+0x41a>
		return false;
   812e4:	2300      	movs	r3, #0
   812e6:	e7ae      	b.n	81246 <udc_process_setup+0x41a>
		return false;
   812e8:	2300      	movs	r3, #0
   812ea:	e7ac      	b.n	81246 <udc_process_setup+0x41a>
	return false;
   812ec:	2300      	movs	r3, #0
   812ee:	e7aa      	b.n	81246 <udc_process_setup+0x41a>
   812f0:	20071920 	.word	0x20071920
   812f4:	00080c45 	.word	0x00080c45
   812f8:	200717d0 	.word	0x200717d0
   812fc:	0008297d 	.word	0x0008297d
   81300:	00080da5 	.word	0x00080da5
   81304:	00082fb1 	.word	0x00082fb1
   81308:	00082fcd 	.word	0x00082fcd
   8130c:	00082fe9 	.word	0x00082fe9
   81310:	00082ffd 	.word	0x00082ffd
   81314:	000829b9 	.word	0x000829b9
   81318:	20070154 	.word	0x20070154
   8131c:	200717d8 	.word	0x200717d8
   81320:	200717dc 	.word	0x200717dc
   81324:	00080d3d 	.word	0x00080d3d
   81328:	00080cd1 	.word	0x00080cd1
   8132c:	00082b65 	.word	0x00082b65
   81330:	00082f31 	.word	0x00082f31
   81334:	00082a65 	.word	0x00082a65
	if (!udc_update_iface_desc(iface_num, 0)) {
   81338:	2100      	movs	r1, #0
   8133a:	4620      	mov	r0, r4
   8133c:	4b22      	ldr	r3, [pc, #136]	; (813c8 <udc_process_setup+0x59c>)
   8133e:	4798      	blx	r3
   81340:	2800      	cmp	r0, #0
   81342:	f43f ad88 	beq.w	80e56 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81346:	686b      	ldr	r3, [r5, #4]
   81348:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8134c:	68eb      	ldr	r3, [r5, #12]
   8134e:	4798      	blx	r3
   81350:	4601      	mov	r1, r0
   81352:	4620      	mov	r0, r4
   81354:	4b1c      	ldr	r3, [pc, #112]	; (813c8 <udc_process_setup+0x59c>)
   81356:	4798      	blx	r3
   81358:	2800      	cmp	r0, #0
   8135a:	f43f ad7c 	beq.w	80e56 <udc_process_setup+0x2a>
	return udi_api->setup();
   8135e:	68ab      	ldr	r3, [r5, #8]
   81360:	4798      	blx	r3
		if (udc_req_iface()) {
   81362:	4603      	mov	r3, r0
   81364:	2800      	cmp	r0, #0
   81366:	f47f ad7e 	bne.w	80e66 <udc_process_setup+0x3a>
   8136a:	e574      	b.n	80e56 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
   8136c:	4b17      	ldr	r3, [pc, #92]	; (813cc <udc_process_setup+0x5a0>)
   8136e:	781b      	ldrb	r3, [r3, #0]
   81370:	b30b      	cbz	r3, 813b6 <udc_process_setup+0x58a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81372:	4b17      	ldr	r3, [pc, #92]	; (813d0 <udc_process_setup+0x5a4>)
   81374:	681a      	ldr	r2, [r3, #0]
   81376:	6813      	ldr	r3, [r2, #0]
   81378:	791b      	ldrb	r3, [r3, #4]
   8137a:	b1f3      	cbz	r3, 813ba <udc_process_setup+0x58e>
   8137c:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8137e:	4e12      	ldr	r6, [pc, #72]	; (813c8 <udc_process_setup+0x59c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81380:	4f13      	ldr	r7, [pc, #76]	; (813d0 <udc_process_setup+0x5a4>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   81382:	6853      	ldr	r3, [r2, #4]
   81384:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81388:	68eb      	ldr	r3, [r5, #12]
   8138a:	4798      	blx	r3
   8138c:	4601      	mov	r1, r0
   8138e:	4620      	mov	r0, r4
   81390:	47b0      	blx	r6
   81392:	4603      	mov	r3, r0
   81394:	2800      	cmp	r0, #0
   81396:	f43f ad66 	beq.w	80e66 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
   8139a:	68ab      	ldr	r3, [r5, #8]
   8139c:	4798      	blx	r3
   8139e:	4603      	mov	r3, r0
   813a0:	2800      	cmp	r0, #0
   813a2:	f47f ad60 	bne.w	80e66 <udc_process_setup+0x3a>
			iface_num++) {
   813a6:	3401      	adds	r4, #1
   813a8:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   813aa:	683a      	ldr	r2, [r7, #0]
   813ac:	6811      	ldr	r1, [r2, #0]
   813ae:	7909      	ldrb	r1, [r1, #4]
   813b0:	42a1      	cmp	r1, r4
   813b2:	d8e6      	bhi.n	81382 <udc_process_setup+0x556>
   813b4:	e557      	b.n	80e66 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
   813b6:	2300      	movs	r3, #0
   813b8:	e555      	b.n	80e66 <udc_process_setup+0x3a>
	return false;
   813ba:	2300      	movs	r3, #0
   813bc:	e553      	b.n	80e66 <udc_process_setup+0x3a>
			return false; // Error from USB host
   813be:	2300      	movs	r3, #0
   813c0:	e551      	b.n	80e66 <udc_process_setup+0x3a>
	return false;
   813c2:	2300      	movs	r3, #0
   813c4:	e54f      	b.n	80e66 <udc_process_setup+0x3a>
   813c6:	bf00      	nop
   813c8:	00080c5d 	.word	0x00080c5d
   813cc:	200717d8 	.word	0x200717d8
   813d0:	200717dc 	.word	0x200717dc

000813d4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   813d4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   813d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   813da:	4b1e      	ldr	r3, [pc, #120]	; (81454 <board_init+0x80>)
   813dc:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   813de:	200b      	movs	r0, #11
   813e0:	4c1d      	ldr	r4, [pc, #116]	; (81458 <board_init+0x84>)
   813e2:	47a0      	blx	r4
   813e4:	200c      	movs	r0, #12
   813e6:	47a0      	blx	r4
   813e8:	200d      	movs	r0, #13
   813ea:	47a0      	blx	r4
   813ec:	200e      	movs	r0, #14
   813ee:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   813f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   813f4:	203b      	movs	r0, #59	; 0x3b
   813f6:	4c19      	ldr	r4, [pc, #100]	; (8145c <board_init+0x88>)
   813f8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   813fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   813fe:	2055      	movs	r0, #85	; 0x55
   81400:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81402:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81406:	2056      	movs	r0, #86	; 0x56
   81408:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8140a:	4915      	ldr	r1, [pc, #84]	; (81460 <board_init+0x8c>)
   8140c:	2068      	movs	r0, #104	; 0x68
   8140e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81410:	4914      	ldr	r1, [pc, #80]	; (81464 <board_init+0x90>)
   81412:	205c      	movs	r0, #92	; 0x5c
   81414:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81416:	4a14      	ldr	r2, [pc, #80]	; (81468 <board_init+0x94>)
   81418:	f44f 7140 	mov.w	r1, #768	; 0x300
   8141c:	4813      	ldr	r0, [pc, #76]	; (8146c <board_init+0x98>)
   8141e:	4b14      	ldr	r3, [pc, #80]	; (81470 <board_init+0x9c>)
   81420:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART0_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   81422:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81426:	200a      	movs	r0, #10
   81428:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART0_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   8142a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8142e:	200b      	movs	r0, #11
   81430:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART1_RXD
/* Configure USART RXD pin */
gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81432:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81436:	200c      	movs	r0, #12
   81438:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART1_TXD
/* Configure USART TXD pin */
gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
   8143a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8143e:	200d      	movs	r0, #13
   81440:	47a0      	blx	r4
gpio_configure_pin(PIN_USART3_TXD_IDX, PIN_USART3_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81442:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81446:	202b      	movs	r0, #43	; 0x2b
   81448:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8144a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8144e:	202a      	movs	r0, #42	; 0x2a
   81450:	47a0      	blx	r4
   81452:	bd10      	pop	{r4, pc}
   81454:	400e1a50 	.word	0x400e1a50
   81458:	000818dd 	.word	0x000818dd
   8145c:	000815c1 	.word	0x000815c1
   81460:	28000079 	.word	0x28000079
   81464:	28000001 	.word	0x28000001
   81468:	08000001 	.word	0x08000001
   8146c:	400e0e00 	.word	0x400e0e00
   81470:	00081691 	.word	0x00081691

00081474 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   81474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81478:	4606      	mov	r6, r0
   8147a:	4c0a      	ldr	r4, [pc, #40]	; (814a4 <LED_Off+0x30>)
   8147c:	f104 0520 	add.w	r5, r4, #32
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   81480:	4f09      	ldr	r7, [pc, #36]	; (814a8 <LED_Off+0x34>)
				gpio_set_pin_low(led_gpio);
   81482:	f8df 8028 	ldr.w	r8, [pc, #40]	; 814ac <LED_Off+0x38>
   81486:	e003      	b.n	81490 <LED_Off+0x1c>
   81488:	47c0      	blx	r8
   8148a:	3408      	adds	r4, #8
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8148c:	42ac      	cmp	r4, r5
   8148e:	d007      	beq.n	814a0 <LED_Off+0x2c>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   81490:	6820      	ldr	r0, [r4, #0]
   81492:	42b0      	cmp	r0, r6
   81494:	d1f9      	bne.n	8148a <LED_Off+0x16>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   81496:	6863      	ldr	r3, [r4, #4]
   81498:	2b01      	cmp	r3, #1
   8149a:	d0f5      	beq.n	81488 <LED_Off+0x14>
				gpio_set_pin_high(led_gpio);
   8149c:	47b8      	blx	r7
   8149e:	e7f4      	b.n	8148a <LED_Off+0x16>
			}
		}
	}
}
   814a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   814a4:	000838e4 	.word	0x000838e4
   814a8:	0008158b 	.word	0x0008158b
   814ac:	000815a5 	.word	0x000815a5

000814b0 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   814b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   814b4:	4606      	mov	r6, r0
   814b6:	4c0a      	ldr	r4, [pc, #40]	; (814e0 <LED_On+0x30>)
   814b8:	f104 0520 	add.w	r5, r4, #32
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   814bc:	4f09      	ldr	r7, [pc, #36]	; (814e4 <LED_On+0x34>)
				gpio_set_pin_high(led_gpio);
   814be:	f8df 8028 	ldr.w	r8, [pc, #40]	; 814e8 <LED_On+0x38>
   814c2:	e003      	b.n	814cc <LED_On+0x1c>
   814c4:	47c0      	blx	r8
   814c6:	3408      	adds	r4, #8
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   814c8:	42ac      	cmp	r4, r5
   814ca:	d007      	beq.n	814dc <LED_On+0x2c>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   814cc:	6820      	ldr	r0, [r4, #0]
   814ce:	42b0      	cmp	r0, r6
   814d0:	d1f9      	bne.n	814c6 <LED_On+0x16>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   814d2:	6863      	ldr	r3, [r4, #4]
   814d4:	2b01      	cmp	r3, #1
   814d6:	d0f5      	beq.n	814c4 <LED_On+0x14>
				gpio_set_pin_low(led_gpio);
   814d8:	47b8      	blx	r7
   814da:	e7f4      	b.n	814c6 <LED_On+0x16>
			}
		}
	}
}
   814dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   814e0:	000838e4 	.word	0x000838e4
   814e4:	000815a5 	.word	0x000815a5
   814e8:	0008158b 	.word	0x0008158b

000814ec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   814ec:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   814ee:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   814f2:	d016      	beq.n	81522 <pio_set_peripheral+0x36>
   814f4:	d80b      	bhi.n	8150e <pio_set_peripheral+0x22>
   814f6:	b149      	cbz	r1, 8150c <pio_set_peripheral+0x20>
   814f8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   814fc:	d105      	bne.n	8150a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   814fe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81500:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81502:	400b      	ands	r3, r1
   81504:	ea23 0302 	bic.w	r3, r3, r2
   81508:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8150a:	6042      	str	r2, [r0, #4]
   8150c:	4770      	bx	lr
	switch (ul_type) {
   8150e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81512:	d0fb      	beq.n	8150c <pio_set_peripheral+0x20>
   81514:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81518:	d0f8      	beq.n	8150c <pio_set_peripheral+0x20>
   8151a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8151e:	d1f4      	bne.n	8150a <pio_set_peripheral+0x1e>
   81520:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81522:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81524:	4313      	orrs	r3, r2
   81526:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81528:	e7ef      	b.n	8150a <pio_set_peripheral+0x1e>

0008152a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8152a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8152c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81530:	bf14      	ite	ne
   81532:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81534:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81536:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8153a:	bf14      	ite	ne
   8153c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8153e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81540:	f012 0f02 	tst.w	r2, #2
   81544:	d107      	bne.n	81556 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81546:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8154a:	bf18      	it	ne
   8154c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81550:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81552:	6001      	str	r1, [r0, #0]
   81554:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81556:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8155a:	e7f9      	b.n	81550 <pio_set_input+0x26>

0008155c <pio_set_output>:
{
   8155c:	b410      	push	{r4}
   8155e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81560:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81562:	b944      	cbnz	r4, 81576 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81564:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81566:	b143      	cbz	r3, 8157a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81568:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8156a:	b942      	cbnz	r2, 8157e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8156c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8156e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81570:	6001      	str	r1, [r0, #0]
}
   81572:	bc10      	pop	{r4}
   81574:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81576:	6641      	str	r1, [r0, #100]	; 0x64
   81578:	e7f5      	b.n	81566 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8157a:	6541      	str	r1, [r0, #84]	; 0x54
   8157c:	e7f5      	b.n	8156a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8157e:	6301      	str	r1, [r0, #48]	; 0x30
   81580:	e7f5      	b.n	8156e <pio_set_output+0x12>

00081582 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81582:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81584:	4770      	bx	lr

00081586 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81586:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81588:	4770      	bx	lr

0008158a <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8158a:	0943      	lsrs	r3, r0, #5
   8158c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81590:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81594:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81596:	f000 001f 	and.w	r0, r0, #31
   8159a:	2201      	movs	r2, #1
   8159c:	fa02 f000 	lsl.w	r0, r2, r0
   815a0:	6318      	str	r0, [r3, #48]	; 0x30
   815a2:	4770      	bx	lr

000815a4 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   815a4:	0943      	lsrs	r3, r0, #5
   815a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   815aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
   815ae:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   815b0:	f000 001f 	and.w	r0, r0, #31
   815b4:	2201      	movs	r2, #1
   815b6:	fa02 f000 	lsl.w	r0, r2, r0
   815ba:	6358      	str	r0, [r3, #52]	; 0x34
   815bc:	4770      	bx	lr
	...

000815c0 <pio_configure_pin>:
{
   815c0:	b570      	push	{r4, r5, r6, lr}
   815c2:	b082      	sub	sp, #8
   815c4:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   815c6:	0943      	lsrs	r3, r0, #5
   815c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   815cc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   815d0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   815d2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   815d6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   815da:	d031      	beq.n	81640 <pio_configure_pin+0x80>
   815dc:	d816      	bhi.n	8160c <pio_configure_pin+0x4c>
   815de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   815e2:	d01b      	beq.n	8161c <pio_configure_pin+0x5c>
   815e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   815e8:	d116      	bne.n	81618 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   815ea:	f000 001f 	and.w	r0, r0, #31
   815ee:	2601      	movs	r6, #1
   815f0:	4086      	lsls	r6, r0
   815f2:	4632      	mov	r2, r6
   815f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   815f8:	4620      	mov	r0, r4
   815fa:	4b22      	ldr	r3, [pc, #136]	; (81684 <pio_configure_pin+0xc4>)
   815fc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   815fe:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81602:	bf14      	ite	ne
   81604:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81606:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81608:	2001      	movs	r0, #1
   8160a:	e017      	b.n	8163c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8160c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81610:	d021      	beq.n	81656 <pio_configure_pin+0x96>
   81612:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81616:	d01e      	beq.n	81656 <pio_configure_pin+0x96>
		return 0;
   81618:	2000      	movs	r0, #0
   8161a:	e00f      	b.n	8163c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8161c:	f000 001f 	and.w	r0, r0, #31
   81620:	2601      	movs	r6, #1
   81622:	4086      	lsls	r6, r0
   81624:	4632      	mov	r2, r6
   81626:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8162a:	4620      	mov	r0, r4
   8162c:	4b15      	ldr	r3, [pc, #84]	; (81684 <pio_configure_pin+0xc4>)
   8162e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81630:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81634:	bf14      	ite	ne
   81636:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81638:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8163a:	2001      	movs	r0, #1
}
   8163c:	b002      	add	sp, #8
   8163e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81640:	f000 011f 	and.w	r1, r0, #31
   81644:	2601      	movs	r6, #1
   81646:	462a      	mov	r2, r5
   81648:	fa06 f101 	lsl.w	r1, r6, r1
   8164c:	4620      	mov	r0, r4
   8164e:	4b0e      	ldr	r3, [pc, #56]	; (81688 <pio_configure_pin+0xc8>)
   81650:	4798      	blx	r3
	return 1;
   81652:	4630      	mov	r0, r6
		break;
   81654:	e7f2      	b.n	8163c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81656:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8165a:	f000 011f 	and.w	r1, r0, #31
   8165e:	2601      	movs	r6, #1
   81660:	ea05 0306 	and.w	r3, r5, r6
   81664:	9300      	str	r3, [sp, #0]
   81666:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8166a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8166e:	bf14      	ite	ne
   81670:	2200      	movne	r2, #0
   81672:	2201      	moveq	r2, #1
   81674:	fa06 f101 	lsl.w	r1, r6, r1
   81678:	4620      	mov	r0, r4
   8167a:	4c04      	ldr	r4, [pc, #16]	; (8168c <pio_configure_pin+0xcc>)
   8167c:	47a0      	blx	r4
	return 1;
   8167e:	4630      	mov	r0, r6
		break;
   81680:	e7dc      	b.n	8163c <pio_configure_pin+0x7c>
   81682:	bf00      	nop
   81684:	000814ed 	.word	0x000814ed
   81688:	0008152b 	.word	0x0008152b
   8168c:	0008155d 	.word	0x0008155d

00081690 <pio_configure_pin_group>:
{
   81690:	b570      	push	{r4, r5, r6, lr}
   81692:	b082      	sub	sp, #8
   81694:	4605      	mov	r5, r0
   81696:	460e      	mov	r6, r1
   81698:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8169a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8169e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   816a2:	d027      	beq.n	816f4 <pio_configure_pin_group+0x64>
   816a4:	d811      	bhi.n	816ca <pio_configure_pin_group+0x3a>
   816a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   816aa:	d016      	beq.n	816da <pio_configure_pin_group+0x4a>
   816ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   816b0:	d111      	bne.n	816d6 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   816b2:	460a      	mov	r2, r1
   816b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   816b8:	4b19      	ldr	r3, [pc, #100]	; (81720 <pio_configure_pin_group+0x90>)
   816ba:	4798      	blx	r3
	if (ul_pull_up_enable) {
   816bc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   816c0:	bf14      	ite	ne
   816c2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   816c4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   816c6:	2001      	movs	r0, #1
   816c8:	e012      	b.n	816f0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   816ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   816ce:	d015      	beq.n	816fc <pio_configure_pin_group+0x6c>
   816d0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   816d4:	d012      	beq.n	816fc <pio_configure_pin_group+0x6c>
		return 0;
   816d6:	2000      	movs	r0, #0
   816d8:	e00a      	b.n	816f0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   816da:	460a      	mov	r2, r1
   816dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816e0:	4b0f      	ldr	r3, [pc, #60]	; (81720 <pio_configure_pin_group+0x90>)
   816e2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   816e4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   816e8:	bf14      	ite	ne
   816ea:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   816ec:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   816ee:	2001      	movs	r0, #1
}
   816f0:	b002      	add	sp, #8
   816f2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   816f4:	4b0b      	ldr	r3, [pc, #44]	; (81724 <pio_configure_pin_group+0x94>)
   816f6:	4798      	blx	r3
	return 1;
   816f8:	2001      	movs	r0, #1
		break;
   816fa:	e7f9      	b.n	816f0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   816fc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81700:	f004 0301 	and.w	r3, r4, #1
   81704:	9300      	str	r3, [sp, #0]
   81706:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8170a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8170e:	bf14      	ite	ne
   81710:	2200      	movne	r2, #0
   81712:	2201      	moveq	r2, #1
   81714:	4631      	mov	r1, r6
   81716:	4628      	mov	r0, r5
   81718:	4c03      	ldr	r4, [pc, #12]	; (81728 <pio_configure_pin_group+0x98>)
   8171a:	47a0      	blx	r4
	return 1;
   8171c:	2001      	movs	r0, #1
		break;
   8171e:	e7e7      	b.n	816f0 <pio_configure_pin_group+0x60>
   81720:	000814ed 	.word	0x000814ed
   81724:	0008152b 	.word	0x0008152b
   81728:	0008155d 	.word	0x0008155d

0008172c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81730:	4604      	mov	r4, r0
   81732:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81734:	4b0e      	ldr	r3, [pc, #56]	; (81770 <pio_handler_process+0x44>)
   81736:	4798      	blx	r3
   81738:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8173a:	4620      	mov	r0, r4
   8173c:	4b0d      	ldr	r3, [pc, #52]	; (81774 <pio_handler_process+0x48>)
   8173e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81740:	4005      	ands	r5, r0
   81742:	d013      	beq.n	8176c <pio_handler_process+0x40>
   81744:	4c0c      	ldr	r4, [pc, #48]	; (81778 <pio_handler_process+0x4c>)
   81746:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8174a:	e003      	b.n	81754 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8174c:	42b4      	cmp	r4, r6
   8174e:	d00d      	beq.n	8176c <pio_handler_process+0x40>
   81750:	3410      	adds	r4, #16
		while (status != 0) {
   81752:	b15d      	cbz	r5, 8176c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81754:	6820      	ldr	r0, [r4, #0]
   81756:	4540      	cmp	r0, r8
   81758:	d1f8      	bne.n	8174c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8175a:	6861      	ldr	r1, [r4, #4]
   8175c:	4229      	tst	r1, r5
   8175e:	d0f5      	beq.n	8174c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81760:	68e3      	ldr	r3, [r4, #12]
   81762:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81764:	6863      	ldr	r3, [r4, #4]
   81766:	ea25 0503 	bic.w	r5, r5, r3
   8176a:	e7ef      	b.n	8174c <pio_handler_process+0x20>
   8176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81770:	00081583 	.word	0x00081583
   81774:	00081587 	.word	0x00081587
   81778:	200717e4 	.word	0x200717e4

0008177c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8177c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8177e:	210b      	movs	r1, #11
   81780:	4801      	ldr	r0, [pc, #4]	; (81788 <PIOA_Handler+0xc>)
   81782:	4b02      	ldr	r3, [pc, #8]	; (8178c <PIOA_Handler+0x10>)
   81784:	4798      	blx	r3
   81786:	bd08      	pop	{r3, pc}
   81788:	400e0e00 	.word	0x400e0e00
   8178c:	0008172d 	.word	0x0008172d

00081790 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81790:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81792:	210c      	movs	r1, #12
   81794:	4801      	ldr	r0, [pc, #4]	; (8179c <PIOB_Handler+0xc>)
   81796:	4b02      	ldr	r3, [pc, #8]	; (817a0 <PIOB_Handler+0x10>)
   81798:	4798      	blx	r3
   8179a:	bd08      	pop	{r3, pc}
   8179c:	400e1000 	.word	0x400e1000
   817a0:	0008172d 	.word	0x0008172d

000817a4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   817a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   817a6:	210d      	movs	r1, #13
   817a8:	4801      	ldr	r0, [pc, #4]	; (817b0 <PIOC_Handler+0xc>)
   817aa:	4b02      	ldr	r3, [pc, #8]	; (817b4 <PIOC_Handler+0x10>)
   817ac:	4798      	blx	r3
   817ae:	bd08      	pop	{r3, pc}
   817b0:	400e1200 	.word	0x400e1200
   817b4:	0008172d 	.word	0x0008172d

000817b8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   817b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   817ba:	210e      	movs	r1, #14
   817bc:	4801      	ldr	r0, [pc, #4]	; (817c4 <PIOD_Handler+0xc>)
   817be:	4b02      	ldr	r3, [pc, #8]	; (817c8 <PIOD_Handler+0x10>)
   817c0:	4798      	blx	r3
   817c2:	bd08      	pop	{r3, pc}
   817c4:	400e1400 	.word	0x400e1400
   817c8:	0008172d 	.word	0x0008172d

000817cc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   817cc:	4a17      	ldr	r2, [pc, #92]	; (8182c <pmc_switch_mck_to_pllack+0x60>)
   817ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
   817d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   817d4:	4318      	orrs	r0, r3
   817d6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   817d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   817da:	f013 0f08 	tst.w	r3, #8
   817de:	d10a      	bne.n	817f6 <pmc_switch_mck_to_pllack+0x2a>
   817e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   817e4:	4911      	ldr	r1, [pc, #68]	; (8182c <pmc_switch_mck_to_pllack+0x60>)
   817e6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   817e8:	f012 0f08 	tst.w	r2, #8
   817ec:	d103      	bne.n	817f6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   817ee:	3b01      	subs	r3, #1
   817f0:	d1f9      	bne.n	817e6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   817f2:	2001      	movs	r0, #1
   817f4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   817f6:	4a0d      	ldr	r2, [pc, #52]	; (8182c <pmc_switch_mck_to_pllack+0x60>)
   817f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   817fa:	f023 0303 	bic.w	r3, r3, #3
   817fe:	f043 0302 	orr.w	r3, r3, #2
   81802:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81804:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81806:	f013 0f08 	tst.w	r3, #8
   8180a:	d10a      	bne.n	81822 <pmc_switch_mck_to_pllack+0x56>
   8180c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81810:	4906      	ldr	r1, [pc, #24]	; (8182c <pmc_switch_mck_to_pllack+0x60>)
   81812:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81814:	f012 0f08 	tst.w	r2, #8
   81818:	d105      	bne.n	81826 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8181a:	3b01      	subs	r3, #1
   8181c:	d1f9      	bne.n	81812 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8181e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81820:	4770      	bx	lr
	return 0;
   81822:	2000      	movs	r0, #0
   81824:	4770      	bx	lr
   81826:	2000      	movs	r0, #0
   81828:	4770      	bx	lr
   8182a:	bf00      	nop
   8182c:	400e0600 	.word	0x400e0600

00081830 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81830:	b9c8      	cbnz	r0, 81866 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81832:	4a11      	ldr	r2, [pc, #68]	; (81878 <pmc_switch_mainck_to_xtal+0x48>)
   81834:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81836:	0209      	lsls	r1, r1, #8
   81838:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8183a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8183e:	f023 0303 	bic.w	r3, r3, #3
   81842:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81846:	f043 0301 	orr.w	r3, r3, #1
   8184a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8184c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8184e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81850:	f013 0f01 	tst.w	r3, #1
   81854:	d0fb      	beq.n	8184e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81856:	4a08      	ldr	r2, [pc, #32]	; (81878 <pmc_switch_mainck_to_xtal+0x48>)
   81858:	6a13      	ldr	r3, [r2, #32]
   8185a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8185e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81862:	6213      	str	r3, [r2, #32]
   81864:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81866:	4904      	ldr	r1, [pc, #16]	; (81878 <pmc_switch_mainck_to_xtal+0x48>)
   81868:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8186a:	4a04      	ldr	r2, [pc, #16]	; (8187c <pmc_switch_mainck_to_xtal+0x4c>)
   8186c:	401a      	ands	r2, r3
   8186e:	4b04      	ldr	r3, [pc, #16]	; (81880 <pmc_switch_mainck_to_xtal+0x50>)
   81870:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81872:	620b      	str	r3, [r1, #32]
   81874:	4770      	bx	lr
   81876:	bf00      	nop
   81878:	400e0600 	.word	0x400e0600
   8187c:	fec8fffc 	.word	0xfec8fffc
   81880:	01370002 	.word	0x01370002

00081884 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81884:	4b02      	ldr	r3, [pc, #8]	; (81890 <pmc_osc_is_ready_mainck+0xc>)
   81886:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81888:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8188c:	4770      	bx	lr
   8188e:	bf00      	nop
   81890:	400e0600 	.word	0x400e0600

00081894 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81894:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81898:	4b01      	ldr	r3, [pc, #4]	; (818a0 <pmc_disable_pllack+0xc>)
   8189a:	629a      	str	r2, [r3, #40]	; 0x28
   8189c:	4770      	bx	lr
   8189e:	bf00      	nop
   818a0:	400e0600 	.word	0x400e0600

000818a4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   818a4:	4b02      	ldr	r3, [pc, #8]	; (818b0 <pmc_is_locked_pllack+0xc>)
   818a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   818a8:	f000 0002 	and.w	r0, r0, #2
   818ac:	4770      	bx	lr
   818ae:	bf00      	nop
   818b0:	400e0600 	.word	0x400e0600

000818b4 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   818b4:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   818b8:	4b03      	ldr	r3, [pc, #12]	; (818c8 <pmc_enable_upll_clock+0x14>)
   818ba:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   818bc:	461a      	mov	r2, r3
   818be:	6e93      	ldr	r3, [r2, #104]	; 0x68
   818c0:	f013 0f40 	tst.w	r3, #64	; 0x40
   818c4:	d0fb      	beq.n	818be <pmc_enable_upll_clock+0xa>
}
   818c6:	4770      	bx	lr
   818c8:	400e0600 	.word	0x400e0600

000818cc <pmc_disable_upll_clock>:
/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   818cc:	4a02      	ldr	r2, [pc, #8]	; (818d8 <pmc_disable_upll_clock+0xc>)
   818ce:	69d3      	ldr	r3, [r2, #28]
   818d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   818d4:	61d3      	str	r3, [r2, #28]
   818d6:	4770      	bx	lr
   818d8:	400e0600 	.word	0x400e0600

000818dc <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   818dc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   818e0:	4b05      	ldr	r3, [pc, #20]	; (818f8 <pmc_enable_periph_clk+0x1c>)
   818e2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   818e6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   818ea:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   818ee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   818f2:	2000      	movs	r0, #0
   818f4:	4770      	bx	lr
   818f6:	bf00      	nop
   818f8:	400e0600 	.word	0x400e0600

000818fc <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   818fc:	0200      	lsls	r0, r0, #8
   818fe:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
   81902:	f040 0001 	orr.w	r0, r0, #1
   81906:	4b01      	ldr	r3, [pc, #4]	; (8190c <pmc_switch_udpck_to_upllck+0x10>)
   81908:	6398      	str	r0, [r3, #56]	; 0x38
   8190a:	4770      	bx	lr
   8190c:	400e0600 	.word	0x400e0600

00081910 <pmc_enable_udpck>:
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   81910:	2220      	movs	r2, #32
   81912:	4b01      	ldr	r3, [pc, #4]	; (81918 <pmc_enable_udpck+0x8>)
   81914:	601a      	str	r2, [r3, #0]
   81916:	4770      	bx	lr
   81918:	400e0600 	.word	0x400e0600

0008191c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   8191c:	4b03      	ldr	r3, [pc, #12]	; (8192c <pmc_set_fast_startup_input+0x10>)
   8191e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   81920:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   81924:	4310      	orrs	r0, r2
   81926:	6718      	str	r0, [r3, #112]	; 0x70
   81928:	4770      	bx	lr
   8192a:	bf00      	nop
   8192c:	400e0600 	.word	0x400e0600

00081930 <pmc_enable_waitmode>:
 */
void pmc_enable_waitmode(void)
{
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   81930:	4a0b      	ldr	r2, [pc, #44]	; (81960 <pmc_enable_waitmode+0x30>)
   81932:	6f13      	ldr	r3, [r2, #112]	; 0x70
   81934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81938:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   8193a:	4a0a      	ldr	r2, [pc, #40]	; (81964 <pmc_enable_waitmode+0x34>)
   8193c:	6913      	ldr	r3, [r2, #16]
   8193e:	f023 0304 	bic.w	r3, r3, #4
   81942:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
   81944:	f3bf 8f4f 	dsb	sy

	__DSB();
	__WFE();
   81948:	bf20      	wfe
   8194a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
		__NOP();
   8194e:	bf00      	nop
	for (i = 0; i < 500; i++) {
   81950:	3b01      	subs	r3, #1
   81952:	d1fc      	bne.n	8194e <pmc_enable_waitmode+0x1e>
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   81954:	4a02      	ldr	r2, [pc, #8]	; (81960 <pmc_enable_waitmode+0x30>)
   81956:	6a13      	ldr	r3, [r2, #32]
   81958:	f013 0f08 	tst.w	r3, #8
   8195c:	d0fb      	beq.n	81956 <pmc_enable_waitmode+0x26>

}
   8195e:	4770      	bx	lr
   81960:	400e0600 	.word	0x400e0600
   81964:	e000ed00 	.word	0xe000ed00

00081968 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   81968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (sleep_mode) {
   8196c:	1e43      	subs	r3, r0, #1
   8196e:	2b04      	cmp	r3, #4
   81970:	f200 8139 	bhi.w	81be6 <pmc_sleep+0x27e>
   81974:	e8df f013 	tbh	[pc, r3, lsl #1]
   81978:	00050005 	.word	0x00050005
   8197c:	00210021 	.word	0x00210021
   81980:	012b      	.short	0x012b
		cpu_irq_enable();
		__DSB();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   81982:	4a9a      	ldr	r2, [pc, #616]	; (81bec <pmc_sleep+0x284>)
   81984:	6f13      	ldr	r3, [r2, #112]	; 0x70
   81986:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   8198a:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   8198c:	4a98      	ldr	r2, [pc, #608]	; (81bf0 <pmc_sleep+0x288>)
   8198e:	6913      	ldr	r3, [r2, #16]
   81990:	f023 0304 	bic.w	r3, r3, #4
   81994:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   81996:	2201      	movs	r2, #1
   81998:	4b96      	ldr	r3, [pc, #600]	; (81bf4 <pmc_sleep+0x28c>)
   8199a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8199c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   819a0:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI) {
   819a2:	2802      	cmp	r0, #2
   819a4:	d004      	beq.n	819b0 <pmc_sleep+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
   819a6:	f3bf 8f4f 	dsb	sy
			__DSB();
			__WFI();
		} else {
			__DSB();
			__WFE();
   819aa:	bf20      	wfe
   819ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   819b0:	f3bf 8f4f 	dsb	sy
			__WFI();
   819b4:	bf30      	wfi
   819b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("cpsid i" : : : "memory");
   819ba:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   819bc:	f3bf 8f5f 	dmb	sy
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
#endif
		cpu_irq_disable();
   819c0:	2200      	movs	r2, #0
   819c2:	4b8c      	ldr	r3, [pc, #560]	; (81bf4 <pmc_sleep+0x28c>)
   819c4:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   819c6:	2201      	movs	r2, #1
   819c8:	4b8b      	ldr	r3, [pc, #556]	; (81bf8 <pmc_sleep+0x290>)
   819ca:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
   819cc:	4b87      	ldr	r3, [pc, #540]	; (81bec <pmc_sleep+0x284>)
   819ce:	f8d3 8020 	ldr.w	r8, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
   819d2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
   819d4:	4a89      	ldr	r2, [pc, #548]	; (81bfc <pmc_sleep+0x294>)
   819d6:	f8d2 a000 	ldr.w	sl, [r2]
	uint32_t fmr1 = EFC1->EEFC_FMR;
   819da:	f502 7200 	add.w	r2, r2, #512	; 0x200
   819de:	f8d2 9000 	ldr.w	r9, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
   819e2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
		*p_pll1_setting = PMC->CKGR_UCKR;
   819e4:	f8d3 b01c 	ldr.w	fp, [r3, #28]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   819e8:	f448 125c 	orr.w	r2, r8, #3604480	; 0x370000
   819ec:	f042 0208 	orr.w	r2, r2, #8
   819f0:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   819f2:	f005 0603 	and.w	r6, r5, #3
   819f6:	2e01      	cmp	r6, #1
   819f8:	f240 809d 	bls.w	81b36 <pmc_sleep+0x1ce>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   819fc:	f025 0103 	bic.w	r1, r5, #3
   81a00:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
   81a04:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   81a06:	461a      	mov	r2, r3
   81a08:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81a0a:	f013 0f08 	tst.w	r3, #8
   81a0e:	d0fb      	beq.n	81a08 <pmc_sleep+0xa0>
	if (mckr & PMC_MCKR_PRES_Msk) {
   81a10:	f011 0f70 	tst.w	r1, #112	; 0x70
   81a14:	d008      	beq.n	81a28 <pmc_sleep+0xc0>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   81a16:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
   81a1a:	4b74      	ldr	r3, [pc, #464]	; (81bec <pmc_sleep+0x284>)
   81a1c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   81a1e:	461a      	mov	r2, r3
   81a20:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81a22:	f013 0f08 	tst.w	r3, #8
   81a26:	d0fb      	beq.n	81a20 <pmc_sleep+0xb8>
   81a28:	4604      	mov	r4, r0
	pmc_disable_pllack();
   81a2a:	4b75      	ldr	r3, [pc, #468]	; (81c00 <pmc_sleep+0x298>)
   81a2c:	4798      	blx	r3
	pmc_disable_upll_clock();
   81a2e:	4b75      	ldr	r3, [pc, #468]	; (81c04 <pmc_sleep+0x29c>)
   81a30:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81a32:	4a6e      	ldr	r2, [pc, #440]	; (81bec <pmc_sleep+0x284>)
   81a34:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81a36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   81a3a:	d0fb      	beq.n	81a34 <pmc_sleep+0xcc>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   81a3c:	4a6b      	ldr	r2, [pc, #428]	; (81bec <pmc_sleep+0x284>)
   81a3e:	6a13      	ldr	r3, [r2, #32]
   81a40:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   81a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81a48:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81a4c:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   81a4e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81a50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   81a54:	d0fb      	beq.n	81a4e <pmc_sleep+0xe6>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   81a56:	f42a 6370 	bic.w	r3, sl, #3840	; 0xf00
   81a5a:	4a68      	ldr	r2, [pc, #416]	; (81bfc <pmc_sleep+0x294>)
   81a5c:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   81a5e:	f429 6370 	bic.w	r3, r9, #3840	; 0xf00
   81a62:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81a66:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   81a68:	2c04      	cmp	r4, #4
   81a6a:	d066      	beq.n	81b3a <pmc_sleep+0x1d2>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
   81a6c:	4c61      	ldr	r4, [pc, #388]	; (81bf4 <pmc_sleep+0x28c>)
   81a6e:	2301      	movs	r3, #1
   81a70:	7023      	strb	r3, [r4, #0]
   81a72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81a76:	b662      	cpsie	i

		pmc_enable_waitmode();
   81a78:	4b63      	ldr	r3, [pc, #396]	; (81c08 <pmc_sleep+0x2a0>)
   81a7a:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   81a7c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81a7e:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
   81a82:	2300      	movs	r3, #0
   81a84:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   81a86:	f018 0f02 	tst.w	r8, #2
   81a8a:	d061      	beq.n	81b50 <pmc_sleep+0x1e8>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81a8c:	4a57      	ldr	r2, [pc, #348]	; (81bec <pmc_sleep+0x284>)
   81a8e:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81a90:	495e      	ldr	r1, [pc, #376]	; (81c0c <pmc_sleep+0x2a4>)
   81a92:	4019      	ands	r1, r3
   81a94:	4b5e      	ldr	r3, [pc, #376]	; (81c10 <pmc_sleep+0x2a8>)
   81a96:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81a98:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   81a9a:	6a13      	ldr	r3, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
   81a9c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81aa0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   81aa4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   81aa8:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   81aaa:	4b5a      	ldr	r3, [pc, #360]	; (81c14 <pmc_sleep+0x2ac>)
   81aac:	403b      	ands	r3, r7
   81aae:	2b00      	cmp	r3, #0
   81ab0:	d07f      	beq.n	81bb2 <pmc_sleep+0x24a>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   81ab2:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
   81ab6:	4b4d      	ldr	r3, [pc, #308]	; (81bec <pmc_sleep+0x284>)
   81ab8:	629f      	str	r7, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   81aba:	2202      	movs	r2, #2
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   81abc:	f41b 3f80 	tst.w	fp, #65536	; 0x10000
   81ac0:	d004      	beq.n	81acc <pmc_sleep+0x164>
		PMC->CKGR_UCKR = pll1_setting;
   81ac2:	4b4a      	ldr	r3, [pc, #296]	; (81bec <pmc_sleep+0x284>)
   81ac4:	f8c3 b01c 	str.w	fp, [r3, #28]
		pll_sr |= PMC_SR_LOCKU;
   81ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   81acc:	2e02      	cmp	r6, #2
   81ace:	d072      	beq.n	81bb6 <pmc_sleep+0x24e>
   81ad0:	2e03      	cmp	r6, #3
   81ad2:	d076      	beq.n	81bc2 <pmc_sleep+0x25a>
	mckr = PMC->PMC_MCKR;
   81ad4:	4945      	ldr	r1, [pc, #276]	; (81bec <pmc_sleep+0x284>)
   81ad6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   81ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   81adc:	f005 0070 	and.w	r0, r5, #112	; 0x70
   81ae0:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   81ae2:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   81ae4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   81ae6:	f013 0f08 	tst.w	r3, #8
   81aea:	d0fb      	beq.n	81ae4 <pmc_sleep+0x17c>
	EFC0->EEFC_FMR = fmr_setting;
   81aec:	4b43      	ldr	r3, [pc, #268]	; (81bfc <pmc_sleep+0x294>)
   81aee:	f8c3 a000 	str.w	sl, [r3]
	EFC1->EEFC_FMR = fmr_setting1;
   81af2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   81af6:	f8c3 9000 	str.w	r9, [r3]
	PMC->PMC_MCKR = mck_setting;
   81afa:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
   81afe:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   81b00:	4619      	mov	r1, r3
   81b02:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   81b04:	f013 0f08 	tst.w	r3, #8
   81b08:	d0fb      	beq.n	81b02 <pmc_sleep+0x19a>
	while (!(PMC->PMC_SR & pll_sr));
   81b0a:	4938      	ldr	r1, [pc, #224]	; (81bec <pmc_sleep+0x284>)
   81b0c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   81b0e:	4213      	tst	r3, r2
   81b10:	d0fc      	beq.n	81b0c <pmc_sleep+0x1a4>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
   81b12:	2200      	movs	r2, #0
   81b14:	4b38      	ldr	r3, [pc, #224]	; (81bf8 <pmc_sleep+0x290>)
   81b16:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   81b18:	4b3f      	ldr	r3, [pc, #252]	; (81c18 <pmc_sleep+0x2b0>)
   81b1a:	681b      	ldr	r3, [r3, #0]
   81b1c:	b11b      	cbz	r3, 81b26 <pmc_sleep+0x1be>
			callback_clocks_restored();
   81b1e:	4798      	blx	r3
			callback_clocks_restored = NULL;
   81b20:	2200      	movs	r2, #0
   81b22:	4b3d      	ldr	r3, [pc, #244]	; (81c18 <pmc_sleep+0x2b0>)
   81b24:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
   81b26:	2201      	movs	r2, #1
   81b28:	4b32      	ldr	r3, [pc, #200]	; (81bf4 <pmc_sleep+0x28c>)
   81b2a:	701a      	strb	r2, [r3, #0]
   81b2c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81b30:	b662      	cpsie	i
   81b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t mckr = PMC->PMC_MCKR;
   81b36:	4629      	mov	r1, r5
   81b38:	e76a      	b.n	81a10 <pmc_sleep+0xa8>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81b3a:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
   81b3e:	6a13      	ldr	r3, [r2, #32]
   81b40:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81b44:	f023 0301 	bic.w	r3, r3, #1
   81b48:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81b4c:	6213      	str	r3, [r2, #32]
   81b4e:	e78d      	b.n	81a6c <pmc_sleep+0x104>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   81b50:	f018 0f01 	tst.w	r8, #1
   81b54:	d0a9      	beq.n	81aaa <pmc_sleep+0x142>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   81b56:	4b25      	ldr	r3, [pc, #148]	; (81bec <pmc_sleep+0x284>)
   81b58:	6a1b      	ldr	r3, [r3, #32]
   81b5a:	f013 0f01 	tst.w	r3, #1
   81b5e:	d10e      	bne.n	81b7e <pmc_sleep+0x216>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81b60:	4a22      	ldr	r2, [pc, #136]	; (81bec <pmc_sleep+0x284>)
   81b62:	6a13      	ldr	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   81b64:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81b68:	f023 0303 	bic.w	r3, r3, #3
   81b6c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81b70:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81b74:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81b76:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81b78:	f013 0f01 	tst.w	r3, #1
   81b7c:	d0fb      	beq.n	81b76 <pmc_sleep+0x20e>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   81b7e:	4b1b      	ldr	r3, [pc, #108]	; (81bec <pmc_sleep+0x284>)
   81b80:	6a1b      	ldr	r3, [r3, #32]
   81b82:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b86:	d10a      	bne.n	81b9e <pmc_sleep+0x236>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81b88:	4a18      	ldr	r2, [pc, #96]	; (81bec <pmc_sleep+0x284>)
   81b8a:	6a13      	ldr	r3, [r2, #32]
   81b8c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81b94:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   81b96:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81b98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   81b9c:	d0fb      	beq.n	81b96 <pmc_sleep+0x22e>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   81b9e:	4a13      	ldr	r2, [pc, #76]	; (81bec <pmc_sleep+0x284>)
   81ba0:	6a13      	ldr	r3, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
   81ba2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81ba6:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   81baa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   81bae:	6213      	str	r3, [r2, #32]
   81bb0:	e77b      	b.n	81aaa <pmc_sleep+0x142>
	uint32_t pll_sr = 0;
   81bb2:	2200      	movs	r2, #0
   81bb4:	e782      	b.n	81abc <pmc_sleep+0x154>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   81bb6:	490d      	ldr	r1, [pc, #52]	; (81bec <pmc_sleep+0x284>)
   81bb8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   81bba:	f013 0f02 	tst.w	r3, #2
   81bbe:	d0fb      	beq.n	81bb8 <pmc_sleep+0x250>
   81bc0:	e788      	b.n	81ad4 <pmc_sleep+0x16c>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   81bc2:	490a      	ldr	r1, [pc, #40]	; (81bec <pmc_sleep+0x284>)
   81bc4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   81bc6:	f013 0f40 	tst.w	r3, #64	; 0x40
   81bca:	d0fb      	beq.n	81bc4 <pmc_sleep+0x25c>
   81bcc:	e782      	b.n	81ad4 <pmc_sleep+0x16c>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
   81bce:	4a08      	ldr	r2, [pc, #32]	; (81bf0 <pmc_sleep+0x288>)
   81bd0:	6913      	ldr	r3, [r2, #16]
   81bd2:	f043 0304 	orr.w	r3, r3, #4
   81bd6:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
   81bd8:	2201      	movs	r2, #1
   81bda:	4b06      	ldr	r3, [pc, #24]	; (81bf4 <pmc_sleep+0x28c>)
   81bdc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   81bde:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81be2:	b662      	cpsie	i
		__WFE() ;
   81be4:	bf20      	wfe
   81be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bea:	bf00      	nop
   81bec:	400e0600 	.word	0x400e0600
   81bf0:	e000ed00 	.word	0xe000ed00
   81bf4:	2007031c 	.word	0x2007031c
   81bf8:	20071854 	.word	0x20071854
   81bfc:	400e0a00 	.word	0x400e0a00
   81c00:	00081895 	.word	0x00081895
   81c04:	000818cd 	.word	0x000818cd
   81c08:	00081931 	.word	0x00081931
   81c0c:	fec8fffc 	.word	0xfec8fffc
   81c10:	01370002 	.word	0x01370002
   81c14:	07ff0000 	.word	0x07ff0000
   81c18:	20071858 	.word	0x20071858

00081c1c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   81c1c:	4b02      	ldr	r3, [pc, #8]	; (81c28 <pmc_is_wakeup_clocks_restored+0xc>)
   81c1e:	7818      	ldrb	r0, [r3, #0]
}
   81c20:	f080 0001 	eor.w	r0, r0, #1
   81c24:	4770      	bx	lr
   81c26:	bf00      	nop
   81c28:	20071854 	.word	0x20071854

00081c2c <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
   81c2c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81c2e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81c32:	fab3 f383 	clz	r3, r3
   81c36:	095b      	lsrs	r3, r3, #5
   81c38:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81c3a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81c3c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81c40:	2200      	movs	r2, #0
   81c42:	4b0c      	ldr	r3, [pc, #48]	; (81c74 <udd_ctrl_init+0x48>)
   81c44:	701a      	strb	r2, [r3, #0]
	return flags;
   81c46:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   81c48:	2101      	movs	r1, #1
   81c4a:	4a0b      	ldr	r2, [pc, #44]	; (81c78 <udd_ctrl_init+0x4c>)
   81c4c:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   81c4e:	b123      	cbz	r3, 81c5a <udd_ctrl_init+0x2e>
		cpu_irq_enable();
   81c50:	4b08      	ldr	r3, [pc, #32]	; (81c74 <udd_ctrl_init+0x48>)
   81c52:	7019      	strb	r1, [r3, #0]
   81c54:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81c58:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   81c5a:	2202      	movs	r2, #2
   81c5c:	4b07      	ldr	r3, [pc, #28]	; (81c7c <udd_ctrl_init+0x50>)
   81c5e:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   81c60:	4a07      	ldr	r2, [pc, #28]	; (81c80 <udd_ctrl_init+0x54>)
   81c62:	2300      	movs	r3, #0
   81c64:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   81c66:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   81c68:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   81c6a:	4a06      	ldr	r2, [pc, #24]	; (81c84 <udd_ctrl_init+0x58>)
   81c6c:	7013      	strb	r3, [r2, #0]
}
   81c6e:	b002      	add	sp, #8
   81c70:	4770      	bx	lr
   81c72:	bf00      	nop
   81c74:	2007031c 	.word	0x2007031c
   81c78:	400ac220 	.word	0x400ac220
   81c7c:	400ac160 	.word	0x400ac160
   81c80:	20071920 	.word	0x20071920
   81c84:	20071864 	.word	0x20071864

00081c88 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   81c88:	2205      	movs	r2, #5
   81c8a:	4b03      	ldr	r3, [pc, #12]	; (81c98 <udd_ctrl_stall_data+0x10>)
   81c8c:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   81c8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81c92:	4b02      	ldr	r3, [pc, #8]	; (81c9c <udd_ctrl_stall_data+0x14>)
   81c94:	601a      	str	r2, [r3, #0]
   81c96:	4770      	bx	lr
   81c98:	20071864 	.word	0x20071864
   81c9c:	400ac1f0 	.word	0x400ac1f0

00081ca0 <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
   81ca0:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   81ca2:	2203      	movs	r2, #3
   81ca4:	4b0f      	ldr	r3, [pc, #60]	; (81ce4 <udd_ctrl_send_zlp_in+0x44>)
   81ca6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81ca8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81cac:	fab3 f383 	clz	r3, r3
   81cb0:	095b      	lsrs	r3, r3, #5
   81cb2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81cb4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81cb6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81cba:	2200      	movs	r2, #0
   81cbc:	4b0a      	ldr	r3, [pc, #40]	; (81ce8 <udd_ctrl_send_zlp_in+0x48>)
   81cbe:	701a      	strb	r2, [r3, #0]
	return flags;
   81cc0:	9801      	ldr	r0, [sp, #4]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   81cc2:	490a      	ldr	r1, [pc, #40]	; (81cec <udd_ctrl_send_zlp_in+0x4c>)
   81cc4:	2201      	movs	r2, #1
   81cc6:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
   81cc8:	4b09      	ldr	r3, [pc, #36]	; (81cf0 <udd_ctrl_send_zlp_in+0x50>)
   81cca:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   81ccc:	2208      	movs	r2, #8
   81cce:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
   81cd0:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   81cd2:	b128      	cbz	r0, 81ce0 <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
   81cd4:	2201      	movs	r2, #1
   81cd6:	4b04      	ldr	r3, [pc, #16]	; (81ce8 <udd_ctrl_send_zlp_in+0x48>)
   81cd8:	701a      	strb	r2, [r3, #0]
   81cda:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81cde:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   81ce0:	b002      	add	sp, #8
   81ce2:	4770      	bx	lr
   81ce4:	20071864 	.word	0x20071864
   81ce8:	2007031c 	.word	0x2007031c
   81cec:	400ac160 	.word	0x400ac160
   81cf0:	400ac1f0 	.word	0x400ac1f0

00081cf4 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   81cf4:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   81cf6:	4b02      	ldr	r3, [pc, #8]	; (81d00 <udd_ctrl_endofrequest+0xc>)
   81cf8:	691b      	ldr	r3, [r3, #16]
   81cfa:	b103      	cbz	r3, 81cfe <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   81cfc:	4798      	blx	r3
   81cfe:	bd08      	pop	{r3, pc}
   81d00:	20071920 	.word	0x20071920

00081d04 <udd_ctrl_in_sent>:
{
   81d04:	b530      	push	{r4, r5, lr}
   81d06:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81d08:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81d0c:	fab3 f383 	clz	r3, r3
   81d10:	095b      	lsrs	r3, r3, #5
   81d12:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81d14:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81d16:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81d1a:	2200      	movs	r2, #0
   81d1c:	4b4c      	ldr	r3, [pc, #304]	; (81e50 <udd_ctrl_in_sent+0x14c>)
   81d1e:	701a      	strb	r2, [r3, #0]
	return flags;
   81d20:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
   81d22:	2101      	movs	r1, #1
   81d24:	4a4b      	ldr	r2, [pc, #300]	; (81e54 <udd_ctrl_in_sent+0x150>)
   81d26:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   81d28:	b123      	cbz	r3, 81d34 <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
   81d2a:	4b49      	ldr	r3, [pc, #292]	; (81e50 <udd_ctrl_in_sent+0x14c>)
   81d2c:	7019      	strb	r1, [r3, #0]
   81d2e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81d32:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81d34:	4b48      	ldr	r3, [pc, #288]	; (81e58 <udd_ctrl_in_sent+0x154>)
   81d36:	781b      	ldrb	r3, [r3, #0]
   81d38:	2b03      	cmp	r3, #3
   81d3a:	d057      	beq.n	81dec <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   81d3c:	4b47      	ldr	r3, [pc, #284]	; (81e5c <udd_ctrl_in_sent+0x158>)
   81d3e:	881b      	ldrh	r3, [r3, #0]
   81d40:	4a47      	ldr	r2, [pc, #284]	; (81e60 <udd_ctrl_in_sent+0x15c>)
   81d42:	8994      	ldrh	r4, [r2, #12]
   81d44:	1ae4      	subs	r4, r4, r3
   81d46:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   81d48:	b9c4      	cbnz	r4, 81d7c <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81d4a:	4a46      	ldr	r2, [pc, #280]	; (81e64 <udd_ctrl_in_sent+0x160>)
   81d4c:	8811      	ldrh	r1, [r2, #0]
   81d4e:	440b      	add	r3, r1
   81d50:	b29b      	uxth	r3, r3
   81d52:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   81d54:	4a42      	ldr	r2, [pc, #264]	; (81e60 <udd_ctrl_in_sent+0x15c>)
   81d56:	88d2      	ldrh	r2, [r2, #6]
   81d58:	429a      	cmp	r2, r3
   81d5a:	d04c      	beq.n	81df6 <udd_ctrl_in_sent+0xf2>
					|| b_shortpacket) {
   81d5c:	4b42      	ldr	r3, [pc, #264]	; (81e68 <udd_ctrl_in_sent+0x164>)
   81d5e:	781b      	ldrb	r3, [r3, #0]
   81d60:	2b00      	cmp	r3, #0
   81d62:	d148      	bne.n	81df6 <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   81d64:	4b3e      	ldr	r3, [pc, #248]	; (81e60 <udd_ctrl_in_sent+0x15c>)
   81d66:	695b      	ldr	r3, [r3, #20]
   81d68:	2b00      	cmp	r3, #0
   81d6a:	d061      	beq.n	81e30 <udd_ctrl_in_sent+0x12c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   81d6c:	4798      	blx	r3
   81d6e:	2800      	cmp	r0, #0
   81d70:	d05e      	beq.n	81e30 <udd_ctrl_in_sent+0x12c>
			udd_ctrl_payload_buf_cnt = 0;
   81d72:	2200      	movs	r2, #0
   81d74:	4b39      	ldr	r3, [pc, #228]	; (81e5c <udd_ctrl_in_sent+0x158>)
   81d76:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   81d78:	4b39      	ldr	r3, [pc, #228]	; (81e60 <udd_ctrl_in_sent+0x15c>)
   81d7a:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   81d7c:	2c3f      	cmp	r4, #63	; 0x3f
   81d7e:	d957      	bls.n	81e30 <udd_ctrl_in_sent+0x12c>
		b_shortpacket = false;
   81d80:	2200      	movs	r2, #0
   81d82:	4b39      	ldr	r3, [pc, #228]	; (81e68 <udd_ctrl_in_sent+0x164>)
   81d84:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   81d86:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81d88:	4b35      	ldr	r3, [pc, #212]	; (81e60 <udd_ctrl_in_sent+0x15c>)
   81d8a:	689a      	ldr	r2, [r3, #8]
   81d8c:	4b33      	ldr	r3, [pc, #204]	; (81e5c <udd_ctrl_in_sent+0x158>)
   81d8e:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81d90:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81d94:	fab3 f383 	clz	r3, r3
   81d98:	095b      	lsrs	r3, r3, #5
   81d9a:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   81d9c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81d9e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81da2:	2100      	movs	r1, #0
   81da4:	4b2a      	ldr	r3, [pc, #168]	; (81e50 <udd_ctrl_in_sent+0x14c>)
   81da6:	7019      	strb	r1, [r3, #0]
	return flags;
   81da8:	9802      	ldr	r0, [sp, #8]
	if (Is_udd_out_received(0)) {
   81daa:	4b30      	ldr	r3, [pc, #192]	; (81e6c <udd_ctrl_in_sent+0x168>)
   81dac:	681b      	ldr	r3, [r3, #0]
   81dae:	f013 0f02 	tst.w	r3, #2
   81db2:	d141      	bne.n	81e38 <udd_ctrl_in_sent+0x134>
	for (i = 0; i < nb_remain; i++) {
   81db4:	b144      	cbz	r4, 81dc8 <udd_ctrl_in_sent+0xc4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81db6:	442a      	add	r2, r5
   81db8:	4b2d      	ldr	r3, [pc, #180]	; (81e70 <udd_ctrl_in_sent+0x16c>)
		*ptr_dest++ = *ptr_src++;
   81dba:	f812 1b01 	ldrb.w	r1, [r2], #1
   81dbe:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
   81dc2:	b2d9      	uxtb	r1, r3
   81dc4:	42a1      	cmp	r1, r4
   81dc6:	d3f8      	bcc.n	81dba <udd_ctrl_in_sent+0xb6>
	udd_ctrl_payload_buf_cnt += nb_remain;
   81dc8:	4b24      	ldr	r3, [pc, #144]	; (81e5c <udd_ctrl_in_sent+0x158>)
   81dca:	881a      	ldrh	r2, [r3, #0]
   81dcc:	4414      	add	r4, r2
   81dce:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   81dd0:	2301      	movs	r3, #1
   81dd2:	4a28      	ldr	r2, [pc, #160]	; (81e74 <udd_ctrl_in_sent+0x170>)
   81dd4:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
   81dd6:	3290      	adds	r2, #144	; 0x90
   81dd8:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   81dda:	2800      	cmp	r0, #0
   81ddc:	d036      	beq.n	81e4c <udd_ctrl_in_sent+0x148>
		cpu_irq_enable();
   81dde:	461a      	mov	r2, r3
   81de0:	4b1b      	ldr	r3, [pc, #108]	; (81e50 <udd_ctrl_in_sent+0x14c>)
   81de2:	701a      	strb	r2, [r3, #0]
   81de4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81de8:	b662      	cpsie	i
   81dea:	e02f      	b.n	81e4c <udd_ctrl_in_sent+0x148>
		udd_ctrl_endofrequest();
   81dec:	4b22      	ldr	r3, [pc, #136]	; (81e78 <udd_ctrl_in_sent+0x174>)
   81dee:	4798      	blx	r3
		udd_ctrl_init();
   81df0:	4b22      	ldr	r3, [pc, #136]	; (81e7c <udd_ctrl_in_sent+0x178>)
   81df2:	4798      	blx	r3
		return;
   81df4:	e02a      	b.n	81e4c <udd_ctrl_in_sent+0x148>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   81df6:	2204      	movs	r2, #4
   81df8:	4b17      	ldr	r3, [pc, #92]	; (81e58 <udd_ctrl_in_sent+0x154>)
   81dfa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81dfc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81e00:	fab3 f383 	clz	r3, r3
   81e04:	095b      	lsrs	r3, r3, #5
   81e06:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   81e08:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81e0a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81e0e:	2200      	movs	r2, #0
   81e10:	4b0f      	ldr	r3, [pc, #60]	; (81e50 <udd_ctrl_in_sent+0x14c>)
   81e12:	701a      	strb	r2, [r3, #0]
	return flags;
   81e14:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
   81e16:	2310      	movs	r3, #16
   81e18:	4916      	ldr	r1, [pc, #88]	; (81e74 <udd_ctrl_in_sent+0x170>)
   81e1a:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   81e1c:	3190      	adds	r1, #144	; 0x90
   81e1e:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
   81e20:	b1a2      	cbz	r2, 81e4c <udd_ctrl_in_sent+0x148>
		cpu_irq_enable();
   81e22:	2201      	movs	r2, #1
   81e24:	4b0a      	ldr	r3, [pc, #40]	; (81e50 <udd_ctrl_in_sent+0x14c>)
   81e26:	701a      	strb	r2, [r3, #0]
   81e28:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81e2c:	b662      	cpsie	i
   81e2e:	e00d      	b.n	81e4c <udd_ctrl_in_sent+0x148>
		b_shortpacket = true;
   81e30:	2201      	movs	r2, #1
   81e32:	4b0d      	ldr	r3, [pc, #52]	; (81e68 <udd_ctrl_in_sent+0x164>)
   81e34:	701a      	strb	r2, [r3, #0]
   81e36:	e7a7      	b.n	81d88 <udd_ctrl_in_sent+0x84>
	if (cpu_irq_is_enabled_flags(flags))
   81e38:	b128      	cbz	r0, 81e46 <udd_ctrl_in_sent+0x142>
		cpu_irq_enable();
   81e3a:	2201      	movs	r2, #1
   81e3c:	4b04      	ldr	r3, [pc, #16]	; (81e50 <udd_ctrl_in_sent+0x14c>)
   81e3e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   81e40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81e44:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   81e46:	2204      	movs	r2, #4
   81e48:	4b03      	ldr	r3, [pc, #12]	; (81e58 <udd_ctrl_in_sent+0x154>)
   81e4a:	701a      	strb	r2, [r3, #0]
}
   81e4c:	b005      	add	sp, #20
   81e4e:	bd30      	pop	{r4, r5, pc}
   81e50:	2007031c 	.word	0x2007031c
   81e54:	400ac220 	.word	0x400ac220
   81e58:	20071864 	.word	0x20071864
   81e5c:	20071860 	.word	0x20071860
   81e60:	20071920 	.word	0x20071920
   81e64:	20071862 	.word	0x20071862
   81e68:	2007185c 	.word	0x2007185c
   81e6c:	400ac130 	.word	0x400ac130
   81e70:	20180000 	.word	0x20180000
   81e74:	400ac160 	.word	0x400ac160
   81e78:	00081cf5 	.word	0x00081cf5
   81e7c:	00081c2d 	.word	0x00081c2d

00081e80 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   81e80:	7d03      	ldrb	r3, [r0, #20]
   81e82:	f013 0f01 	tst.w	r3, #1
   81e86:	d013      	beq.n	81eb0 <udd_ep_finish_job+0x30>
{
   81e88:	b510      	push	{r4, lr}
   81e8a:	460c      	mov	r4, r1
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   81e8c:	7d03      	ldrb	r3, [r0, #20]
   81e8e:	f36f 0300 	bfc	r3, #0, #1
   81e92:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   81e94:	6803      	ldr	r3, [r0, #0]
   81e96:	b153      	cbz	r3, 81eae <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   81e98:	4906      	ldr	r1, [pc, #24]	; (81eb4 <udd_ep_finish_job+0x34>)
   81e9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   81e9e:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   81ea2:	bf18      	it	ne
   81ea4:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   81ea8:	6881      	ldr	r1, [r0, #8]
   81eaa:	4620      	mov	r0, r4
   81eac:	4798      	blx	r3
   81eae:	bd10      	pop	{r4, pc}
   81eb0:	4770      	bx	lr
   81eb2:	bf00      	nop
   81eb4:	400ac100 	.word	0x400ac100

00081eb8 <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   81eb8:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   81eba:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   81ebe:	4a5f      	ldr	r2, [pc, #380]	; (8203c <udd_ep_trans_done+0x184>)
   81ec0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   81ec4:	7d12      	ldrb	r2, [r2, #20]
   81ec6:	f012 0f01 	tst.w	r2, #1
   81eca:	f000 80b5 	beq.w	82038 <udd_ep_trans_done+0x180>
{
   81ece:	b5f0      	push	{r4, r5, r6, r7, lr}
   81ed0:	b083      	sub	sp, #12
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   81ed2:	460a      	mov	r2, r1
   81ed4:	4959      	ldr	r1, [pc, #356]	; (8203c <udd_ep_trans_done+0x184>)
   81ed6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   81eda:	68d1      	ldr	r1, [r2, #12]
   81edc:	6892      	ldr	r2, [r2, #8]
   81ede:	4291      	cmp	r1, r2
   81ee0:	d077      	beq.n	81fd2 <udd_ep_trans_done+0x11a>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   81ee2:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   81ee4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   81ee8:	bf92      	itee	ls
   81eea:	0417      	lslls	r7, r2, #16
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   81eec:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   81ef0:	2700      	movhi	r7, #0
		}
		if (Is_udd_endpoint_in(ep)) {
   81ef2:	4c53      	ldr	r4, [pc, #332]	; (82040 <udd_ep_trans_done+0x188>)
   81ef4:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   81ef8:	f415 7f80 	tst.w	r5, #256	; 0x100
   81efc:	d014      	beq.n	81f28 <udd_ep_trans_done+0x70>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   81efe:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   81f02:	f3c5 1502 	ubfx	r5, r5, #4, #3
   81f06:	2408      	movs	r4, #8
   81f08:	40ac      	lsls	r4, r5
   81f0a:	3c01      	subs	r4, #1
   81f0c:	4214      	tst	r4, r2
   81f0e:	d013      	beq.n	81f38 <udd_ep_trans_done+0x80>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   81f10:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   81f14:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   81f18:	4d48      	ldr	r5, [pc, #288]	; (8203c <udd_ep_trans_done+0x184>)
   81f1a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   81f1e:	7d25      	ldrb	r5, [r4, #20]
   81f20:	f36f 0541 	bfc	r5, #1, #1
   81f24:	7525      	strb	r5, [r4, #20]
   81f26:	e007      	b.n	81f38 <udd_ep_trans_done+0x80>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   81f28:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   81f2c:	f3c5 25c1 	ubfx	r5, r5, #11, #2
   81f30:	2d01      	cmp	r5, #1
   81f32:	d037      	beq.n	81fa4 <udd_ep_trans_done+0xec>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   81f34:	f047 0714 	orr.w	r7, r7, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   81f38:	4c42      	ldr	r4, [pc, #264]	; (82044 <udd_ep_trans_done+0x18c>)
   81f3a:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   81f3e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   81f42:	4e3e      	ldr	r6, [pc, #248]	; (8203c <udd_ep_trans_done+0x184>)
   81f44:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   81f48:	686d      	ldr	r5, [r5, #4]
   81f4a:	4429      	add	r1, r5
   81f4c:	6061      	str	r1, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81f4e:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81f52:	fab1 f181 	clz	r1, r1
   81f56:	0949      	lsrs	r1, r1, #5
   81f58:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81f5a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81f5c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81f60:	2500      	movs	r5, #0
   81f62:	4939      	ldr	r1, [pc, #228]	; (82048 <udd_ep_trans_done+0x190>)
   81f64:	700d      	strb	r5, [r1, #0]
	return flags;
   81f66:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   81f68:	68e1      	ldr	r1, [r4, #12]
   81f6a:	f011 0f10 	tst.w	r1, #16
   81f6e:	d122      	bne.n	81fb6 <udd_ep_trans_done+0xfe>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   81f70:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   81f74:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
   81f76:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   81f7a:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
   81f7e:	68c8      	ldr	r0, [r1, #12]
   81f80:	4410      	add	r0, r2
   81f82:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   81f84:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   81f86:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   81f8a:	fa00 f303 	lsl.w	r3, r0, r3
   81f8e:	4a2f      	ldr	r2, [pc, #188]	; (8204c <udd_ep_trans_done+0x194>)
   81f90:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
   81f92:	2d00      	cmp	r5, #0
   81f94:	d04e      	beq.n	82034 <udd_ep_trans_done+0x17c>
		cpu_irq_enable();
   81f96:	2201      	movs	r2, #1
   81f98:	4b2b      	ldr	r3, [pc, #172]	; (82048 <udd_ep_trans_done+0x190>)
   81f9a:	701a      	strb	r2, [r3, #0]
   81f9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81fa0:	b662      	cpsie	i
   81fa2:	e047      	b.n	82034 <udd_ep_trans_done+0x17c>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   81fa4:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   81fa8:	f3c5 1502 	ubfx	r5, r5, #4, #3
   81fac:	2408      	movs	r4, #8
   81fae:	40ac      	lsls	r4, r5
   81fb0:	42a2      	cmp	r2, r4
   81fb2:	d8c1      	bhi.n	81f38 <udd_ep_trans_done+0x80>
   81fb4:	e7be      	b.n	81f34 <udd_ep_trans_done+0x7c>
	if (cpu_irq_is_enabled_flags(flags))
   81fb6:	b12d      	cbz	r5, 81fc4 <udd_ep_trans_done+0x10c>
		cpu_irq_enable();
   81fb8:	2101      	movs	r1, #1
   81fba:	4a23      	ldr	r2, [pc, #140]	; (82048 <udd_ep_trans_done+0x190>)
   81fbc:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   81fbe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81fc2:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   81fc4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   81fc8:	491c      	ldr	r1, [pc, #112]	; (8203c <udd_ep_trans_done+0x184>)
   81fca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   81fce:	68d1      	ldr	r1, [r2, #12]
   81fd0:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   81fd2:	4a1b      	ldr	r2, [pc, #108]	; (82040 <udd_ep_trans_done+0x188>)
   81fd4:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   81fd8:	f412 7f80 	tst.w	r2, #256	; 0x100
   81fdc:	d021      	beq.n	82022 <udd_ep_trans_done+0x16a>
		if (ptr_job->b_shortpacket) {
   81fde:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   81fe2:	4916      	ldr	r1, [pc, #88]	; (8203c <udd_ep_trans_done+0x184>)
   81fe4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   81fe8:	7d12      	ldrb	r2, [r2, #20]
   81fea:	f012 0f02 	tst.w	r2, #2
   81fee:	d018      	beq.n	82022 <udd_ep_trans_done+0x16a>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   81ff0:	2201      	movs	r2, #1
   81ff2:	4b17      	ldr	r3, [pc, #92]	; (82050 <udd_ep_trans_done+0x198>)
   81ff4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   81ff8:	3b30      	subs	r3, #48	; 0x30
   81ffa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   81ffe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   82002:	bf1c      	itt	ne
   82004:	4b13      	ldrne	r3, [pc, #76]	; (82054 <udd_ep_trans_done+0x19c>)
   82006:	f843 2020 	strne.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   8200a:	2201      	movs	r2, #1
   8200c:	4b12      	ldr	r3, [pc, #72]	; (82058 <udd_ep_trans_done+0x1a0>)
   8200e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   82012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82016:	fa02 f000 	lsl.w	r0, r2, r0
   8201a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
   8201e:	6198      	str	r0, [r3, #24]
			return;
   82020:	e008      	b.n	82034 <udd_ep_trans_done+0x17c>
   82022:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
   82024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   82028:	2100      	movs	r1, #0
   8202a:	4804      	ldr	r0, [pc, #16]	; (8203c <udd_ep_trans_done+0x184>)
   8202c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   82030:	4b0a      	ldr	r3, [pc, #40]	; (8205c <udd_ep_trans_done+0x1a4>)
   82032:	4798      	blx	r3
}
   82034:	b003      	add	sp, #12
   82036:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82038:	4770      	bx	lr
   8203a:	bf00      	nop
   8203c:	20071868 	.word	0x20071868
   82040:	400ac100 	.word	0x400ac100
   82044:	400ac300 	.word	0x400ac300
   82048:	2007031c 	.word	0x2007031c
   8204c:	400ac000 	.word	0x400ac000
   82050:	400ac160 	.word	0x400ac160
   82054:	400ac190 	.word	0x400ac190
   82058:	400ac1f0 	.word	0x400ac1f0
   8205c:	00081e81 	.word	0x00081e81

00082060 <udd_sleep_mode>:
{
   82060:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
   82062:	4601      	mov	r1, r0
   82064:	bb28      	cbnz	r0, 820b2 <udd_sleep_mode+0x52>
   82066:	4b24      	ldr	r3, [pc, #144]	; (820f8 <udd_sleep_mode+0x98>)
   82068:	781b      	ldrb	r3, [r3, #0]
   8206a:	b91b      	cbnz	r3, 82074 <udd_sleep_mode+0x14>
	udd_b_idle = b_idle;
   8206c:	4b22      	ldr	r3, [pc, #136]	; (820f8 <udd_sleep_mode+0x98>)
   8206e:	7019      	strb	r1, [r3, #0]
}
   82070:	b002      	add	sp, #8
   82072:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   82074:	4b21      	ldr	r3, [pc, #132]	; (820fc <udd_sleep_mode+0x9c>)
   82076:	789b      	ldrb	r3, [r3, #2]
   82078:	b903      	cbnz	r3, 8207c <udd_sleep_mode+0x1c>
   8207a:	e7fe      	b.n	8207a <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8207c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82080:	fab3 f383 	clz	r3, r3
   82084:	095b      	lsrs	r3, r3, #5
   82086:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   82088:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8208a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8208e:	2200      	movs	r2, #0
   82090:	4b1b      	ldr	r3, [pc, #108]	; (82100 <udd_sleep_mode+0xa0>)
   82092:	701a      	strb	r2, [r3, #0]
	return flags;
   82094:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   82096:	4a19      	ldr	r2, [pc, #100]	; (820fc <udd_sleep_mode+0x9c>)
   82098:	7893      	ldrb	r3, [r2, #2]
   8209a:	3b01      	subs	r3, #1
   8209c:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8209e:	2800      	cmp	r0, #0
   820a0:	d0e4      	beq.n	8206c <udd_sleep_mode+0xc>
		cpu_irq_enable();
   820a2:	2201      	movs	r2, #1
   820a4:	4b16      	ldr	r3, [pc, #88]	; (82100 <udd_sleep_mode+0xa0>)
   820a6:	701a      	strb	r2, [r3, #0]
   820a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   820ac:	b662      	cpsie	i
   820ae:	e7dd      	b.n	8206c <udd_sleep_mode+0xc>
   820b0:	e7fe      	b.n	820b0 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
   820b2:	4b11      	ldr	r3, [pc, #68]	; (820f8 <udd_sleep_mode+0x98>)
   820b4:	781b      	ldrb	r3, [r3, #0]
   820b6:	2b00      	cmp	r3, #0
   820b8:	d1d8      	bne.n	8206c <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
   820ba:	4b10      	ldr	r3, [pc, #64]	; (820fc <udd_sleep_mode+0x9c>)
   820bc:	789b      	ldrb	r3, [r3, #2]
   820be:	2bff      	cmp	r3, #255	; 0xff
   820c0:	d0f6      	beq.n	820b0 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   820c2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   820c6:	fab3 f383 	clz	r3, r3
   820ca:	095b      	lsrs	r3, r3, #5
   820cc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   820ce:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   820d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   820d4:	2200      	movs	r2, #0
   820d6:	4b0a      	ldr	r3, [pc, #40]	; (82100 <udd_sleep_mode+0xa0>)
   820d8:	701a      	strb	r2, [r3, #0]
	return flags;
   820da:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
   820dc:	4a07      	ldr	r2, [pc, #28]	; (820fc <udd_sleep_mode+0x9c>)
   820de:	7893      	ldrb	r3, [r2, #2]
   820e0:	3301      	adds	r3, #1
   820e2:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
   820e4:	2800      	cmp	r0, #0
   820e6:	d0c1      	beq.n	8206c <udd_sleep_mode+0xc>
		cpu_irq_enable();
   820e8:	2201      	movs	r2, #1
   820ea:	4b05      	ldr	r3, [pc, #20]	; (82100 <udd_sleep_mode+0xa0>)
   820ec:	701a      	strb	r2, [r3, #0]
   820ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   820f2:	b662      	cpsie	i
   820f4:	e7ba      	b.n	8206c <udd_sleep_mode+0xc>
   820f6:	bf00      	nop
   820f8:	2007185d 	.word	0x2007185d
   820fc:	20071918 	.word	0x20071918
   82100:	2007031c 	.word	0x2007031c

00082104 <udd_enable>:
{
   82104:	b510      	push	{r4, lr}
   82106:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82108:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8210c:	fab3 f383 	clz	r3, r3
   82110:	095b      	lsrs	r3, r3, #5
   82112:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   82114:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82116:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8211a:	2200      	movs	r2, #0
   8211c:	4b51      	ldr	r3, [pc, #324]	; (82264 <udd_enable+0x160>)
   8211e:	701a      	strb	r2, [r3, #0]
	return flags;
   82120:	9c00      	ldr	r4, [sp, #0]
	pmc_enable_periph_clk(ID_UOTGHS);
   82122:	2028      	movs	r0, #40	; 0x28
   82124:	4b50      	ldr	r3, [pc, #320]	; (82268 <udd_enable+0x164>)
   82126:	4798      	blx	r3
	sysclk_enable_usb();
   82128:	4b50      	ldr	r3, [pc, #320]	; (8226c <udd_enable+0x168>)
   8212a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8212c:	4b50      	ldr	r3, [pc, #320]	; (82270 <udd_enable+0x16c>)
   8212e:	2250      	movs	r2, #80	; 0x50
   82130:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82134:	f44f 7280 	mov.w	r2, #256	; 0x100
   82138:	605a      	str	r2, [r3, #4]
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   8213a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8213e:	4b4d      	ldr	r3, [pc, #308]	; (82274 <udd_enable+0x170>)
   82140:	4798      	blx	r3
	otg_disable_id_pin();
   82142:	4b4d      	ldr	r3, [pc, #308]	; (82278 <udd_enable+0x174>)
   82144:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82148:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   8214c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_force_device_mode();
   82150:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82154:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   82158:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   8215c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82160:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   82164:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable_pad();
   82168:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8216c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   82170:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
   82174:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   8217c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
   82180:	681a      	ldr	r2, [r3, #0]
   82182:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   82186:	601a      	str	r2, [r3, #0]
	udd_high_speed_enable();
   82188:	681a      	ldr	r2, [r3, #0]
   8218a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
   8218e:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
   82190:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82194:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82198:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   8219c:	461a      	mov	r2, r3
   8219e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   821a2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   821a6:	d0fa      	beq.n	8219e <udd_enable+0x9a>
   821a8:	2200      	movs	r2, #0
		udd_ep_job[i].busy = false;
   821aa:	4834      	ldr	r0, [pc, #208]	; (8227c <udd_enable+0x178>)
   821ac:	0053      	lsls	r3, r2, #1
   821ae:	1899      	adds	r1, r3, r2
   821b0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   821b4:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   821b6:	4413      	add	r3, r2
   821b8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   821bc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   821c0:	f36f 0182 	bfc	r1, #2, #1
   821c4:	7519      	strb	r1, [r3, #20]
   821c6:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   821c8:	2a06      	cmp	r2, #6
   821ca:	d1ef      	bne.n	821ac <udd_enable+0xa8>
	otg_ack_vbus_transition();
   821cc:	4b2a      	ldr	r3, [pc, #168]	; (82278 <udd_enable+0x174>)
   821ce:	2202      	movs	r2, #2
   821d0:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	if (Is_otg_vbus_high()) {
   821d4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   821d8:	f413 6f00 	tst.w	r3, #2048	; 0x800
		otg_raise_vbus_transition();
   821dc:	bf1c      	itt	ne
   821de:	4b26      	ldrne	r3, [pc, #152]	; (82278 <udd_enable+0x174>)
   821e0:	f8c3 280c 	strne.w	r2, [r3, #2060]	; 0x80c
	otg_enable_vbus_interrupt();
   821e4:	4b24      	ldr	r3, [pc, #144]	; (82278 <udd_enable+0x174>)
   821e6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   821ea:	f042 0202 	orr.w	r2, r2, #2
   821ee:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_freeze_clock();
   821f2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   821f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   821fa:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
   821fe:	4b20      	ldr	r3, [pc, #128]	; (82280 <udd_enable+0x17c>)
   82200:	781b      	ldrb	r3, [r3, #0]
   82202:	bb1b      	cbnz	r3, 8224c <udd_enable+0x148>
		udd_b_sleep_initialized = true;
   82204:	2201      	movs	r2, #1
   82206:	4b1e      	ldr	r3, [pc, #120]	; (82280 <udd_enable+0x17c>)
   82208:	701a      	strb	r2, [r3, #0]
		udd_b_idle = false;
   8220a:	2200      	movs	r2, #0
   8220c:	4b1d      	ldr	r3, [pc, #116]	; (82284 <udd_enable+0x180>)
   8220e:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
   82210:	4b1d      	ldr	r3, [pc, #116]	; (82288 <udd_enable+0x184>)
   82212:	78db      	ldrb	r3, [r3, #3]
   82214:	2bff      	cmp	r3, #255	; 0xff
   82216:	d018      	beq.n	8224a <udd_enable+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82218:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8221c:	fab3 f383 	clz	r3, r3
   82220:	095b      	lsrs	r3, r3, #5
   82222:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82224:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82226:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8222a:	2200      	movs	r2, #0
   8222c:	4b0d      	ldr	r3, [pc, #52]	; (82264 <udd_enable+0x160>)
   8222e:	701a      	strb	r2, [r3, #0]
	return flags;
   82230:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
   82232:	4a15      	ldr	r2, [pc, #84]	; (82288 <udd_enable+0x184>)
   82234:	78d3      	ldrb	r3, [r2, #3]
   82236:	3301      	adds	r3, #1
   82238:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   8223a:	b151      	cbz	r1, 82252 <udd_enable+0x14e>
		cpu_irq_enable();
   8223c:	2201      	movs	r2, #1
   8223e:	4b09      	ldr	r3, [pc, #36]	; (82264 <udd_enable+0x160>)
   82240:	701a      	strb	r2, [r3, #0]
   82242:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82246:	b662      	cpsie	i
   82248:	e003      	b.n	82252 <udd_enable+0x14e>
   8224a:	e7fe      	b.n	8224a <udd_enable+0x146>
		udd_sleep_mode(false); // Enter idle mode
   8224c:	2000      	movs	r0, #0
   8224e:	4b0f      	ldr	r3, [pc, #60]	; (8228c <udd_enable+0x188>)
   82250:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   82252:	b12c      	cbz	r4, 82260 <udd_enable+0x15c>
		cpu_irq_enable();
   82254:	2201      	movs	r2, #1
   82256:	4b03      	ldr	r3, [pc, #12]	; (82264 <udd_enable+0x160>)
   82258:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8225a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8225e:	b662      	cpsie	i
}
   82260:	b002      	add	sp, #8
   82262:	bd10      	pop	{r4, pc}
   82264:	2007031c 	.word	0x2007031c
   82268:	000818dd 	.word	0x000818dd
   8226c:	00080215 	.word	0x00080215
   82270:	e000e100 	.word	0xe000e100
   82274:	0008191d 	.word	0x0008191d
   82278:	400ac000 	.word	0x400ac000
   8227c:	20071868 	.word	0x20071868
   82280:	2007185e 	.word	0x2007185e
   82284:	2007185d 	.word	0x2007185d
   82288:	20071918 	.word	0x20071918
   8228c:	00082061 	.word	0x00082061

00082290 <udd_attach>:
{
   82290:	b570      	push	{r4, r5, r6, lr}
   82292:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82294:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82298:	fab3 f383 	clz	r3, r3
   8229c:	095b      	lsrs	r3, r3, #5
   8229e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   822a0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   822a2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   822a6:	2200      	movs	r2, #0
   822a8:	4b19      	ldr	r3, [pc, #100]	; (82310 <udd_attach+0x80>)
   822aa:	701a      	strb	r2, [r3, #0]
	return flags;
   822ac:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
   822ae:	2001      	movs	r0, #1
   822b0:	4b18      	ldr	r3, [pc, #96]	; (82314 <udd_attach+0x84>)
   822b2:	4798      	blx	r3
	otg_unfreeze_clock();
   822b4:	4a18      	ldr	r2, [pc, #96]	; (82318 <udd_attach+0x88>)
   822b6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   822ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   822be:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   822c2:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   822c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   822ca:	d0fa      	beq.n	822c2 <udd_attach+0x32>
	udd_attach_device();
   822cc:	4b12      	ldr	r3, [pc, #72]	; (82318 <udd_attach+0x88>)
   822ce:	681a      	ldr	r2, [r3, #0]
   822d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   822d4:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   822d6:	2608      	movs	r6, #8
   822d8:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   822da:	2101      	movs	r1, #1
   822dc:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   822de:	2210      	movs	r2, #16
   822e0:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   822e2:	2504      	movs	r5, #4
   822e4:	619d      	str	r5, [r3, #24]
	udd_enable_msof_interrupt();
   822e6:	2002      	movs	r0, #2
   822e8:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
   822ea:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   822ec:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   822ee:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
   822f0:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
   822f2:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   822f4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   822f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   822fc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
   82300:	b124      	cbz	r4, 8230c <udd_attach+0x7c>
		cpu_irq_enable();
   82302:	4b03      	ldr	r3, [pc, #12]	; (82310 <udd_attach+0x80>)
   82304:	7019      	strb	r1, [r3, #0]
   82306:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8230a:	b662      	cpsie	i
}
   8230c:	b002      	add	sp, #8
   8230e:	bd70      	pop	{r4, r5, r6, pc}
   82310:	2007031c 	.word	0x2007031c
   82314:	00082061 	.word	0x00082061
   82318:	400ac000 	.word	0x400ac000

0008231c <udd_detach>:
{
   8231c:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   8231e:	4b0a      	ldr	r3, [pc, #40]	; (82348 <udd_detach+0x2c>)
   82320:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82324:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82328:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_detach_device();
   8232c:	681a      	ldr	r2, [r3, #0]
   8232e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   82332:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   82334:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82338:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   8233c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   82340:	2000      	movs	r0, #0
   82342:	4b02      	ldr	r3, [pc, #8]	; (8234c <udd_detach+0x30>)
   82344:	4798      	blx	r3
   82346:	bd08      	pop	{r3, pc}
   82348:	400ac000 	.word	0x400ac000
   8234c:	00082061 	.word	0x00082061

00082350 <UOTGHS_Handler>:
{
   82350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82354:	b085      	sub	sp, #20
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   82356:	4b9b      	ldr	r3, [pc, #620]	; (825c4 <UOTGHS_Handler+0x274>)
   82358:	4798      	blx	r3
   8235a:	b920      	cbnz	r0, 82366 <UOTGHS_Handler+0x16>
   8235c:	4b9a      	ldr	r3, [pc, #616]	; (825c8 <UOTGHS_Handler+0x278>)
   8235e:	685b      	ldr	r3, [r3, #4]
   82360:	f013 0f01 	tst.w	r3, #1
   82364:	d011      	beq.n	8238a <UOTGHS_Handler+0x3a>
	if (Is_udd_sof()) {
   82366:	4b98      	ldr	r3, [pc, #608]	; (825c8 <UOTGHS_Handler+0x278>)
   82368:	685b      	ldr	r3, [r3, #4]
   8236a:	f013 0f04 	tst.w	r3, #4
   8236e:	d016      	beq.n	8239e <UOTGHS_Handler+0x4e>
		udd_ack_sof();
   82370:	4b95      	ldr	r3, [pc, #596]	; (825c8 <UOTGHS_Handler+0x278>)
   82372:	2204      	movs	r2, #4
   82374:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   82376:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   8237a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   8237e:	d00b      	beq.n	82398 <UOTGHS_Handler+0x48>
		UDC_SOF_EVENT();
   82380:	4b92      	ldr	r3, [pc, #584]	; (825cc <UOTGHS_Handler+0x27c>)
   82382:	4798      	blx	r3
}
   82384:	b005      	add	sp, #20
   82386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("cpsid i" : : : "memory");
   8238a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8238c:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   82390:	2200      	movs	r2, #0
   82392:	4b8f      	ldr	r3, [pc, #572]	; (825d0 <UOTGHS_Handler+0x280>)
   82394:	701a      	strb	r2, [r3, #0]
		return;
   82396:	e7f5      	b.n	82384 <UOTGHS_Handler+0x34>
			udc_sof_notify();
   82398:	4b8e      	ldr	r3, [pc, #568]	; (825d4 <UOTGHS_Handler+0x284>)
   8239a:	4798      	blx	r3
   8239c:	e7f0      	b.n	82380 <UOTGHS_Handler+0x30>
	if (Is_udd_msof()) {
   8239e:	4b8a      	ldr	r3, [pc, #552]	; (825c8 <UOTGHS_Handler+0x278>)
   823a0:	685b      	ldr	r3, [r3, #4]
   823a2:	f013 0f02 	tst.w	r3, #2
   823a6:	d133      	bne.n	82410 <UOTGHS_Handler+0xc0>
	if (!Is_udd_endpoint_interrupt(0)) {
   823a8:	4b87      	ldr	r3, [pc, #540]	; (825c8 <UOTGHS_Handler+0x278>)
   823aa:	685b      	ldr	r3, [r3, #4]
   823ac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   823b0:	d026      	beq.n	82400 <UOTGHS_Handler+0xb0>
	udd_disable_nak_in_interrupt(0);
   823b2:	4b89      	ldr	r3, [pc, #548]	; (825d8 <UOTGHS_Handler+0x288>)
   823b4:	2210      	movs	r2, #16
   823b6:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   823b8:	2208      	movs	r2, #8
   823ba:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
   823bc:	3bf0      	subs	r3, #240	; 0xf0
   823be:	681b      	ldr	r3, [r3, #0]
   823c0:	f013 0f04 	tst.w	r3, #4
   823c4:	d12a      	bne.n	8241c <UOTGHS_Handler+0xcc>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   823c6:	4b85      	ldr	r3, [pc, #532]	; (825dc <UOTGHS_Handler+0x28c>)
   823c8:	681b      	ldr	r3, [r3, #0]
   823ca:	f013 0f01 	tst.w	r3, #1
   823ce:	d005      	beq.n	823dc <UOTGHS_Handler+0x8c>
   823d0:	4b83      	ldr	r3, [pc, #524]	; (825e0 <UOTGHS_Handler+0x290>)
   823d2:	681b      	ldr	r3, [r3, #0]
   823d4:	f013 0f01 	tst.w	r3, #1
   823d8:	f040 8085 	bne.w	824e6 <UOTGHS_Handler+0x196>
	if (Is_udd_out_received(0)) {
   823dc:	4b7f      	ldr	r3, [pc, #508]	; (825dc <UOTGHS_Handler+0x28c>)
   823de:	681b      	ldr	r3, [r3, #0]
   823e0:	f013 0f02 	tst.w	r3, #2
   823e4:	f040 8082 	bne.w	824ec <UOTGHS_Handler+0x19c>
	if (Is_udd_nak_out(0)) {
   823e8:	4b7c      	ldr	r3, [pc, #496]	; (825dc <UOTGHS_Handler+0x28c>)
   823ea:	681b      	ldr	r3, [r3, #0]
   823ec:	f013 0f08 	tst.w	r3, #8
   823f0:	f040 8132 	bne.w	82658 <UOTGHS_Handler+0x308>
	if (Is_udd_nak_in(0)) {
   823f4:	4b79      	ldr	r3, [pc, #484]	; (825dc <UOTGHS_Handler+0x28c>)
   823f6:	681b      	ldr	r3, [r3, #0]
   823f8:	f013 0f10 	tst.w	r3, #16
   823fc:	f040 813f 	bne.w	8267e <UOTGHS_Handler+0x32e>
	for (i = 0; i < nb_data; i++) {
   82400:	4e78      	ldr	r6, [pc, #480]	; (825e4 <UOTGHS_Handler+0x294>)
   82402:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   82404:	4a70      	ldr	r2, [pc, #448]	; (825c8 <UOTGHS_Handler+0x278>)
   82406:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8240a:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   8240e:	e181      	b.n	82714 <UOTGHS_Handler+0x3c4>
		udd_ack_msof();
   82410:	2202      	movs	r2, #2
   82412:	4b6d      	ldr	r3, [pc, #436]	; (825c8 <UOTGHS_Handler+0x278>)
   82414:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   82416:	4b6f      	ldr	r3, [pc, #444]	; (825d4 <UOTGHS_Handler+0x284>)
   82418:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8241a:	e7b3      	b.n	82384 <UOTGHS_Handler+0x34>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   8241c:	4b72      	ldr	r3, [pc, #456]	; (825e8 <UOTGHS_Handler+0x298>)
   8241e:	781b      	ldrb	r3, [r3, #0]
   82420:	2b00      	cmp	r3, #0
   82422:	d141      	bne.n	824a8 <UOTGHS_Handler+0x158>
	if (8 != udd_byte_count(0)) {
   82424:	4b6d      	ldr	r3, [pc, #436]	; (825dc <UOTGHS_Handler+0x28c>)
   82426:	681b      	ldr	r3, [r3, #0]
   82428:	f3c3 530a 	ubfx	r3, r3, #20, #11
   8242c:	2b08      	cmp	r3, #8
   8242e:	d140      	bne.n	824b2 <UOTGHS_Handler+0x162>
   82430:	4a6e      	ldr	r2, [pc, #440]	; (825ec <UOTGHS_Handler+0x29c>)
   82432:	4b6f      	ldr	r3, [pc, #444]	; (825f0 <UOTGHS_Handler+0x2a0>)
	for (i = 0; i < 8; i++) {
   82434:	486f      	ldr	r0, [pc, #444]	; (825f4 <UOTGHS_Handler+0x2a4>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   82436:	f813 1b01 	ldrb.w	r1, [r3], #1
   8243a:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   8243e:	4283      	cmp	r3, r0
   82440:	d1f9      	bne.n	82436 <UOTGHS_Handler+0xe6>
	if (udc_process_setup() == false) {
   82442:	4b6d      	ldr	r3, [pc, #436]	; (825f8 <UOTGHS_Handler+0x2a8>)
   82444:	4798      	blx	r3
   82446:	2800      	cmp	r0, #0
   82448:	d039      	beq.n	824be <UOTGHS_Handler+0x16e>
	udd_ack_setup_received(0);
   8244a:	2204      	movs	r2, #4
   8244c:	4b6b      	ldr	r3, [pc, #428]	; (825fc <UOTGHS_Handler+0x2ac>)
   8244e:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
   82450:	4b6b      	ldr	r3, [pc, #428]	; (82600 <UOTGHS_Handler+0x2b0>)
   82452:	f993 3000 	ldrsb.w	r3, [r3]
   82456:	2b00      	cmp	r3, #0
   82458:	db37      	blt.n	824ca <UOTGHS_Handler+0x17a>
		if (0 == udd_g_ctrlreq.req.wLength) {
   8245a:	4b69      	ldr	r3, [pc, #420]	; (82600 <UOTGHS_Handler+0x2b0>)
   8245c:	88db      	ldrh	r3, [r3, #6]
   8245e:	2b00      	cmp	r3, #0
   82460:	d03e      	beq.n	824e0 <UOTGHS_Handler+0x190>
		udd_ctrl_prev_payload_buf_cnt = 0;
   82462:	2200      	movs	r2, #0
   82464:	4b67      	ldr	r3, [pc, #412]	; (82604 <UOTGHS_Handler+0x2b4>)
   82466:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82468:	4b67      	ldr	r3, [pc, #412]	; (82608 <UOTGHS_Handler+0x2b8>)
   8246a:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8246c:	2101      	movs	r1, #1
   8246e:	4b5e      	ldr	r3, [pc, #376]	; (825e8 <UOTGHS_Handler+0x298>)
   82470:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
   82472:	2110      	movs	r1, #16
   82474:	4b61      	ldr	r3, [pc, #388]	; (825fc <UOTGHS_Handler+0x2ac>)
   82476:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82478:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8247c:	fab3 f383 	clz	r3, r3
   82480:	095b      	lsrs	r3, r3, #5
   82482:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82484:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82486:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8248a:	4b51      	ldr	r3, [pc, #324]	; (825d0 <UOTGHS_Handler+0x280>)
   8248c:	701a      	strb	r2, [r3, #0]
	return flags;
   8248e:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
   82490:	4a5e      	ldr	r2, [pc, #376]	; (8260c <UOTGHS_Handler+0x2bc>)
   82492:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   82494:	2b00      	cmp	r3, #0
   82496:	f43f af75 	beq.w	82384 <UOTGHS_Handler+0x34>
		cpu_irq_enable();
   8249a:	2201      	movs	r2, #1
   8249c:	4b4c      	ldr	r3, [pc, #304]	; (825d0 <UOTGHS_Handler+0x280>)
   8249e:	701a      	strb	r2, [r3, #0]
   824a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   824a4:	b662      	cpsie	i
   824a6:	e76d      	b.n	82384 <UOTGHS_Handler+0x34>
		udd_ctrl_endofrequest();
   824a8:	4b59      	ldr	r3, [pc, #356]	; (82610 <UOTGHS_Handler+0x2c0>)
   824aa:	4798      	blx	r3
		udd_ctrl_init();
   824ac:	4b59      	ldr	r3, [pc, #356]	; (82614 <UOTGHS_Handler+0x2c4>)
   824ae:	4798      	blx	r3
   824b0:	e7b8      	b.n	82424 <UOTGHS_Handler+0xd4>
		udd_ctrl_stall_data();
   824b2:	4b59      	ldr	r3, [pc, #356]	; (82618 <UOTGHS_Handler+0x2c8>)
   824b4:	4798      	blx	r3
		udd_ack_setup_received(0);
   824b6:	2204      	movs	r2, #4
   824b8:	4b50      	ldr	r3, [pc, #320]	; (825fc <UOTGHS_Handler+0x2ac>)
   824ba:	601a      	str	r2, [r3, #0]
   824bc:	e762      	b.n	82384 <UOTGHS_Handler+0x34>
		udd_ctrl_stall_data();
   824be:	4b56      	ldr	r3, [pc, #344]	; (82618 <UOTGHS_Handler+0x2c8>)
   824c0:	4798      	blx	r3
		udd_ack_setup_received(0);
   824c2:	2204      	movs	r2, #4
   824c4:	4b4d      	ldr	r3, [pc, #308]	; (825fc <UOTGHS_Handler+0x2ac>)
   824c6:	601a      	str	r2, [r3, #0]
   824c8:	e75c      	b.n	82384 <UOTGHS_Handler+0x34>
		udd_ctrl_prev_payload_buf_cnt = 0;
   824ca:	2300      	movs	r3, #0
   824cc:	4a4d      	ldr	r2, [pc, #308]	; (82604 <UOTGHS_Handler+0x2b4>)
   824ce:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   824d0:	4a4d      	ldr	r2, [pc, #308]	; (82608 <UOTGHS_Handler+0x2b8>)
   824d2:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   824d4:	2202      	movs	r2, #2
   824d6:	4b44      	ldr	r3, [pc, #272]	; (825e8 <UOTGHS_Handler+0x298>)
   824d8:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   824da:	4b50      	ldr	r3, [pc, #320]	; (8261c <UOTGHS_Handler+0x2cc>)
   824dc:	4798      	blx	r3
   824de:	e751      	b.n	82384 <UOTGHS_Handler+0x34>
			udd_ctrl_send_zlp_in();
   824e0:	4b4f      	ldr	r3, [pc, #316]	; (82620 <UOTGHS_Handler+0x2d0>)
   824e2:	4798      	blx	r3
   824e4:	e74e      	b.n	82384 <UOTGHS_Handler+0x34>
		udd_ctrl_in_sent();
   824e6:	4b4d      	ldr	r3, [pc, #308]	; (8261c <UOTGHS_Handler+0x2cc>)
   824e8:	4798      	blx	r3
   824ea:	e74b      	b.n	82384 <UOTGHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   824ec:	4b3e      	ldr	r3, [pc, #248]	; (825e8 <UOTGHS_Handler+0x298>)
   824ee:	781b      	ldrb	r3, [r3, #0]
   824f0:	2b01      	cmp	r3, #1
   824f2:	d00b      	beq.n	8250c <UOTGHS_Handler+0x1bc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   824f4:	2b02      	cmp	r3, #2
   824f6:	d004      	beq.n	82502 <UOTGHS_Handler+0x1b2>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   824f8:	2b04      	cmp	r3, #4
   824fa:	d002      	beq.n	82502 <UOTGHS_Handler+0x1b2>
			udd_ctrl_stall_data();
   824fc:	4b46      	ldr	r3, [pc, #280]	; (82618 <UOTGHS_Handler+0x2c8>)
   824fe:	4798      	blx	r3
   82500:	e001      	b.n	82506 <UOTGHS_Handler+0x1b6>
			udd_ctrl_endofrequest();
   82502:	4b43      	ldr	r3, [pc, #268]	; (82610 <UOTGHS_Handler+0x2c0>)
   82504:	4798      	blx	r3
		udd_ctrl_init();
   82506:	4b43      	ldr	r3, [pc, #268]	; (82614 <UOTGHS_Handler+0x2c4>)
   82508:	4798      	blx	r3
   8250a:	e73b      	b.n	82384 <UOTGHS_Handler+0x34>
	nb_data = udd_byte_count(0);
   8250c:	4b33      	ldr	r3, [pc, #204]	; (825dc <UOTGHS_Handler+0x28c>)
   8250e:	6818      	ldr	r0, [r3, #0]
   82510:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   82514:	4b3a      	ldr	r3, [pc, #232]	; (82600 <UOTGHS_Handler+0x2b0>)
   82516:	899b      	ldrh	r3, [r3, #12]
   82518:	4a3b      	ldr	r2, [pc, #236]	; (82608 <UOTGHS_Handler+0x2b8>)
   8251a:	8814      	ldrh	r4, [r2, #0]
   8251c:	1822      	adds	r2, r4, r0
   8251e:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82520:	bfbc      	itt	lt
   82522:	1b1b      	sublt	r3, r3, r4
   82524:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82526:	4b36      	ldr	r3, [pc, #216]	; (82600 <UOTGHS_Handler+0x2b0>)
   82528:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   8252a:	b178      	cbz	r0, 8254c <UOTGHS_Handler+0x1fc>
   8252c:	1e63      	subs	r3, r4, #1
   8252e:	441a      	add	r2, r3
   82530:	4b2f      	ldr	r3, [pc, #188]	; (825f0 <UOTGHS_Handler+0x2a0>)
		*ptr_dest++ = *ptr_src++;
   82532:	f813 1b01 	ldrb.w	r1, [r3], #1
   82536:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
   8253a:	b2d9      	uxtb	r1, r3
   8253c:	4281      	cmp	r1, r0
   8253e:	d3f8      	bcc.n	82532 <UOTGHS_Handler+0x1e2>
	udd_ctrl_payload_buf_cnt += nb_data;
   82540:	4404      	add	r4, r0
   82542:	b2a4      	uxth	r4, r4
   82544:	4b30      	ldr	r3, [pc, #192]	; (82608 <UOTGHS_Handler+0x2b8>)
   82546:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   82548:	2840      	cmp	r0, #64	; 0x40
   8254a:	d00c      	beq.n	82566 <UOTGHS_Handler+0x216>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   8254c:	4b2c      	ldr	r3, [pc, #176]	; (82600 <UOTGHS_Handler+0x2b0>)
   8254e:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   82550:	695b      	ldr	r3, [r3, #20]
   82552:	b113      	cbz	r3, 8255a <UOTGHS_Handler+0x20a>
			if (!udd_g_ctrlreq.over_under_run()) {
   82554:	4798      	blx	r3
   82556:	2800      	cmp	r0, #0
   82558:	d02e      	beq.n	825b8 <UOTGHS_Handler+0x268>
		udd_ack_out_received(0);
   8255a:	2202      	movs	r2, #2
   8255c:	4b27      	ldr	r3, [pc, #156]	; (825fc <UOTGHS_Handler+0x2ac>)
   8255e:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   82560:	4b2f      	ldr	r3, [pc, #188]	; (82620 <UOTGHS_Handler+0x2d0>)
   82562:	4798      	blx	r3
   82564:	e70e      	b.n	82384 <UOTGHS_Handler+0x34>
			|| (udd_g_ctrlreq.req.wLength <=
   82566:	4b26      	ldr	r3, [pc, #152]	; (82600 <UOTGHS_Handler+0x2b0>)
   82568:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   8256a:	4b26      	ldr	r3, [pc, #152]	; (82604 <UOTGHS_Handler+0x2b4>)
   8256c:	881b      	ldrh	r3, [r3, #0]
   8256e:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   82570:	429a      	cmp	r2, r3
   82572:	ddeb      	ble.n	8254c <UOTGHS_Handler+0x1fc>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   82574:	4b22      	ldr	r3, [pc, #136]	; (82600 <UOTGHS_Handler+0x2b0>)
   82576:	899b      	ldrh	r3, [r3, #12]
   82578:	42a3      	cmp	r3, r4
   8257a:	d053      	beq.n	82624 <UOTGHS_Handler+0x2d4>
	udd_ack_out_received(0);
   8257c:	4b1f      	ldr	r3, [pc, #124]	; (825fc <UOTGHS_Handler+0x2ac>)
   8257e:	2202      	movs	r2, #2
   82580:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
   82582:	2210      	movs	r2, #16
   82584:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82586:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8258a:	fab3 f383 	clz	r3, r3
   8258e:	095b      	lsrs	r3, r3, #5
   82590:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   82592:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82594:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82598:	2100      	movs	r1, #0
   8259a:	4b0d      	ldr	r3, [pc, #52]	; (825d0 <UOTGHS_Handler+0x280>)
   8259c:	7019      	strb	r1, [r3, #0]
	return flags;
   8259e:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
   825a0:	491a      	ldr	r1, [pc, #104]	; (8260c <UOTGHS_Handler+0x2bc>)
   825a2:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
   825a4:	2b00      	cmp	r3, #0
   825a6:	f43f aeed 	beq.w	82384 <UOTGHS_Handler+0x34>
		cpu_irq_enable();
   825aa:	2201      	movs	r2, #1
   825ac:	4b08      	ldr	r3, [pc, #32]	; (825d0 <UOTGHS_Handler+0x280>)
   825ae:	701a      	strb	r2, [r3, #0]
   825b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   825b4:	b662      	cpsie	i
   825b6:	e6e5      	b.n	82384 <UOTGHS_Handler+0x34>
				udd_ctrl_stall_data();
   825b8:	4b17      	ldr	r3, [pc, #92]	; (82618 <UOTGHS_Handler+0x2c8>)
   825ba:	4798      	blx	r3
				udd_ack_out_received(0);
   825bc:	2202      	movs	r2, #2
   825be:	4b0f      	ldr	r3, [pc, #60]	; (825fc <UOTGHS_Handler+0x2ac>)
   825c0:	601a      	str	r2, [r3, #0]
   825c2:	e6df      	b.n	82384 <UOTGHS_Handler+0x34>
   825c4:	00081c1d 	.word	0x00081c1d
   825c8:	400ac000 	.word	0x400ac000
   825cc:	00083421 	.word	0x00083421
   825d0:	2007031c 	.word	0x2007031c
   825d4:	00080ded 	.word	0x00080ded
   825d8:	400ac220 	.word	0x400ac220
   825dc:	400ac130 	.word	0x400ac130
   825e0:	400ac1c0 	.word	0x400ac1c0
   825e4:	400ac134 	.word	0x400ac134
   825e8:	20071864 	.word	0x20071864
   825ec:	2007191f 	.word	0x2007191f
   825f0:	20180000 	.word	0x20180000
   825f4:	20180008 	.word	0x20180008
   825f8:	00080e2d 	.word	0x00080e2d
   825fc:	400ac160 	.word	0x400ac160
   82600:	20071920 	.word	0x20071920
   82604:	20071862 	.word	0x20071862
   82608:	20071860 	.word	0x20071860
   8260c:	400ac1f0 	.word	0x400ac1f0
   82610:	00081cf5 	.word	0x00081cf5
   82614:	00081c2d 	.word	0x00081c2d
   82618:	00081c89 	.word	0x00081c89
   8261c:	00081d05 	.word	0x00081d05
   82620:	00081ca1 	.word	0x00081ca1
		if (!udd_g_ctrlreq.over_under_run) {
   82624:	4ba1      	ldr	r3, [pc, #644]	; (828ac <UOTGHS_Handler+0x55c>)
   82626:	695b      	ldr	r3, [r3, #20]
   82628:	b153      	cbz	r3, 82640 <UOTGHS_Handler+0x2f0>
		if (!udd_g_ctrlreq.over_under_run()) {
   8262a:	4798      	blx	r3
   8262c:	b170      	cbz	r0, 8264c <UOTGHS_Handler+0x2fc>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8262e:	49a0      	ldr	r1, [pc, #640]	; (828b0 <UOTGHS_Handler+0x560>)
   82630:	4aa0      	ldr	r2, [pc, #640]	; (828b4 <UOTGHS_Handler+0x564>)
   82632:	880b      	ldrh	r3, [r1, #0]
   82634:	8810      	ldrh	r0, [r2, #0]
   82636:	4403      	add	r3, r0
   82638:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8263a:	2300      	movs	r3, #0
   8263c:	8013      	strh	r3, [r2, #0]
   8263e:	e79d      	b.n	8257c <UOTGHS_Handler+0x22c>
			udd_ctrl_stall_data();
   82640:	4b9d      	ldr	r3, [pc, #628]	; (828b8 <UOTGHS_Handler+0x568>)
   82642:	4798      	blx	r3
			udd_ack_out_received(0);
   82644:	2202      	movs	r2, #2
   82646:	4b9d      	ldr	r3, [pc, #628]	; (828bc <UOTGHS_Handler+0x56c>)
   82648:	601a      	str	r2, [r3, #0]
   8264a:	e69b      	b.n	82384 <UOTGHS_Handler+0x34>
			udd_ctrl_stall_data();
   8264c:	4b9a      	ldr	r3, [pc, #616]	; (828b8 <UOTGHS_Handler+0x568>)
   8264e:	4798      	blx	r3
			udd_ack_out_received(0);
   82650:	2202      	movs	r2, #2
   82652:	4b9a      	ldr	r3, [pc, #616]	; (828bc <UOTGHS_Handler+0x56c>)
   82654:	601a      	str	r2, [r3, #0]
   82656:	e695      	b.n	82384 <UOTGHS_Handler+0x34>
		udd_ack_nak_out(0);
   82658:	2208      	movs	r2, #8
   8265a:	4b98      	ldr	r3, [pc, #608]	; (828bc <UOTGHS_Handler+0x56c>)
   8265c:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0))
   8265e:	3b30      	subs	r3, #48	; 0x30
   82660:	681b      	ldr	r3, [r3, #0]
   82662:	f013 0f01 	tst.w	r3, #1
   82666:	f47f ae8d 	bne.w	82384 <UOTGHS_Handler+0x34>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8266a:	4b95      	ldr	r3, [pc, #596]	; (828c0 <UOTGHS_Handler+0x570>)
   8266c:	781b      	ldrb	r3, [r3, #0]
   8266e:	2b03      	cmp	r3, #3
   82670:	f47f ae88 	bne.w	82384 <UOTGHS_Handler+0x34>
		udd_enable_stall_handshake(0);
   82674:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82678:	4b92      	ldr	r3, [pc, #584]	; (828c4 <UOTGHS_Handler+0x574>)
   8267a:	601a      	str	r2, [r3, #0]
   8267c:	e682      	b.n	82384 <UOTGHS_Handler+0x34>
		udd_ack_nak_in(0);
   8267e:	2210      	movs	r2, #16
   82680:	4b8e      	ldr	r3, [pc, #568]	; (828bc <UOTGHS_Handler+0x56c>)
   82682:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
   82684:	3b30      	subs	r3, #48	; 0x30
   82686:	681b      	ldr	r3, [r3, #0]
   82688:	f013 0f02 	tst.w	r3, #2
   8268c:	f47f ae7a 	bne.w	82384 <UOTGHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   82690:	4b8b      	ldr	r3, [pc, #556]	; (828c0 <UOTGHS_Handler+0x570>)
   82692:	781b      	ldrb	r3, [r3, #0]
   82694:	2b01      	cmp	r3, #1
   82696:	d007      	beq.n	826a8 <UOTGHS_Handler+0x358>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   82698:	2b04      	cmp	r3, #4
   8269a:	f47f ae73 	bne.w	82384 <UOTGHS_Handler+0x34>
		udd_enable_stall_handshake(0);
   8269e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   826a2:	4b88      	ldr	r3, [pc, #544]	; (828c4 <UOTGHS_Handler+0x574>)
   826a4:	601a      	str	r2, [r3, #0]
   826a6:	e66d      	b.n	82384 <UOTGHS_Handler+0x34>
		udd_ctrl_send_zlp_in();
   826a8:	4b87      	ldr	r3, [pc, #540]	; (828c8 <UOTGHS_Handler+0x578>)
   826aa:	4798      	blx	r3
   826ac:	e66a      	b.n	82384 <UOTGHS_Handler+0x34>
			if (udd_endpoint_dma_get_status(ep)
   826ae:	4b87      	ldr	r3, [pc, #540]	; (828cc <UOTGHS_Handler+0x57c>)
   826b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   826b4:	68da      	ldr	r2, [r3, #12]
   826b6:	f012 0f01 	tst.w	r2, #1
   826ba:	f47f ae63 	bne.w	82384 <UOTGHS_Handler+0x34>
			udd_disable_endpoint_dma_interrupt(ep);
   826be:	4a84      	ldr	r2, [pc, #528]	; (828d0 <UOTGHS_Handler+0x580>)
   826c0:	6151      	str	r1, [r2, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   826c2:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   826c4:	0c1b      	lsrs	r3, r3, #16
   826c6:	d008      	beq.n	826da <UOTGHS_Handler+0x38a>
				ptr_job->buf_cnt -= nb_remaining;
   826c8:	4a82      	ldr	r2, [pc, #520]	; (828d4 <UOTGHS_Handler+0x584>)
   826ca:	007c      	lsls	r4, r7, #1
   826cc:	19e5      	adds	r5, r4, r7
   826ce:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   826d2:	68e9      	ldr	r1, [r5, #12]
   826d4:	1acb      	subs	r3, r1, r3
   826d6:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   826d8:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
   826da:	4b7f      	ldr	r3, [pc, #508]	; (828d8 <UOTGHS_Handler+0x588>)
   826dc:	4798      	blx	r3
   826de:	e651      	b.n	82384 <UOTGHS_Handler+0x34>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   826e0:	4b7e      	ldr	r3, [pc, #504]	; (828dc <UOTGHS_Handler+0x58c>)
   826e2:	2201      	movs	r2, #1
   826e4:	f849 2003 	str.w	r2, [r9, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   826e8:	4974      	ldr	r1, [pc, #464]	; (828bc <UOTGHS_Handler+0x56c>)
   826ea:	f849 2001 	str.w	r2, [r9, r1]
				udd_ack_fifocon(ep);
   826ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   826f2:	f849 2003 	str.w	r2, [r9, r3]
		ptr_job = &udd_ep_job[ep - 1];
   826f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   826fa:	4602      	mov	r2, r0
   826fc:	2100      	movs	r1, #0
   826fe:	4875      	ldr	r0, [pc, #468]	; (828d4 <UOTGHS_Handler+0x584>)
   82700:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
   82704:	4b76      	ldr	r3, [pc, #472]	; (828e0 <UOTGHS_Handler+0x590>)
   82706:	4798      	blx	r3
   82708:	e63c      	b.n	82384 <UOTGHS_Handler+0x34>
   8270a:	3301      	adds	r3, #1
   8270c:	3604      	adds	r6, #4
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8270e:	2b07      	cmp	r3, #7
   82710:	f000 80f8 	beq.w	82904 <UOTGHS_Handler+0x5b4>
   82714:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
   82716:	461d      	mov	r5, r3
   82718:	1e5f      	subs	r7, r3, #1
   8271a:	46b8      	mov	r8, r7
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8271c:	6914      	ldr	r4, [r2, #16]
   8271e:	fa0e f107 	lsl.w	r1, lr, r7
   82722:	420c      	tst	r4, r1
   82724:	d002      	beq.n	8272c <UOTGHS_Handler+0x3dc>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   82726:	6854      	ldr	r4, [r2, #4]
   82728:	4221      	tst	r1, r4
   8272a:	d1c0      	bne.n	826ae <UOTGHS_Handler+0x35e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8272c:	6911      	ldr	r1, [r2, #16]
   8272e:	fa0c f505 	lsl.w	r5, ip, r5
   82732:	4229      	tst	r1, r5
   82734:	d0e9      	beq.n	8270a <UOTGHS_Handler+0x3ba>
   82736:	ea4f 0983 	mov.w	r9, r3, lsl #2
   8273a:	f106 0490 	add.w	r4, r6, #144	; 0x90
			if (Is_udd_in_send_interrupt_enabled(ep)
   8273e:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
   82742:	f011 0f01 	tst.w	r1, #1
   82746:	d003      	beq.n	82750 <UOTGHS_Handler+0x400>
					&& Is_udd_in_send(ep)) {
   82748:	6831      	ldr	r1, [r6, #0]
   8274a:	f011 0f01 	tst.w	r1, #1
   8274e:	d1c7      	bne.n	826e0 <UOTGHS_Handler+0x390>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   82750:	6821      	ldr	r1, [r4, #0]
   82752:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   82756:	d0d8      	beq.n	8270a <UOTGHS_Handler+0x3ba>
					&& (0 == udd_nb_busy_bank(ep))) {
   82758:	6831      	ldr	r1, [r6, #0]
   8275a:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   8275e:	d1d4      	bne.n	8270a <UOTGHS_Handler+0x3ba>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   82760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82764:	4b5d      	ldr	r3, [pc, #372]	; (828dc <UOTGHS_Handler+0x58c>)
   82766:	f849 2003 	str.w	r2, [r9, r3]
				udd_disable_endpoint_interrupt(ep);
   8276a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   8276e:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   82770:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   82774:	4b57      	ldr	r3, [pc, #348]	; (828d4 <UOTGHS_Handler+0x584>)
   82776:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   8277a:	f898 2014 	ldrb.w	r2, [r8, #20]
   8277e:	f36f 0282 	bfc	r2, #2, #1
   82782:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   82786:	4a57      	ldr	r2, [pc, #348]	; (828e4 <UOTGHS_Handler+0x594>)
   82788:	f859 3002 	ldr.w	r3, [r9, r2]
   8278c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   82790:	f849 3002 	str.w	r3, [r9, r2]
				udd_enable_stall_handshake(ep);
   82794:	4b4b      	ldr	r3, [pc, #300]	; (828c4 <UOTGHS_Handler+0x574>)
   82796:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8279a:	f849 2003 	str.w	r2, [r9, r3]
				udd_reset_data_toggle(ep);
   8279e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   827a2:	f849 2003 	str.w	r2, [r9, r3]
   827a6:	e5ed      	b.n	82384 <UOTGHS_Handler+0x34>
		udd_ack_reset();
   827a8:	2208      	movs	r2, #8
   827aa:	4b49      	ldr	r3, [pc, #292]	; (828d0 <UOTGHS_Handler+0x580>)
   827ac:	609a      	str	r2, [r3, #8]
   827ae:	4d49      	ldr	r5, [pc, #292]	; (828d4 <UOTGHS_Handler+0x584>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   827b0:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   827b2:	2701      	movs	r7, #1
   827b4:	4e4a      	ldr	r6, [pc, #296]	; (828e0 <UOTGHS_Handler+0x590>)
   827b6:	3401      	adds	r4, #1
   827b8:	b2e4      	uxtb	r4, r4
   827ba:	4622      	mov	r2, r4
   827bc:	4639      	mov	r1, r7
   827be:	4628      	mov	r0, r5
   827c0:	47b0      	blx	r6
   827c2:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   827c4:	2c06      	cmp	r4, #6
   827c6:	d1f6      	bne.n	827b6 <UOTGHS_Handler+0x466>
		udc_reset();
   827c8:	4b47      	ldr	r3, [pc, #284]	; (828e8 <UOTGHS_Handler+0x598>)
   827ca:	4798      	blx	r3
	udd_configure_address(0);
   827cc:	4b40      	ldr	r3, [pc, #256]	; (828d0 <UOTGHS_Handler+0x580>)
   827ce:	681a      	ldr	r2, [r3, #0]
   827d0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   827d4:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   827d6:	681a      	ldr	r2, [r3, #0]
   827d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   827dc:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   827de:	4941      	ldr	r1, [pc, #260]	; (828e4 <UOTGHS_Handler+0x594>)
   827e0:	680a      	ldr	r2, [r1, #0]
   827e2:	f422 52cb 	bic.w	r2, r2, #6496	; 0x1960
   827e6:	f022 021c 	bic.w	r2, r2, #28
   827ea:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   827ee:	600a      	str	r2, [r1, #0]
	udd_allocate_memory(0);
   827f0:	680a      	ldr	r2, [r1, #0]
   827f2:	f042 0202 	orr.w	r2, r2, #2
   827f6:	600a      	str	r2, [r1, #0]
	udd_enable_endpoint(0);
   827f8:	69da      	ldr	r2, [r3, #28]
   827fa:	f042 0201 	orr.w	r2, r2, #1
   827fe:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82800:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82804:	fab2 f282 	clz	r2, r2
   82808:	0952      	lsrs	r2, r2, #5
   8280a:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   8280c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8280e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82812:	2100      	movs	r1, #0
   82814:	4a35      	ldr	r2, [pc, #212]	; (828ec <UOTGHS_Handler+0x59c>)
   82816:	7011      	strb	r1, [r2, #0]
	return flags;
   82818:	9903      	ldr	r1, [sp, #12]
	udd_enable_setup_received_interrupt(0);
   8281a:	4a2a      	ldr	r2, [pc, #168]	; (828c4 <UOTGHS_Handler+0x574>)
   8281c:	2004      	movs	r0, #4
   8281e:	6010      	str	r0, [r2, #0]
	udd_enable_out_received_interrupt(0);
   82820:	2002      	movs	r0, #2
   82822:	6010      	str	r0, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   82824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82828:	619a      	str	r2, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
   8282a:	b129      	cbz	r1, 82838 <UOTGHS_Handler+0x4e8>
		cpu_irq_enable();
   8282c:	2201      	movs	r2, #1
   8282e:	4b2f      	ldr	r3, [pc, #188]	; (828ec <UOTGHS_Handler+0x59c>)
   82830:	701a      	strb	r2, [r3, #0]
   82832:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82836:	b662      	cpsie	i
		udd_ctrl_init();
   82838:	4b2d      	ldr	r3, [pc, #180]	; (828f0 <UOTGHS_Handler+0x5a0>)
   8283a:	4798      	blx	r3
		goto udd_interrupt_end;
   8283c:	e5a2      	b.n	82384 <UOTGHS_Handler+0x34>
		otg_unfreeze_clock();
   8283e:	4b24      	ldr	r3, [pc, #144]	; (828d0 <UOTGHS_Handler+0x580>)
   82840:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82844:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82848:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
   8284c:	2201      	movs	r2, #1
   8284e:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   82850:	2210      	movs	r2, #16
   82852:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   82854:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   8285c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   82860:	2000      	movs	r0, #0
   82862:	4b24      	ldr	r3, [pc, #144]	; (828f4 <UOTGHS_Handler+0x5a4>)
   82864:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   82866:	4b24      	ldr	r3, [pc, #144]	; (828f8 <UOTGHS_Handler+0x5a8>)
   82868:	4798      	blx	r3
		goto udd_interrupt_end;
   8286a:	e58b      	b.n	82384 <UOTGHS_Handler+0x34>
	if (Is_otg_vbus_transition()) {
   8286c:	4b18      	ldr	r3, [pc, #96]	; (828d0 <UOTGHS_Handler+0x580>)
   8286e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   82872:	f013 0f02 	tst.w	r3, #2
   82876:	f43f ad85 	beq.w	82384 <UOTGHS_Handler+0x34>
		otg_unfreeze_clock();
   8287a:	4b15      	ldr	r3, [pc, #84]	; (828d0 <UOTGHS_Handler+0x580>)
   8287c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82880:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82884:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   82888:	2202      	movs	r2, #2
   8288a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   8288e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82896:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		if (Is_otg_vbus_high()) {
   8289a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   8289e:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   828a2:	bf14      	ite	ne
   828a4:	4b15      	ldrne	r3, [pc, #84]	; (828fc <UOTGHS_Handler+0x5ac>)
			udd_detach();
   828a6:	4b16      	ldreq	r3, [pc, #88]	; (82900 <UOTGHS_Handler+0x5b0>)
   828a8:	4798      	blx	r3
   828aa:	e56b      	b.n	82384 <UOTGHS_Handler+0x34>
   828ac:	20071920 	.word	0x20071920
   828b0:	20071862 	.word	0x20071862
   828b4:	20071860 	.word	0x20071860
   828b8:	00081c89 	.word	0x00081c89
   828bc:	400ac160 	.word	0x400ac160
   828c0:	20071864 	.word	0x20071864
   828c4:	400ac1f0 	.word	0x400ac1f0
   828c8:	00081ca1 	.word	0x00081ca1
   828cc:	400ac300 	.word	0x400ac300
   828d0:	400ac000 	.word	0x400ac000
   828d4:	20071868 	.word	0x20071868
   828d8:	00081eb9 	.word	0x00081eb9
   828dc:	400ac220 	.word	0x400ac220
   828e0:	00081e81 	.word	0x00081e81
   828e4:	400ac100 	.word	0x400ac100
   828e8:	00080da5 	.word	0x00080da5
   828ec:	2007031c 	.word	0x2007031c
   828f0:	00081c2d 	.word	0x00081c2d
   828f4:	00082061 	.word	0x00082061
   828f8:	00083409 	.word	0x00083409
   828fc:	00082291 	.word	0x00082291
   82900:	0008231d 	.word	0x0008231d
	if (Is_udd_reset()) {
   82904:	4b1a      	ldr	r3, [pc, #104]	; (82970 <UOTGHS_Handler+0x620>)
   82906:	685b      	ldr	r3, [r3, #4]
   82908:	f013 0f08 	tst.w	r3, #8
   8290c:	f47f af4c 	bne.w	827a8 <UOTGHS_Handler+0x458>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   82910:	4b17      	ldr	r3, [pc, #92]	; (82970 <UOTGHS_Handler+0x620>)
   82912:	691b      	ldr	r3, [r3, #16]
   82914:	f013 0f01 	tst.w	r3, #1
   82918:	d004      	beq.n	82924 <UOTGHS_Handler+0x5d4>
   8291a:	4b15      	ldr	r3, [pc, #84]	; (82970 <UOTGHS_Handler+0x620>)
   8291c:	685b      	ldr	r3, [r3, #4]
   8291e:	f013 0f01 	tst.w	r3, #1
   82922:	d18c      	bne.n	8283e <UOTGHS_Handler+0x4ee>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   82924:	4b12      	ldr	r3, [pc, #72]	; (82970 <UOTGHS_Handler+0x620>)
   82926:	691b      	ldr	r3, [r3, #16]
   82928:	f013 0f10 	tst.w	r3, #16
   8292c:	d09e      	beq.n	8286c <UOTGHS_Handler+0x51c>
   8292e:	4b10      	ldr	r3, [pc, #64]	; (82970 <UOTGHS_Handler+0x620>)
   82930:	685b      	ldr	r3, [r3, #4]
   82932:	f013 0f10 	tst.w	r3, #16
   82936:	d099      	beq.n	8286c <UOTGHS_Handler+0x51c>
		otg_unfreeze_clock();
   82938:	4a0d      	ldr	r2, [pc, #52]	; (82970 <UOTGHS_Handler+0x620>)
   8293a:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   8293e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   82942:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
   82946:	4613      	mov	r3, r2
   82948:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   8294c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   82950:	d103      	bne.n	8295a <UOTGHS_Handler+0x60a>
			if (Is_udd_suspend()) {
   82952:	685a      	ldr	r2, [r3, #4]
   82954:	f012 0f01 	tst.w	r2, #1
   82958:	d0f6      	beq.n	82948 <UOTGHS_Handler+0x5f8>
		udd_disable_wake_up_interrupt();
   8295a:	4b05      	ldr	r3, [pc, #20]	; (82970 <UOTGHS_Handler+0x620>)
   8295c:	2210      	movs	r2, #16
   8295e:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   82960:	2001      	movs	r0, #1
   82962:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   82964:	4b03      	ldr	r3, [pc, #12]	; (82974 <UOTGHS_Handler+0x624>)
   82966:	4798      	blx	r3
		UDC_RESUME_EVENT();
   82968:	4b03      	ldr	r3, [pc, #12]	; (82978 <UOTGHS_Handler+0x628>)
   8296a:	4798      	blx	r3
		goto udd_interrupt_end;
   8296c:	e50a      	b.n	82384 <UOTGHS_Handler+0x34>
   8296e:	bf00      	nop
   82970:	400ac000 	.word	0x400ac000
   82974:	00082061 	.word	0x00082061
   82978:	00083415 	.word	0x00083415

0008297c <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   8297c:	4b03      	ldr	r3, [pc, #12]	; (8298c <udd_is_high_speed+0x10>)
   8297e:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
}
   82982:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   82986:	bf18      	it	ne
   82988:	2001      	movne	r0, #1
   8298a:	4770      	bx	lr
   8298c:	400ac000 	.word	0x400ac000

00082990 <udd_set_address>:
	udd_disable_address();
   82990:	4b08      	ldr	r3, [pc, #32]	; (829b4 <udd_set_address+0x24>)
   82992:	681a      	ldr	r2, [r3, #0]
   82994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   82998:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   8299a:	681a      	ldr	r2, [r3, #0]
   8299c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   829a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   829a4:	4302      	orrs	r2, r0
   829a6:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   829a8:	681a      	ldr	r2, [r3, #0]
   829aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   829ae:	601a      	str	r2, [r3, #0]
   829b0:	4770      	bx	lr
   829b2:	bf00      	nop
   829b4:	400ac000 	.word	0x400ac000

000829b8 <udd_getaddress>:
	return udd_get_configured_address();
   829b8:	4b02      	ldr	r3, [pc, #8]	; (829c4 <udd_getaddress+0xc>)
   829ba:	6818      	ldr	r0, [r3, #0]
}
   829bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   829c0:	4770      	bx	lr
   829c2:	bf00      	nop
   829c4:	400ac000 	.word	0x400ac000

000829c8 <udd_get_frame_number>:
	return udd_frame_number();
   829c8:	4b02      	ldr	r3, [pc, #8]	; (829d4 <udd_get_frame_number+0xc>)
   829ca:	6a18      	ldr	r0, [r3, #32]
}
   829cc:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   829d0:	4770      	bx	lr
   829d2:	bf00      	nop
   829d4:	400ac000 	.word	0x400ac000

000829d8 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   829d8:	4b02      	ldr	r3, [pc, #8]	; (829e4 <udd_get_micro_frame_number+0xc>)
   829da:	6a18      	ldr	r0, [r3, #32]
}
   829dc:	f3c0 000d 	ubfx	r0, r0, #0, #14
   829e0:	4770      	bx	lr
   829e2:	bf00      	nop
   829e4:	400ac000 	.word	0x400ac000

000829e8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   829e8:	4b01      	ldr	r3, [pc, #4]	; (829f0 <udd_set_setup_payload+0x8>)
   829ea:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   829ec:	8199      	strh	r1, [r3, #12]
   829ee:	4770      	bx	lr
   829f0:	20071920 	.word	0x20071920

000829f4 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   829f4:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   829f8:	2a06      	cmp	r2, #6
   829fa:	d900      	bls.n	829fe <udd_ep_free+0xa>
   829fc:	4770      	bx	lr
{
   829fe:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   82a00:	4810      	ldr	r0, [pc, #64]	; (82a44 <udd_ep_free+0x50>)
   82a02:	69c3      	ldr	r3, [r0, #28]
   82a04:	2101      	movs	r1, #1
   82a06:	fa01 f402 	lsl.w	r4, r1, r2
   82a0a:	ea23 0304 	bic.w	r3, r3, r4
   82a0e:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
   82a10:	f500 7080 	add.w	r0, r0, #256	; 0x100
   82a14:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   82a18:	f023 0302 	bic.w	r3, r3, #2
   82a1c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82a20:	1e56      	subs	r6, r2, #1
   82a22:	4c09      	ldr	r4, [pc, #36]	; (82a48 <udd_ep_free+0x54>)
   82a24:	fa06 f501 	lsl.w	r5, r6, r1
   82a28:	19a8      	adds	r0, r5, r6
   82a2a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   82a2e:	4b07      	ldr	r3, [pc, #28]	; (82a4c <udd_ep_free+0x58>)
   82a30:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   82a32:	4435      	add	r5, r6
   82a34:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   82a38:	7d23      	ldrb	r3, [r4, #20]
   82a3a:	f36f 0382 	bfc	r3, #2, #1
   82a3e:	7523      	strb	r3, [r4, #20]
   82a40:	bd70      	pop	{r4, r5, r6, pc}
   82a42:	bf00      	nop
   82a44:	400ac000 	.word	0x400ac000
   82a48:	20071868 	.word	0x20071868
   82a4c:	00081e81 	.word	0x00081e81

00082a50 <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
   82a50:	f000 000f 	and.w	r0, r0, #15
   82a54:	4b02      	ldr	r3, [pc, #8]	; (82a60 <udd_ep_is_halted+0x10>)
   82a56:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   82a5a:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   82a5e:	4770      	bx	lr
   82a60:	400ac1c0 	.word	0x400ac1c0

00082a64 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82a64:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   82a68:	2b06      	cmp	r3, #6
   82a6a:	d85d      	bhi.n	82b28 <udd_ep_set_halt+0xc4>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   82a6c:	4a35      	ldr	r2, [pc, #212]	; (82b44 <udd_ep_set_halt+0xe0>)
   82a6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82a72:	f412 2f00 	tst.w	r2, #524288	; 0x80000
   82a76:	d159      	bne.n	82b2c <udd_ep_set_halt+0xc8>
{
   82a78:	b410      	push	{r4}
   82a7a:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82a7c:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   82a7e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   82a82:	4a31      	ldr	r2, [pc, #196]	; (82b48 <udd_ep_set_halt+0xe4>)
   82a84:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   82a88:	7d12      	ldrb	r2, [r2, #20]
   82a8a:	f012 0f04 	tst.w	r2, #4
   82a8e:	d14f      	bne.n	82b30 <udd_ep_set_halt+0xcc>
	if (ptr_job->busy == true) {
   82a90:	f012 0f01 	tst.w	r2, #1
   82a94:	d150      	bne.n	82b38 <udd_ep_set_halt+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82a96:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82a9a:	fab2 f282 	clz	r2, r2
   82a9e:	0952      	lsrs	r2, r2, #5
   82aa0:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82aa2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82aa4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82aa8:	2400      	movs	r4, #0
   82aaa:	4a28      	ldr	r2, [pc, #160]	; (82b4c <udd_ep_set_halt+0xe8>)
   82aac:	7014      	strb	r4, [r2, #0]
	return flags;
   82aae:	9c01      	ldr	r4, [sp, #4]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82ab0:	f010 0f80 	tst.w	r0, #128	; 0x80
   82ab4:	d118      	bne.n	82ae8 <udd_ep_set_halt+0x84>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   82ab6:	4926      	ldr	r1, [pc, #152]	; (82b50 <udd_ep_set_halt+0xec>)
   82ab8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   82abc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   82ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
   82ac4:	2140      	movs	r1, #64	; 0x40
   82ac6:	4a23      	ldr	r2, [pc, #140]	; (82b54 <udd_ep_set_halt+0xf0>)
   82ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   82acc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   82ad0:	3290      	adds	r2, #144	; 0x90
   82ad2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
   82ad6:	2c00      	cmp	r4, #0
   82ad8:	d032      	beq.n	82b40 <udd_ep_set_halt+0xdc>
		cpu_irq_enable();
   82ada:	2001      	movs	r0, #1
   82adc:	4b1b      	ldr	r3, [pc, #108]	; (82b4c <udd_ep_set_halt+0xe8>)
   82ade:	7018      	strb	r0, [r3, #0]
   82ae0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82ae4:	b662      	cpsie	i
   82ae6:	e024      	b.n	82b32 <udd_ep_set_halt+0xce>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82ae8:	4a1b      	ldr	r2, [pc, #108]	; (82b58 <udd_ep_set_halt+0xf4>)
   82aea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82aee:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   82af2:	d0e0      	beq.n	82ab6 <udd_ep_set_halt+0x52>
		ptr_job->stall_requested = true;
   82af4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   82af8:	4a13      	ldr	r2, [pc, #76]	; (82b48 <udd_ep_set_halt+0xe4>)
   82afa:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   82afe:	7d0a      	ldrb	r2, [r1, #20]
   82b00:	f042 0204 	orr.w	r2, r2, #4
   82b04:	750a      	strb	r2, [r1, #20]
		udd_enable_bank_interrupt(ep_index);
   82b06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82b0a:	4914      	ldr	r1, [pc, #80]	; (82b5c <udd_ep_set_halt+0xf8>)
   82b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   82b10:	fa02 f303 	lsl.w	r3, r2, r3
   82b14:	4a12      	ldr	r2, [pc, #72]	; (82b60 <udd_ep_set_halt+0xfc>)
   82b16:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
   82b18:	b184      	cbz	r4, 82b3c <udd_ep_set_halt+0xd8>
		cpu_irq_enable();
   82b1a:	2001      	movs	r0, #1
   82b1c:	4b0b      	ldr	r3, [pc, #44]	; (82b4c <udd_ep_set_halt+0xe8>)
   82b1e:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   82b20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82b24:	b662      	cpsie	i
   82b26:	e004      	b.n	82b32 <udd_ep_set_halt+0xce>
		return false;
   82b28:	2000      	movs	r0, #0
   82b2a:	4770      	bx	lr
		return true; // Already STALL
   82b2c:	2001      	movs	r0, #1
   82b2e:	4770      	bx	lr
   82b30:	2001      	movs	r0, #1
}
   82b32:	b003      	add	sp, #12
   82b34:	bc10      	pop	{r4}
   82b36:	4770      	bx	lr
		return false; // Job on going, stall impossible
   82b38:	2000      	movs	r0, #0
   82b3a:	e7fa      	b.n	82b32 <udd_ep_set_halt+0xce>
		return true;
   82b3c:	2001      	movs	r0, #1
   82b3e:	e7f8      	b.n	82b32 <udd_ep_set_halt+0xce>
	return true;
   82b40:	2001      	movs	r0, #1
   82b42:	e7f6      	b.n	82b32 <udd_ep_set_halt+0xce>
   82b44:	400ac1c0 	.word	0x400ac1c0
   82b48:	20071868 	.word	0x20071868
   82b4c:	2007031c 	.word	0x2007031c
   82b50:	400ac100 	.word	0x400ac100
   82b54:	400ac160 	.word	0x400ac160
   82b58:	400ac130 	.word	0x400ac130
   82b5c:	400ac1f0 	.word	0x400ac1f0
   82b60:	400ac000 	.word	0x400ac000

00082b64 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82b64:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
   82b68:	2806      	cmp	r0, #6
   82b6a:	d851      	bhi.n	82c10 <udd_ep_clear_halt+0xac>
{
   82b6c:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82b6e:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
   82b70:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   82b74:	4a2c      	ldr	r2, [pc, #176]	; (82c28 <udd_ep_clear_halt+0xc4>)
   82b76:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   82b7a:	7d12      	ldrb	r2, [r2, #20]
   82b7c:	f012 0f04 	tst.w	r2, #4
   82b80:	d048      	beq.n	82c14 <udd_ep_clear_halt+0xb0>
		ptr_job->stall_requested = false;
   82b82:	460a      	mov	r2, r1
   82b84:	4928      	ldr	r1, [pc, #160]	; (82c28 <udd_ep_clear_halt+0xc4>)
   82b86:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   82b8a:	7d11      	ldrb	r1, [r2, #20]
   82b8c:	f36f 0182 	bfc	r1, #2, #1
   82b90:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   82b92:	0082      	lsls	r2, r0, #2
   82b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82b98:	4c24      	ldr	r4, [pc, #144]	; (82c2c <udd_ep_clear_halt+0xc8>)
   82b9a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   82b9e:	4081      	lsls	r1, r0
   82ba0:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
   82ba4:	6161      	str	r1, [r4, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   82ba6:	4922      	ldr	r1, [pc, #136]	; (82c30 <udd_ep_clear_halt+0xcc>)
   82ba8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82bac:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82bb0:	d014      	beq.n	82bdc <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
   82bb2:	4920      	ldr	r1, [pc, #128]	; (82c34 <udd_ep_clear_halt+0xd0>)
   82bb4:	5851      	ldr	r1, [r2, r1]
   82bb6:	f011 0f40 	tst.w	r1, #64	; 0x40
   82bba:	d006      	beq.n	82bca <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
   82bbc:	2040      	movs	r0, #64	; 0x40
   82bbe:	491e      	ldr	r1, [pc, #120]	; (82c38 <udd_ep_clear_halt+0xd4>)
   82bc0:	5050      	str	r0, [r2, r1]
			udd_reset_data_toggle(ep_index);
   82bc2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   82bc6:	3190      	adds	r1, #144	; 0x90
   82bc8:	5050      	str	r0, [r2, r1]
		udd_disable_stall_handshake(ep_index);
   82bca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   82bce:	4917      	ldr	r1, [pc, #92]	; (82c2c <udd_ep_clear_halt+0xc8>)
   82bd0:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   82bd2:	481a      	ldr	r0, [pc, #104]	; (82c3c <udd_ep_clear_halt+0xd8>)
   82bd4:	5811      	ldr	r1, [r2, r0]
   82bd6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   82bda:	5011      	str	r1, [r2, r0]
		if (ptr_job->busy == true) {
   82bdc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   82be0:	4911      	ldr	r1, [pc, #68]	; (82c28 <udd_ep_clear_halt+0xc4>)
   82be2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   82be6:	7d12      	ldrb	r2, [r2, #20]
   82be8:	f012 0f01 	tst.w	r2, #1
   82bec:	d101      	bne.n	82bf2 <udd_ep_clear_halt+0x8e>
	return true;
   82bee:	2001      	movs	r0, #1
   82bf0:	bd10      	pop	{r4, pc}
			ptr_job->busy = false;
   82bf2:	4608      	mov	r0, r1
   82bf4:	0059      	lsls	r1, r3, #1
   82bf6:	18ca      	adds	r2, r1, r3
   82bf8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   82bfc:	7d14      	ldrb	r4, [r2, #20]
   82bfe:	f36f 0400 	bfc	r4, #0, #1
   82c02:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
   82c04:	440b      	add	r3, r1
   82c06:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
   82c0a:	4798      	blx	r3
	return true;
   82c0c:	2001      	movs	r0, #1
   82c0e:	bd10      	pop	{r4, pc}
		return false;
   82c10:	2000      	movs	r0, #0
   82c12:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   82c14:	0082      	lsls	r2, r0, #2
   82c16:	4906      	ldr	r1, [pc, #24]	; (82c30 <udd_ep_clear_halt+0xcc>)
   82c18:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82c1c:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82c20:	d1c7      	bne.n	82bb2 <udd_ep_clear_halt+0x4e>
	return true;
   82c22:	2001      	movs	r0, #1
}
   82c24:	bd10      	pop	{r4, pc}
   82c26:	bf00      	nop
   82c28:	20071868 	.word	0x20071868
   82c2c:	400ac220 	.word	0x400ac220
   82c30:	400ac1c0 	.word	0x400ac1c0
   82c34:	400ac130 	.word	0x400ac130
   82c38:	400ac160 	.word	0x400ac160
   82c3c:	400ac100 	.word	0x400ac100

00082c40 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   82c40:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   82c44:	2806      	cmp	r0, #6
   82c46:	d864      	bhi.n	82d12 <udd_ep_run+0xd2>
{
   82c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   82c4a:	b083      	sub	sp, #12
	if ((!Is_udd_endpoint_enabled(ep))
   82c4c:	4c36      	ldr	r4, [pc, #216]	; (82d28 <udd_ep_run+0xe8>)
   82c4e:	69e5      	ldr	r5, [r4, #28]
   82c50:	2401      	movs	r4, #1
   82c52:	4084      	lsls	r4, r0
   82c54:	422c      	tst	r4, r5
   82c56:	d05e      	beq.n	82d16 <udd_ep_run+0xd6>
			|| Is_udd_endpoint_stall_requested(ep)
   82c58:	4c34      	ldr	r4, [pc, #208]	; (82d2c <udd_ep_run+0xec>)
   82c5a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   82c5e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   82c62:	d15b      	bne.n	82d1c <udd_ep_run+0xdc>
	ptr_job = &udd_ep_job[ep - 1];
   82c64:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   82c66:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   82c6a:	4d31      	ldr	r5, [pc, #196]	; (82d30 <udd_ep_run+0xf0>)
   82c6c:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   82c70:	7d2d      	ldrb	r5, [r5, #20]
   82c72:	f015 0f04 	tst.w	r5, #4
   82c76:	d153      	bne.n	82d20 <udd_ep_run+0xe0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82c78:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82c7c:	fab5 f585 	clz	r5, r5
   82c80:	096d      	lsrs	r5, r5, #5
   82c82:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82c84:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82c86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82c8a:	2600      	movs	r6, #0
   82c8c:	4d29      	ldr	r5, [pc, #164]	; (82d34 <udd_ep_run+0xf4>)
   82c8e:	702e      	strb	r6, [r5, #0]
	return flags;
   82c90:	9f01      	ldr	r7, [sp, #4]
	if (ptr_job->busy == true) {
   82c92:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   82c96:	4e26      	ldr	r6, [pc, #152]	; (82d30 <udd_ep_run+0xf0>)
   82c98:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   82c9c:	7d2d      	ldrb	r5, [r5, #20]
   82c9e:	f015 0f01 	tst.w	r5, #1
   82ca2:	d009      	beq.n	82cb8 <udd_ep_run+0x78>
	if (cpu_irq_is_enabled_flags(flags))
   82ca4:	2f00      	cmp	r7, #0
   82ca6:	d03d      	beq.n	82d24 <udd_ep_run+0xe4>
		cpu_irq_enable();
   82ca8:	2201      	movs	r2, #1
   82caa:	4b22      	ldr	r3, [pc, #136]	; (82d34 <udd_ep_run+0xf4>)
   82cac:	701a      	strb	r2, [r3, #0]
   82cae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82cb2:	b662      	cpsie	i
		return false; // Job already on going
   82cb4:	2000      	movs	r0, #0
   82cb6:	e02f      	b.n	82d18 <udd_ep_run+0xd8>
	ptr_job->busy = true;
   82cb8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   82cbc:	4e1c      	ldr	r6, [pc, #112]	; (82d30 <udd_ep_run+0xf0>)
   82cbe:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   82cc2:	7d2e      	ldrb	r6, [r5, #20]
   82cc4:	f046 0601 	orr.w	r6, r6, #1
   82cc8:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   82cca:	b12f      	cbz	r7, 82cd8 <udd_ep_run+0x98>
		cpu_irq_enable();
   82ccc:	2601      	movs	r6, #1
   82cce:	4d19      	ldr	r5, [pc, #100]	; (82d34 <udd_ep_run+0xf4>)
   82cd0:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   82cd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82cd6:	b662      	cpsie	i
	ptr_job->buf = buf;
   82cd8:	4f15      	ldr	r7, [pc, #84]	; (82d30 <udd_ep_run+0xf0>)
   82cda:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   82cde:	00ed      	lsls	r5, r5, #3
   82ce0:	197e      	adds	r6, r7, r5
   82ce2:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   82ce4:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   82ce6:	2200      	movs	r2, #0
   82ce8:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   82cea:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   82cec:	9a08      	ldr	r2, [sp, #32]
   82cee:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   82cf0:	b911      	cbnz	r1, 82cf8 <udd_ep_run+0xb8>
   82cf2:	fab3 f183 	clz	r1, r3
   82cf6:	0949      	lsrs	r1, r1, #5
   82cf8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   82cfc:	4b0c      	ldr	r3, [pc, #48]	; (82d30 <udd_ep_run+0xf0>)
   82cfe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   82d02:	7d23      	ldrb	r3, [r4, #20]
   82d04:	f361 0341 	bfi	r3, r1, #1, #1
   82d08:	7523      	strb	r3, [r4, #20]
	udd_ep_trans_done(ep);
   82d0a:	4b0b      	ldr	r3, [pc, #44]	; (82d38 <udd_ep_run+0xf8>)
   82d0c:	4798      	blx	r3
	return true;
   82d0e:	2001      	movs	r0, #1
   82d10:	e002      	b.n	82d18 <udd_ep_run+0xd8>
		return false;
   82d12:	2000      	movs	r0, #0
   82d14:	4770      	bx	lr
		return false; // Endpoint is halted
   82d16:	2000      	movs	r0, #0
}
   82d18:	b003      	add	sp, #12
   82d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   82d1c:	2000      	movs	r0, #0
   82d1e:	e7fb      	b.n	82d18 <udd_ep_run+0xd8>
   82d20:	2000      	movs	r0, #0
   82d22:	e7f9      	b.n	82d18 <udd_ep_run+0xd8>
		return false; // Job already on going
   82d24:	2000      	movs	r0, #0
   82d26:	e7f7      	b.n	82d18 <udd_ep_run+0xd8>
   82d28:	400ac000 	.word	0x400ac000
   82d2c:	400ac1c0 	.word	0x400ac1c0
   82d30:	20071868 	.word	0x20071868
   82d34:	2007031c 	.word	0x2007031c
   82d38:	00081eb9 	.word	0x00081eb9

00082d3c <udd_ep_alloc>:
{
   82d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82d40:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   82d42:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   82d46:	2c06      	cmp	r4, #6
   82d48:	f200 80dd 	bhi.w	82f06 <udd_ep_alloc+0x1ca>
	if (Is_udd_endpoint_enabled(ep)) {
   82d4c:	4b73      	ldr	r3, [pc, #460]	; (82f1c <udd_ep_alloc+0x1e0>)
   82d4e:	69dd      	ldr	r5, [r3, #28]
   82d50:	2301      	movs	r3, #1
   82d52:	40a3      	lsls	r3, r4
   82d54:	402b      	ands	r3, r5
   82d56:	f040 80db 	bne.w	82f10 <udd_ep_alloc+0x1d4>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   82d5a:	f001 0503 	and.w	r5, r1, #3
   82d5e:	2d01      	cmp	r5, #1
   82d60:	d020      	beq.n	82da4 <udd_ep_alloc+0x68>
   82d62:	2d00      	cmp	r5, #0
   82d64:	f000 80d6 	beq.w	82f14 <udd_ep_alloc+0x1d8>
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   82d68:	f04f 0e00 	mov.w	lr, #0
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82d6c:	4e6c      	ldr	r6, [pc, #432]	; (82f20 <udd_ep_alloc+0x1e4>)
   82d6e:	eb06 0584 	add.w	r5, r6, r4, lsl #2
   82d72:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
   82d76:	f427 57cb 	bic.w	r7, r7, #6496	; 0x1960
   82d7a:	f027 071c 	bic.w	r7, r7, #28
   82d7e:	02c9      	lsls	r1, r1, #11
   82d80:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   82d84:	b240      	sxtb	r0, r0
   82d86:	2800      	cmp	r0, #0
   82d88:	bfb8      	it	lt
   82d8a:	f44f 7380 	movlt.w	r3, #256	; 0x100
   82d8e:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
   82d92:	b280      	uxth	r0, r0
   82d94:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
   82d98:	d307      	bcc.n	82daa <udd_ep_alloc+0x6e>
   82d9a:	2a08      	cmp	r2, #8
   82d9c:	d924      	bls.n	82de8 <udd_ep_alloc+0xac>
   82d9e:	0052      	lsls	r2, r2, #1
   82da0:	3a01      	subs	r2, #1
   82da2:	e004      	b.n	82dae <udd_ep_alloc+0x72>
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   82da4:	f04f 0e01 	mov.w	lr, #1
   82da8:	e7e0      	b.n	82d6c <udd_ep_alloc+0x30>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82daa:	f240 72ff 	movw	r2, #2047	; 0x7ff
   82dae:	fab2 f282 	clz	r2, r2
   82db2:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
   82db6:	4319      	orrs	r1, r3
   82db8:	f1c2 031c 	rsb	r3, r2, #28
   82dbc:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
   82dc0:	f423 63d0 	bic.w	r3, r3, #1664	; 0x680
   82dc4:	f023 0303 	bic.w	r3, r3, #3
   82dc8:	04db      	lsls	r3, r3, #19
   82dca:	0cdb      	lsrs	r3, r3, #19
   82dcc:	433b      	orrs	r3, r7
   82dce:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	ep_allocated = 1 << ep;
   82dd2:	2701      	movs	r7, #1
   82dd4:	40a7      	lsls	r7, r4
   82dd6:	b2bf      	uxth	r7, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   82dd8:	2c05      	cmp	r4, #5
   82dda:	d81c      	bhi.n	82e16 <udd_ep_alloc+0xda>
   82ddc:	4a51      	ldr	r2, [pc, #324]	; (82f24 <udd_ep_alloc+0x1e8>)
   82dde:	2306      	movs	r3, #6
		if (Is_udd_endpoint_enabled(i)) {
   82de0:	484e      	ldr	r0, [pc, #312]	; (82f1c <udd_ep_alloc+0x1e0>)
   82de2:	f04f 0e01 	mov.w	lr, #1
   82de6:	e006      	b.n	82df6 <udd_ep_alloc+0xba>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82de8:	220f      	movs	r2, #15
   82dea:	e7e0      	b.n	82dae <udd_ep_alloc+0x72>
   82dec:	3b01      	subs	r3, #1
   82dee:	3a04      	subs	r2, #4
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   82df0:	b2d9      	uxtb	r1, r3
   82df2:	428c      	cmp	r4, r1
   82df4:	d20f      	bcs.n	82e16 <udd_ep_alloc+0xda>
		if (Is_udd_endpoint_enabled(i)) {
   82df6:	69c6      	ldr	r6, [r0, #28]
   82df8:	fa0e f103 	lsl.w	r1, lr, r3
   82dfc:	420e      	tst	r6, r1
   82dfe:	d0f5      	beq.n	82dec <udd_ep_alloc+0xb0>
			ep_allocated |= 1 << i;
   82e00:	430f      	orrs	r7, r1
   82e02:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   82e04:	69c6      	ldr	r6, [r0, #28]
   82e06:	ea26 0101 	bic.w	r1, r6, r1
   82e0a:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
   82e0c:	6811      	ldr	r1, [r2, #0]
   82e0e:	f021 0102 	bic.w	r1, r1, #2
   82e12:	6011      	str	r1, [r2, #0]
   82e14:	e7ea      	b.n	82dec <udd_ep_alloc+0xb0>
   82e16:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   82e1a:	4e43      	ldr	r6, [pc, #268]	; (82f28 <udd_ep_alloc+0x1ec>)
   82e1c:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
			bool b_restart = ptr_job->busy;
   82e20:	f8df 9104 	ldr.w	r9, [pc, #260]	; 82f28 <udd_ep_alloc+0x1ec>
			udd_enable_endpoint(i);
   82e24:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 82f1c <udd_ep_alloc+0x1e0>
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   82e28:	f8df a100 	ldr.w	sl, [pc, #256]	; 82f2c <udd_ep_alloc+0x1f0>
   82e2c:	e01d      	b.n	82e6a <udd_ep_alloc+0x12e>
				if (NULL == ptr_job->call_trans) {
   82e2e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   82e32:	4a3d      	ldr	r2, [pc, #244]	; (82f28 <udd_ep_alloc+0x1ec>)
   82e34:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   82e38:	2c00      	cmp	r4, #0
   82e3a:	d06d      	beq.n	82f18 <udd_ep_alloc+0x1dc>
				if (Is_udd_endpoint_in(i)) {
   82e3c:	682b      	ldr	r3, [r5, #0]
   82e3e:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
   82e42:	bf18      	it	ne
   82e44:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   82e48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   82e4c:	4b36      	ldr	r3, [pc, #216]	; (82f28 <udd_ep_alloc+0x1ec>)
   82e4e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82e52:	4602      	mov	r2, r0
   82e54:	68c9      	ldr	r1, [r1, #12]
   82e56:	2001      	movs	r0, #1
   82e58:	47a0      	blx	r4
				return false;
   82e5a:	2300      	movs	r3, #0
   82e5c:	e054      	b.n	82f08 <udd_ep_alloc+0x1cc>
   82e5e:	3401      	adds	r4, #1
   82e60:	3504      	adds	r5, #4
   82e62:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82e64:	b2e3      	uxtb	r3, r4
   82e66:	2b06      	cmp	r3, #6
   82e68:	d84b      	bhi.n	82f02 <udd_ep_alloc+0x1c6>
   82e6a:	b2e0      	uxtb	r0, r4
		if (ep_allocated & (1 << i)) {
   82e6c:	fa47 f304 	asr.w	r3, r7, r4
   82e70:	f013 0f01 	tst.w	r3, #1
   82e74:	d0f3      	beq.n	82e5e <udd_ep_alloc+0x122>
   82e76:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
   82e78:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   82e7c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   82e80:	f893 e014 	ldrb.w	lr, [r3, #20]
   82e84:	f00e 0201 	and.w	r2, lr, #1
			ptr_job->busy = false;
   82e88:	f36f 0e00 	bfc	lr, #0, #1
   82e8c:	f883 e014 	strb.w	lr, [r3, #20]
			udd_allocate_memory(i);
   82e90:	682b      	ldr	r3, [r5, #0]
   82e92:	f043 0302 	orr.w	r3, r3, #2
   82e96:	602b      	str	r3, [r5, #0]
			udd_enable_endpoint(i);
   82e98:	f8d8 e01c 	ldr.w	lr, [r8, #28]
   82e9c:	2301      	movs	r3, #1
   82e9e:	40a3      	lsls	r3, r4
   82ea0:	ea43 030e 	orr.w	r3, r3, lr
   82ea4:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   82ea8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82eaa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   82eae:	d0be      	beq.n	82e2e <udd_ep_alloc+0xf2>
			udd_enable_endpoint_bank_autoswitch(i);
   82eb0:	682b      	ldr	r3, [r5, #0]
   82eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   82eb6:	602b      	str	r3, [r5, #0]
			if (b_restart) {
   82eb8:	2a00      	cmp	r2, #0
   82eba:	d0d0      	beq.n	82e5e <udd_ep_alloc+0x122>
				ptr_job->buf_cnt -= ptr_job->buf_load;
   82ebc:	f856 3c0c 	ldr.w	r3, [r6, #-12]
   82ec0:	f856 2c08 	ldr.w	r2, [r6, #-8]
   82ec4:	1a9a      	subs	r2, r3, r2
   82ec6:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   82eca:	682b      	ldr	r3, [r5, #0]
   82ecc:	f413 7f80 	tst.w	r3, #256	; 0x100
   82ed0:	bf18      	it	ne
   82ed2:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
   82ed6:	f856 bc10 	ldr.w	fp, [r6, #-16]
   82eda:	f856 cc14 	ldr.w	ip, [r6, #-20]
						ptr_job->b_shortpacket,
   82ede:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   82ee2:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
   82ee6:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   82ee8:	f856 3c18 	ldr.w	r3, [r6, #-24]
   82eec:	9300      	str	r3, [sp, #0]
   82eee:	ebab 0302 	sub.w	r3, fp, r2
   82ef2:	4462      	add	r2, ip
   82ef4:	f3c1 0140 	ubfx	r1, r1, #1, #1
   82ef8:	47d0      	blx	sl
				if (!b_restart) {
   82efa:	4603      	mov	r3, r0
   82efc:	2800      	cmp	r0, #0
   82efe:	d1ae      	bne.n	82e5e <udd_ep_alloc+0x122>
   82f00:	e002      	b.n	82f08 <udd_ep_alloc+0x1cc>
	return true;
   82f02:	2301      	movs	r3, #1
   82f04:	e000      	b.n	82f08 <udd_ep_alloc+0x1cc>
		return false;
   82f06:	2300      	movs	r3, #0
}
   82f08:	4618      	mov	r0, r3
   82f0a:	b003      	add	sp, #12
   82f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   82f10:	2300      	movs	r3, #0
   82f12:	e7f9      	b.n	82f08 <udd_ep_alloc+0x1cc>
		return false;
   82f14:	2300      	movs	r3, #0
   82f16:	e7f7      	b.n	82f08 <udd_ep_alloc+0x1cc>
					return false;
   82f18:	2300      	movs	r3, #0
   82f1a:	e7f5      	b.n	82f08 <udd_ep_alloc+0x1cc>
   82f1c:	400ac000 	.word	0x400ac000
   82f20:	400ac100 	.word	0x400ac100
   82f24:	400ac118 	.word	0x400ac118
   82f28:	20071868 	.word	0x20071868
   82f2c:	00082c41 	.word	0x00082c41

00082f30 <udd_ep_abort>:
{
   82f30:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82f32:	f000 020f 	and.w	r2, r0, #15
		udd_disable_endpoint_dma_interrupt(ep_index);
   82f36:	1e54      	subs	r4, r2, #1
   82f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   82f3c:	40a3      	lsls	r3, r4
   82f3e:	4916      	ldr	r1, [pc, #88]	; (82f98 <udd_ep_abort+0x68>)
   82f40:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   82f42:	4b16      	ldr	r3, [pc, #88]	; (82f9c <udd_ep_abort+0x6c>)
   82f44:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   82f48:	2500      	movs	r5, #0
   82f4a:	609d      	str	r5, [r3, #8]
	udd_disable_endpoint_interrupt(ep_index);
   82f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82f50:	4093      	lsls	r3, r2
   82f52:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   82f54:	f010 0f80 	tst.w	r0, #128	; 0x80
   82f58:	d108      	bne.n	82f6c <udd_ep_abort+0x3c>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82f5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   82f5e:	2101      	movs	r1, #1
   82f60:	480f      	ldr	r0, [pc, #60]	; (82fa0 <udd_ep_abort+0x70>)
   82f62:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   82f66:	4b0f      	ldr	r3, [pc, #60]	; (82fa4 <udd_ep_abort+0x74>)
   82f68:	4798      	blx	r3
   82f6a:	bd70      	pop	{r4, r5, r6, pc}
		while(udd_nb_busy_bank(ep_index)) {
   82f6c:	0093      	lsls	r3, r2, #2
   82f6e:	480e      	ldr	r0, [pc, #56]	; (82fa8 <udd_ep_abort+0x78>)
   82f70:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
   82f72:	4d0e      	ldr	r5, [pc, #56]	; (82fac <udd_ep_abort+0x7c>)
   82f74:	441d      	add	r5, r3
   82f76:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   82f7a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   82f7e:	4419      	add	r1, r3
   82f80:	e004      	b.n	82f8c <udd_ep_abort+0x5c>
			udd_kill_last_in_bank(ep_index);
   82f82:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
   82f84:	680b      	ldr	r3, [r1, #0]
   82f86:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   82f8a:	d1fb      	bne.n	82f84 <udd_ep_abort+0x54>
		while(udd_nb_busy_bank(ep_index)) {
   82f8c:	6803      	ldr	r3, [r0, #0]
   82f8e:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   82f92:	d1f6      	bne.n	82f82 <udd_ep_abort+0x52>
   82f94:	e7e1      	b.n	82f5a <udd_ep_abort+0x2a>
   82f96:	bf00      	nop
   82f98:	400ac000 	.word	0x400ac000
   82f9c:	400ac300 	.word	0x400ac300
   82fa0:	20071868 	.word	0x20071868
   82fa4:	00081e81 	.word	0x00081e81
   82fa8:	400ac130 	.word	0x400ac130
   82fac:	400ac1f0 	.word	0x400ac1f0

00082fb0 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   82fb0:	4a05      	ldr	r2, [pc, #20]	; (82fc8 <udd_test_mode_j+0x18>)
   82fb2:	6813      	ldr	r3, [r2, #0]
   82fb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   82fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82fbc:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_j();
   82fbe:	6813      	ldr	r3, [r2, #0]
   82fc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82fc4:	6013      	str	r3, [r2, #0]
   82fc6:	4770      	bx	lr
   82fc8:	400ac000 	.word	0x400ac000

00082fcc <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   82fcc:	4a05      	ldr	r2, [pc, #20]	; (82fe4 <udd_test_mode_k+0x18>)
   82fce:	6813      	ldr	r3, [r2, #0]
   82fd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   82fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82fd8:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_k();
   82fda:	6813      	ldr	r3, [r2, #0]
   82fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   82fe0:	6013      	str	r3, [r2, #0]
   82fe2:	4770      	bx	lr
   82fe4:	400ac000 	.word	0x400ac000

00082fe8 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   82fe8:	4a03      	ldr	r2, [pc, #12]	; (82ff8 <udd_test_mode_se0_nak+0x10>)
   82fea:	6813      	ldr	r3, [r2, #0]
   82fec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   82ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82ff4:	6013      	str	r3, [r2, #0]
   82ff6:	4770      	bx	lr
   82ff8:	400ac000 	.word	0x400ac000

00082ffc <udd_test_mode_packet>:
{
   82ffc:	b430      	push	{r4, r5}
   82ffe:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   83000:	466c      	mov	r4, sp
   83002:	4d1f      	ldr	r5, [pc, #124]	; (83080 <udd_test_mode_packet+0x84>)
   83004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8300a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8300c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8300e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83010:	e895 0003 	ldmia.w	r5, {r0, r1}
   83014:	f844 0b04 	str.w	r0, [r4], #4
   83018:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   8301a:	4a1a      	ldr	r2, [pc, #104]	; (83084 <udd_test_mode_packet+0x88>)
   8301c:	69d3      	ldr	r3, [r2, #28]
   8301e:	f023 0301 	bic.w	r3, r3, #1
   83022:	61d3      	str	r3, [r2, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   83024:	4918      	ldr	r1, [pc, #96]	; (83088 <udd_test_mode_packet+0x8c>)
   83026:	680b      	ldr	r3, [r1, #0]
   83028:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   8302c:	f023 031c 	bic.w	r3, r3, #28
   83030:	f443 5389 	orr.w	r3, r3, #4384	; 0x1120
   83034:	f043 0310 	orr.w	r3, r3, #16
   83038:	600b      	str	r3, [r1, #0]
	udd_allocate_memory(0);
   8303a:	680b      	ldr	r3, [r1, #0]
   8303c:	f043 0302 	orr.w	r3, r3, #2
   83040:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   83042:	69d3      	ldr	r3, [r2, #28]
   83044:	f043 0301 	orr.w	r3, r3, #1
   83048:	61d3      	str	r3, [r2, #28]
	udd_enable_hs_test_mode();
   8304a:	6813      	ldr	r3, [r2, #0]
   8304c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   83050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83054:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_packet();
   83056:	6813      	ldr	r3, [r2, #0]
   83058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   8305c:	6013      	str	r3, [r2, #0]
   8305e:	4a0b      	ldr	r2, [pc, #44]	; (8308c <udd_test_mode_packet+0x90>)
	ptr_src = test_packet;
   83060:	466b      	mov	r3, sp
	for (i = 0; i < sizeof(test_packet); i++) {
   83062:	f10d 0035 	add.w	r0, sp, #53	; 0x35
		*ptr_dest++ = *ptr_src++;
   83066:	f813 1b01 	ldrb.w	r1, [r3], #1
   8306a:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   8306e:	4283      	cmp	r3, r0
   83070:	d1f9      	bne.n	83066 <udd_test_mode_packet+0x6a>
	udd_ack_fifocon(0);
   83072:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83076:	4b06      	ldr	r3, [pc, #24]	; (83090 <udd_test_mode_packet+0x94>)
   83078:	601a      	str	r2, [r3, #0]
}
   8307a:	b00e      	add	sp, #56	; 0x38
   8307c:	bc30      	pop	{r4, r5}
   8307e:	4770      	bx	lr
   83080:	00083904 	.word	0x00083904
   83084:	400ac000 	.word	0x400ac000
   83088:	400ac100 	.word	0x400ac100
   8308c:	2017ffff 	.word	0x2017ffff
   83090:	400ac220 	.word	0x400ac220

00083094 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   83094:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   83096:	010b      	lsls	r3, r1, #4
   83098:	4293      	cmp	r3, r2
   8309a:	d914      	bls.n	830c6 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8309c:	00c9      	lsls	r1, r1, #3
   8309e:	084b      	lsrs	r3, r1, #1
   830a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   830a4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   830a8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   830aa:	1e5c      	subs	r4, r3, #1
   830ac:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   830b0:	428c      	cmp	r4, r1
   830b2:	d901      	bls.n	830b8 <usart_set_async_baudrate+0x24>
		return 1;
   830b4:	2001      	movs	r0, #1
   830b6:	e017      	b.n	830e8 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   830b8:	6841      	ldr	r1, [r0, #4]
   830ba:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   830be:	6041      	str	r1, [r0, #4]
   830c0:	e00c      	b.n	830dc <usart_set_async_baudrate+0x48>
		return 1;
   830c2:	2001      	movs	r0, #1
   830c4:	e010      	b.n	830e8 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   830c6:	0859      	lsrs	r1, r3, #1
   830c8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   830cc:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   830d0:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   830d2:	1e5c      	subs	r4, r3, #1
   830d4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   830d8:	428c      	cmp	r4, r1
   830da:	d8f2      	bhi.n	830c2 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   830dc:	0412      	lsls	r2, r2, #16
   830de:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   830e2:	431a      	orrs	r2, r3
   830e4:	6202      	str	r2, [r0, #32]

	return 0;
   830e6:	2000      	movs	r0, #0
}
   830e8:	bc10      	pop	{r4}
   830ea:	4770      	bx	lr

000830ec <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   830ec:	4b08      	ldr	r3, [pc, #32]	; (83110 <usart_reset+0x24>)
   830ee:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   830f2:	2300      	movs	r3, #0
   830f4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   830f6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   830f8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   830fa:	2388      	movs	r3, #136	; 0x88
   830fc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   830fe:	2324      	movs	r3, #36	; 0x24
   83100:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   83102:	f44f 7380 	mov.w	r3, #256	; 0x100
   83106:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   83108:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   8310c:	6003      	str	r3, [r0, #0]
   8310e:	4770      	bx	lr
   83110:	55534100 	.word	0x55534100

00083114 <usart_init_rs232>:
{
   83114:	b570      	push	{r4, r5, r6, lr}
   83116:	4605      	mov	r5, r0
   83118:	460c      	mov	r4, r1
   8311a:	4616      	mov	r6, r2
	usart_reset(p_usart);
   8311c:	4b0f      	ldr	r3, [pc, #60]	; (8315c <usart_init_rs232+0x48>)
   8311e:	4798      	blx	r3
	ul_reg_val = 0;
   83120:	2200      	movs	r2, #0
   83122:	4b0f      	ldr	r3, [pc, #60]	; (83160 <usart_init_rs232+0x4c>)
   83124:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   83126:	b1a4      	cbz	r4, 83152 <usart_init_rs232+0x3e>
   83128:	4632      	mov	r2, r6
   8312a:	6821      	ldr	r1, [r4, #0]
   8312c:	4628      	mov	r0, r5
   8312e:	4b0d      	ldr	r3, [pc, #52]	; (83164 <usart_init_rs232+0x50>)
   83130:	4798      	blx	r3
   83132:	4602      	mov	r2, r0
   83134:	b978      	cbnz	r0, 83156 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83136:	6863      	ldr	r3, [r4, #4]
   83138:	68a1      	ldr	r1, [r4, #8]
   8313a:	430b      	orrs	r3, r1
   8313c:	6921      	ldr	r1, [r4, #16]
   8313e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   83140:	68e1      	ldr	r1, [r4, #12]
   83142:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83144:	4906      	ldr	r1, [pc, #24]	; (83160 <usart_init_rs232+0x4c>)
   83146:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   83148:	6869      	ldr	r1, [r5, #4]
   8314a:	430b      	orrs	r3, r1
   8314c:	606b      	str	r3, [r5, #4]
}
   8314e:	4610      	mov	r0, r2
   83150:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   83152:	2201      	movs	r2, #1
   83154:	e7fb      	b.n	8314e <usart_init_rs232+0x3a>
   83156:	2201      	movs	r2, #1
   83158:	e7f9      	b.n	8314e <usart_init_rs232+0x3a>
   8315a:	bf00      	nop
   8315c:	000830ed 	.word	0x000830ed
   83160:	200718f8 	.word	0x200718f8
   83164:	00083095 	.word	0x00083095

00083168 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   83168:	2340      	movs	r3, #64	; 0x40
   8316a:	6003      	str	r3, [r0, #0]
   8316c:	4770      	bx	lr

0008316e <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   8316e:	2380      	movs	r3, #128	; 0x80
   83170:	6003      	str	r3, [r0, #0]
   83172:	4770      	bx	lr

00083174 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   83174:	2310      	movs	r3, #16
   83176:	6003      	str	r3, [r0, #0]
   83178:	4770      	bx	lr

0008317a <usart_reset_rx>:
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8317a:	2324      	movs	r3, #36	; 0x24
   8317c:	6003      	str	r3, [r0, #0]
   8317e:	4770      	bx	lr

00083180 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   83180:	6081      	str	r1, [r0, #8]
   83182:	4770      	bx	lr

00083184 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   83184:	60c1      	str	r1, [r0, #12]
   83186:	4770      	bx	lr

00083188 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   83188:	6900      	ldr	r0, [r0, #16]
}
   8318a:	4770      	bx	lr

0008318c <usart_get_status>:
	return p_usart->US_CSR;
   8318c:	6940      	ldr	r0, [r0, #20]
}
   8318e:	4770      	bx	lr

00083190 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   83190:	6943      	ldr	r3, [r0, #20]
   83192:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   83196:	bf1d      	ittte	ne
   83198:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8319c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8319e:	2000      	movne	r0, #0
		return 1;
   831a0:	2001      	moveq	r0, #1
}
   831a2:	4770      	bx	lr

000831a4 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   831a4:	6943      	ldr	r3, [r0, #20]
   831a6:	f013 0f01 	tst.w	r3, #1
   831aa:	d005      	beq.n	831b8 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   831ac:	6983      	ldr	r3, [r0, #24]
   831ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
   831b2:	600b      	str	r3, [r1, #0]
	return 0;
   831b4:	2000      	movs	r0, #0
   831b6:	4770      	bx	lr
		return 1;
   831b8:	2001      	movs	r0, #1
}
   831ba:	4770      	bx	lr

000831bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   831bc:	e7fe      	b.n	831bc <Dummy_Handler>
	...

000831c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   831c0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   831c2:	4b1c      	ldr	r3, [pc, #112]	; (83234 <Reset_Handler+0x74>)
   831c4:	4a1c      	ldr	r2, [pc, #112]	; (83238 <Reset_Handler+0x78>)
   831c6:	429a      	cmp	r2, r3
   831c8:	d010      	beq.n	831ec <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   831ca:	4b1c      	ldr	r3, [pc, #112]	; (8323c <Reset_Handler+0x7c>)
   831cc:	4a19      	ldr	r2, [pc, #100]	; (83234 <Reset_Handler+0x74>)
   831ce:	429a      	cmp	r2, r3
   831d0:	d20c      	bcs.n	831ec <Reset_Handler+0x2c>
   831d2:	3b01      	subs	r3, #1
   831d4:	1a9b      	subs	r3, r3, r2
   831d6:	f023 0303 	bic.w	r3, r3, #3
   831da:	3304      	adds	r3, #4
   831dc:	4413      	add	r3, r2
   831de:	4916      	ldr	r1, [pc, #88]	; (83238 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   831e0:	f851 0b04 	ldr.w	r0, [r1], #4
   831e4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   831e8:	429a      	cmp	r2, r3
   831ea:	d1f9      	bne.n	831e0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   831ec:	4b14      	ldr	r3, [pc, #80]	; (83240 <Reset_Handler+0x80>)
   831ee:	4a15      	ldr	r2, [pc, #84]	; (83244 <Reset_Handler+0x84>)
   831f0:	429a      	cmp	r2, r3
   831f2:	d20a      	bcs.n	8320a <Reset_Handler+0x4a>
   831f4:	3b01      	subs	r3, #1
   831f6:	1a9b      	subs	r3, r3, r2
   831f8:	f023 0303 	bic.w	r3, r3, #3
   831fc:	3304      	adds	r3, #4
   831fe:	4413      	add	r3, r2
		*pDest++ = 0;
   83200:	2100      	movs	r1, #0
   83202:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   83206:	4293      	cmp	r3, r2
   83208:	d1fb      	bne.n	83202 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8320a:	4b0f      	ldr	r3, [pc, #60]	; (83248 <Reset_Handler+0x88>)
   8320c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   83210:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83214:	490d      	ldr	r1, [pc, #52]	; (8324c <Reset_Handler+0x8c>)
   83216:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83218:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8321c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   83220:	d203      	bcs.n	8322a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83222:	688b      	ldr	r3, [r1, #8]
   83224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83228:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8322a:	4b09      	ldr	r3, [pc, #36]	; (83250 <Reset_Handler+0x90>)
   8322c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8322e:	4b09      	ldr	r3, [pc, #36]	; (83254 <Reset_Handler+0x94>)
   83230:	4798      	blx	r3
   83232:	e7fe      	b.n	83232 <Reset_Handler+0x72>
   83234:	20070000 	.word	0x20070000
   83238:	00083964 	.word	0x00083964
   8323c:	20070754 	.word	0x20070754
   83240:	2007195c 	.word	0x2007195c
   83244:	20070754 	.word	0x20070754
   83248:	00080000 	.word	0x00080000
   8324c:	e000ed00 	.word	0xe000ed00
   83250:	00083775 	.word	0x00083775
   83254:	00083371 	.word	0x00083371

00083258 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83258:	4b3d      	ldr	r3, [pc, #244]	; (83350 <SystemCoreClockUpdate+0xf8>)
   8325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8325c:	f003 0303 	and.w	r3, r3, #3
   83260:	2b03      	cmp	r3, #3
   83262:	d80e      	bhi.n	83282 <SystemCoreClockUpdate+0x2a>
   83264:	e8df f003 	tbb	[pc, r3]
   83268:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8326c:	4b39      	ldr	r3, [pc, #228]	; (83354 <SystemCoreClockUpdate+0xfc>)
   8326e:	695b      	ldr	r3, [r3, #20]
   83270:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83274:	bf14      	ite	ne
   83276:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8327a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8327e:	4b36      	ldr	r3, [pc, #216]	; (83358 <SystemCoreClockUpdate+0x100>)
   83280:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83282:	4b33      	ldr	r3, [pc, #204]	; (83350 <SystemCoreClockUpdate+0xf8>)
   83284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83286:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8328a:	2b70      	cmp	r3, #112	; 0x70
   8328c:	d057      	beq.n	8333e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8328e:	4b30      	ldr	r3, [pc, #192]	; (83350 <SystemCoreClockUpdate+0xf8>)
   83290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83292:	4931      	ldr	r1, [pc, #196]	; (83358 <SystemCoreClockUpdate+0x100>)
   83294:	f3c2 1202 	ubfx	r2, r2, #4, #3
   83298:	680b      	ldr	r3, [r1, #0]
   8329a:	40d3      	lsrs	r3, r2
   8329c:	600b      	str	r3, [r1, #0]
   8329e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   832a0:	4b2b      	ldr	r3, [pc, #172]	; (83350 <SystemCoreClockUpdate+0xf8>)
   832a2:	6a1b      	ldr	r3, [r3, #32]
   832a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   832a8:	d003      	beq.n	832b2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   832aa:	4a2c      	ldr	r2, [pc, #176]	; (8335c <SystemCoreClockUpdate+0x104>)
   832ac:	4b2a      	ldr	r3, [pc, #168]	; (83358 <SystemCoreClockUpdate+0x100>)
   832ae:	601a      	str	r2, [r3, #0]
   832b0:	e7e7      	b.n	83282 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   832b2:	4a2b      	ldr	r2, [pc, #172]	; (83360 <SystemCoreClockUpdate+0x108>)
   832b4:	4b28      	ldr	r3, [pc, #160]	; (83358 <SystemCoreClockUpdate+0x100>)
   832b6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   832b8:	4b25      	ldr	r3, [pc, #148]	; (83350 <SystemCoreClockUpdate+0xf8>)
   832ba:	6a1b      	ldr	r3, [r3, #32]
   832bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   832c0:	2b10      	cmp	r3, #16
   832c2:	d005      	beq.n	832d0 <SystemCoreClockUpdate+0x78>
   832c4:	2b20      	cmp	r3, #32
   832c6:	d1dc      	bne.n	83282 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   832c8:	4a24      	ldr	r2, [pc, #144]	; (8335c <SystemCoreClockUpdate+0x104>)
   832ca:	4b23      	ldr	r3, [pc, #140]	; (83358 <SystemCoreClockUpdate+0x100>)
   832cc:	601a      	str	r2, [r3, #0]
				break;
   832ce:	e7d8      	b.n	83282 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   832d0:	4a24      	ldr	r2, [pc, #144]	; (83364 <SystemCoreClockUpdate+0x10c>)
   832d2:	4b21      	ldr	r3, [pc, #132]	; (83358 <SystemCoreClockUpdate+0x100>)
   832d4:	601a      	str	r2, [r3, #0]
				break;
   832d6:	e7d4      	b.n	83282 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   832d8:	4b1d      	ldr	r3, [pc, #116]	; (83350 <SystemCoreClockUpdate+0xf8>)
   832da:	6a1b      	ldr	r3, [r3, #32]
   832dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   832e0:	d00c      	beq.n	832fc <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   832e2:	4a1e      	ldr	r2, [pc, #120]	; (8335c <SystemCoreClockUpdate+0x104>)
   832e4:	4b1c      	ldr	r3, [pc, #112]	; (83358 <SystemCoreClockUpdate+0x100>)
   832e6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   832e8:	4b19      	ldr	r3, [pc, #100]	; (83350 <SystemCoreClockUpdate+0xf8>)
   832ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   832ec:	f003 0303 	and.w	r3, r3, #3
   832f0:	2b02      	cmp	r3, #2
   832f2:	d016      	beq.n	83322 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   832f4:	4a1c      	ldr	r2, [pc, #112]	; (83368 <SystemCoreClockUpdate+0x110>)
   832f6:	4b18      	ldr	r3, [pc, #96]	; (83358 <SystemCoreClockUpdate+0x100>)
   832f8:	601a      	str	r2, [r3, #0]
   832fa:	e7c2      	b.n	83282 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   832fc:	4a18      	ldr	r2, [pc, #96]	; (83360 <SystemCoreClockUpdate+0x108>)
   832fe:	4b16      	ldr	r3, [pc, #88]	; (83358 <SystemCoreClockUpdate+0x100>)
   83300:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83302:	4b13      	ldr	r3, [pc, #76]	; (83350 <SystemCoreClockUpdate+0xf8>)
   83304:	6a1b      	ldr	r3, [r3, #32]
   83306:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8330a:	2b10      	cmp	r3, #16
   8330c:	d005      	beq.n	8331a <SystemCoreClockUpdate+0xc2>
   8330e:	2b20      	cmp	r3, #32
   83310:	d1ea      	bne.n	832e8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   83312:	4a12      	ldr	r2, [pc, #72]	; (8335c <SystemCoreClockUpdate+0x104>)
   83314:	4b10      	ldr	r3, [pc, #64]	; (83358 <SystemCoreClockUpdate+0x100>)
   83316:	601a      	str	r2, [r3, #0]
				break;
   83318:	e7e6      	b.n	832e8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8331a:	4a12      	ldr	r2, [pc, #72]	; (83364 <SystemCoreClockUpdate+0x10c>)
   8331c:	4b0e      	ldr	r3, [pc, #56]	; (83358 <SystemCoreClockUpdate+0x100>)
   8331e:	601a      	str	r2, [r3, #0]
				break;
   83320:	e7e2      	b.n	832e8 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83322:	4a0b      	ldr	r2, [pc, #44]	; (83350 <SystemCoreClockUpdate+0xf8>)
   83324:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83326:	6a92      	ldr	r2, [r2, #40]	; 0x28
   83328:	480b      	ldr	r0, [pc, #44]	; (83358 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8332a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8332e:	6803      	ldr	r3, [r0, #0]
   83330:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83334:	b2d2      	uxtb	r2, r2
   83336:	fbb3 f3f2 	udiv	r3, r3, r2
   8333a:	6003      	str	r3, [r0, #0]
   8333c:	e7a1      	b.n	83282 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8333e:	4a06      	ldr	r2, [pc, #24]	; (83358 <SystemCoreClockUpdate+0x100>)
   83340:	6813      	ldr	r3, [r2, #0]
   83342:	490a      	ldr	r1, [pc, #40]	; (8336c <SystemCoreClockUpdate+0x114>)
   83344:	fba1 1303 	umull	r1, r3, r1, r3
   83348:	085b      	lsrs	r3, r3, #1
   8334a:	6013      	str	r3, [r2, #0]
   8334c:	4770      	bx	lr
   8334e:	bf00      	nop
   83350:	400e0600 	.word	0x400e0600
   83354:	400e1a10 	.word	0x400e1a10
   83358:	20070320 	.word	0x20070320
   8335c:	00b71b00 	.word	0x00b71b00
   83360:	003d0900 	.word	0x003d0900
   83364:	007a1200 	.word	0x007a1200
   83368:	0e4e1c00 	.word	0x0e4e1c00
   8336c:	aaaaaaab 	.word	0xaaaaaaab

00083370 <main>:
static volatile bool main_b_cdc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   83370:	b580      	push	{r7, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
   83372:	2101      	movs	r1, #1
   83374:	4b1c      	ldr	r3, [pc, #112]	; (833e8 <main+0x78>)
   83376:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   83378:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8337c:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   8337e:	4b1b      	ldr	r3, [pc, #108]	; (833ec <main+0x7c>)
   83380:	2200      	movs	r2, #0
   83382:	701a      	strb	r2, [r3, #0]
   83384:	705a      	strb	r2, [r3, #1]
   83386:	709a      	strb	r2, [r3, #2]
   83388:	70da      	strb	r2, [r3, #3]
   8338a:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   8338c:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();

	sysclk_init();
   8338e:	4b18      	ldr	r3, [pc, #96]	; (833f0 <main+0x80>)
   83390:	4798      	blx	r3
	board_init();
   83392:	4b18      	ldr	r3, [pc, #96]	; (833f4 <main+0x84>)
   83394:	4798      	blx	r3
	ui_init();
   83396:	4b18      	ldr	r3, [pc, #96]	; (833f8 <main+0x88>)
   83398:	4798      	blx	r3
	ui_powerdown();
   8339a:	4b18      	ldr	r3, [pc, #96]	; (833fc <main+0x8c>)
   8339c:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   8339e:	4b18      	ldr	r3, [pc, #96]	; (83400 <main+0x90>)
   833a0:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
   833a2:	4c11      	ldr	r4, [pc, #68]	; (833e8 <main+0x78>)
   833a4:	2500      	movs	r5, #0
   833a6:	462f      	mov	r7, r5
	while (!(*lock_ptr)) {
   833a8:	4e10      	ldr	r6, [pc, #64]	; (833ec <main+0x7c>)
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   833aa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 83404 <main+0x94>
   833ae:	e004      	b.n	833ba <main+0x4a>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
   833b0:	2301      	movs	r3, #1
   833b2:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   833b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   833b8:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
   833ba:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   833bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   833c0:	7027      	strb	r7, [r4, #0]
	while (!(*lock_ptr)) {
   833c2:	7833      	ldrb	r3, [r6, #0]
   833c4:	2b00      	cmp	r3, #0
   833c6:	d1f3      	bne.n	833b0 <main+0x40>
   833c8:	4b08      	ldr	r3, [pc, #32]	; (833ec <main+0x7c>)
   833ca:	4628      	mov	r0, r5
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   833cc:	3001      	adds	r0, #1
   833ce:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
   833d0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   833d4:	2a00      	cmp	r2, #0
   833d6:	d0f9      	beq.n	833cc <main+0x5c>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   833d8:	2800      	cmp	r0, #0
   833da:	d0e9      	beq.n	833b0 <main+0x40>
  __ASM volatile ("cpsid i" : : : "memory");
   833dc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   833de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   833e2:	7025      	strb	r5, [r4, #0]
	pmc_sleep(sleep_mode);
   833e4:	47c0      	blx	r8
   833e6:	e7e8      	b.n	833ba <main+0x4a>
   833e8:	2007031c 	.word	0x2007031c
   833ec:	20071918 	.word	0x20071918
   833f0:	00080235 	.word	0x00080235
   833f4:	000813d5 	.word	0x000813d5
   833f8:	00080161 	.word	0x00080161
   833fc:	0008017d 	.word	0x0008017d
   83400:	00080d99 	.word	0x00080d99
   83404:	00081969 	.word	0x00081969

00083408 <main_suspend_action>:
		sleepmgr_enter_sleep();
	}
}

void main_suspend_action(void)
{
   83408:	b508      	push	{r3, lr}
	ui_powerdown();
   8340a:	4b01      	ldr	r3, [pc, #4]	; (83410 <main_suspend_action+0x8>)
   8340c:	4798      	blx	r3
   8340e:	bd08      	pop	{r3, pc}
   83410:	0008017d 	.word	0x0008017d

00083414 <main_resume_action>:
}

void main_resume_action(void)
{
   83414:	b508      	push	{r3, lr}
	ui_wakeup();
   83416:	4b01      	ldr	r3, [pc, #4]	; (8341c <main_resume_action+0x8>)
   83418:	4798      	blx	r3
   8341a:	bd08      	pop	{r3, pc}
   8341c:	00080195 	.word	0x00080195

00083420 <main_sof_action>:
}

void main_sof_action(void)
{
   83420:	b508      	push	{r3, lr}
	if (!main_b_cdc_enable)
   83422:	4b04      	ldr	r3, [pc, #16]	; (83434 <main_sof_action+0x14>)
   83424:	781b      	ldrb	r3, [r3, #0]
   83426:	b903      	cbnz	r3, 8342a <main_sof_action+0xa>
   83428:	bd08      	pop	{r3, pc}
		return;
	ui_process(udd_get_frame_number());
   8342a:	4b03      	ldr	r3, [pc, #12]	; (83438 <main_sof_action+0x18>)
   8342c:	4798      	blx	r3
   8342e:	4b03      	ldr	r3, [pc, #12]	; (8343c <main_sof_action+0x1c>)
   83430:	4798      	blx	r3
   83432:	e7f9      	b.n	83428 <main_sof_action+0x8>
   83434:	200718fc 	.word	0x200718fc
   83438:	000829c9 	.word	0x000829c9
   8343c:	000801f1 	.word	0x000801f1

00083440 <main_cdc_enable>:
}

bool main_cdc_enable(uint8_t port)
{
   83440:	b510      	push	{r4, lr}
	main_b_cdc_enable = true;
   83442:	2401      	movs	r4, #1
   83444:	4b02      	ldr	r3, [pc, #8]	; (83450 <main_cdc_enable+0x10>)
   83446:	701c      	strb	r4, [r3, #0]
	// Open communication
	uart_open(port);
   83448:	4b02      	ldr	r3, [pc, #8]	; (83454 <main_cdc_enable+0x14>)
   8344a:	4798      	blx	r3
	return true;
}
   8344c:	4620      	mov	r0, r4
   8344e:	bd10      	pop	{r4, pc}
   83450:	200718fc 	.word	0x200718fc
   83454:	000836b5 	.word	0x000836b5

00083458 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
   83458:	b508      	push	{r3, lr}
	main_b_cdc_enable = false;
   8345a:	2200      	movs	r2, #0
   8345c:	4b02      	ldr	r3, [pc, #8]	; (83468 <main_cdc_disable+0x10>)
   8345e:	701a      	strb	r2, [r3, #0]
	// Close communication
	uart_close(port);
   83460:	4b02      	ldr	r3, [pc, #8]	; (8346c <main_cdc_disable+0x14>)
   83462:	4798      	blx	r3
   83464:	bd08      	pop	{r3, pc}
   83466:	bf00      	nop
   83468:	200718fc 	.word	0x200718fc
   8346c:	00083745 	.word	0x00083745

00083470 <main_cdc_set_dtr>:
}

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
   83470:	b508      	push	{r3, lr}
	if (b_enable) {
   83472:	b911      	cbnz	r1, 8347a <main_cdc_set_dtr+0xa>
		// Host terminal has open COM
		ui_com_open(port);
	}else{
		// Host terminal has close COM
		ui_com_close(port);
   83474:	4b02      	ldr	r3, [pc, #8]	; (83480 <main_cdc_set_dtr+0x10>)
   83476:	4798      	blx	r3
   83478:	bd08      	pop	{r3, pc}
		ui_com_open(port);
   8347a:	4b02      	ldr	r3, [pc, #8]	; (83484 <main_cdc_set_dtr+0x14>)
   8347c:	4798      	blx	r3
   8347e:	bd08      	pop	{r3, pc}
   83480:	000801c5 	.word	0x000801c5
   83484:	000801a5 	.word	0x000801a5

00083488 <usart_handler>:
	}
	return usart;
}

static void usart_handler(uint8_t port)
{
   83488:	b570      	push	{r4, r5, r6, lr}
   8348a:	b082      	sub	sp, #8
	if (0 == port) {
   8348c:	4606      	mov	r6, r0
   8348e:	b178      	cbz	r0, 834b0 <usart_handler+0x28>
		usart = USART_BASE_1;
   83490:	2801      	cmp	r0, #1
   83492:	4c28      	ldr	r4, [pc, #160]	; (83534 <usart_handler+0xac>)
   83494:	bf18      	it	ne
   83496:	2400      	movne	r4, #0
	Usart* usart = get_usart(port);
	uint32_t sr = usart_get_status(usart);
   83498:	4620      	mov	r0, r4
   8349a:	4b27      	ldr	r3, [pc, #156]	; (83538 <usart_handler+0xb0>)
   8349c:	4798      	blx	r3
   8349e:	4605      	mov	r5, r0
	if (sr & US_CSR_RXRDY) {
   834a0:	f010 0f01 	tst.w	r0, #1
   834a4:	d106      	bne.n	834b4 <usart_handler+0x2c>
		}
		ui_com_tx_stop();
		return;
	}

	if (sr & US_CSR_TXRDY) {
   834a6:	f010 0f02 	tst.w	r0, #2
   834aa:	d12a      	bne.n	83502 <usart_handler+0x7a>
			usart_disable_tx(usart);
			usart_disable_interrupt(usart, US_IDR_TXRDY);
			ui_com_rx_stop();
		}
	}
}
   834ac:	b002      	add	sp, #8
   834ae:	bd70      	pop	{r4, r5, r6, pc}
		usart = USART_BASE_0;
   834b0:	4c22      	ldr	r4, [pc, #136]	; (8353c <usart_handler+0xb4>)
   834b2:	e7f1      	b.n	83498 <usart_handler+0x10>
		ui_com_tx_start();
   834b4:	4b22      	ldr	r3, [pc, #136]	; (83540 <usart_handler+0xb8>)
   834b6:	4798      	blx	r3
		bool b_error = usart_read(usart, &value) ||
   834b8:	a901      	add	r1, sp, #4
   834ba:	4620      	mov	r0, r4
   834bc:	4b21      	ldr	r3, [pc, #132]	; (83544 <usart_handler+0xbc>)
   834be:	4798      	blx	r3
   834c0:	b970      	cbnz	r0, 834e0 <usart_handler+0x58>
		if (b_error) {
   834c2:	f415 7fe0 	tst.w	r5, #448	; 0x1c0
   834c6:	d10b      	bne.n	834e0 <usart_handler+0x58>
		if (!udi_cdc_multi_is_tx_ready(port)) {
   834c8:	4630      	mov	r0, r6
   834ca:	4b1f      	ldr	r3, [pc, #124]	; (83548 <usart_handler+0xc0>)
   834cc:	4798      	blx	r3
   834ce:	b998      	cbnz	r0, 834f8 <usart_handler+0x70>
			udi_cdc_multi_signal_overrun(port);
   834d0:	4630      	mov	r0, r6
   834d2:	4b1e      	ldr	r3, [pc, #120]	; (8354c <usart_handler+0xc4>)
   834d4:	4798      	blx	r3
			ui_com_overflow();
   834d6:	4b1e      	ldr	r3, [pc, #120]	; (83550 <usart_handler+0xc8>)
   834d8:	4798      	blx	r3
		ui_com_tx_stop();
   834da:	4b1e      	ldr	r3, [pc, #120]	; (83554 <usart_handler+0xcc>)
   834dc:	4798      	blx	r3
   834de:	e7e5      	b.n	834ac <usart_handler+0x24>
			usart_reset_rx(usart);
   834e0:	4620      	mov	r0, r4
   834e2:	4b1d      	ldr	r3, [pc, #116]	; (83558 <usart_handler+0xd0>)
   834e4:	4798      	blx	r3
			usart_enable_rx(usart);
   834e6:	4620      	mov	r0, r4
   834e8:	4b1c      	ldr	r3, [pc, #112]	; (8355c <usart_handler+0xd4>)
   834ea:	4798      	blx	r3
			udi_cdc_multi_signal_framing_error(port);
   834ec:	4630      	mov	r0, r6
   834ee:	4b1c      	ldr	r3, [pc, #112]	; (83560 <usart_handler+0xd8>)
   834f0:	4798      	blx	r3
			ui_com_error();
   834f2:	4b1c      	ldr	r3, [pc, #112]	; (83564 <usart_handler+0xdc>)
   834f4:	4798      	blx	r3
   834f6:	e7e7      	b.n	834c8 <usart_handler+0x40>
			udi_cdc_multi_putc(port, value);
   834f8:	9901      	ldr	r1, [sp, #4]
   834fa:	4630      	mov	r0, r6
   834fc:	4b1a      	ldr	r3, [pc, #104]	; (83568 <usart_handler+0xe0>)
   834fe:	4798      	blx	r3
   83500:	e7eb      	b.n	834da <usart_handler+0x52>
		if (udi_cdc_multi_is_rx_ready(port)) {
   83502:	4630      	mov	r0, r6
   83504:	4b19      	ldr	r3, [pc, #100]	; (8356c <usart_handler+0xe4>)
   83506:	4798      	blx	r3
   83508:	b948      	cbnz	r0, 8351e <usart_handler+0x96>
			usart_disable_tx(usart);
   8350a:	4620      	mov	r0, r4
   8350c:	4b18      	ldr	r3, [pc, #96]	; (83570 <usart_handler+0xe8>)
   8350e:	4798      	blx	r3
			usart_disable_interrupt(usart, US_IDR_TXRDY);
   83510:	2102      	movs	r1, #2
   83512:	4620      	mov	r0, r4
   83514:	4b17      	ldr	r3, [pc, #92]	; (83574 <usart_handler+0xec>)
   83516:	4798      	blx	r3
			ui_com_rx_stop();
   83518:	4b17      	ldr	r3, [pc, #92]	; (83578 <usart_handler+0xf0>)
   8351a:	4798      	blx	r3
   8351c:	e7c6      	b.n	834ac <usart_handler+0x24>
			ui_com_rx_start();
   8351e:	4b17      	ldr	r3, [pc, #92]	; (8357c <usart_handler+0xf4>)
   83520:	4798      	blx	r3
			int c = udi_cdc_multi_getc(port);
   83522:	4630      	mov	r0, r6
   83524:	4b16      	ldr	r3, [pc, #88]	; (83580 <usart_handler+0xf8>)
   83526:	4798      	blx	r3
			usart_write(usart, c);
   83528:	4601      	mov	r1, r0
   8352a:	4620      	mov	r0, r4
   8352c:	4b15      	ldr	r3, [pc, #84]	; (83584 <usart_handler+0xfc>)
   8352e:	4798      	blx	r3
   83530:	e7bc      	b.n	834ac <usart_handler+0x24>
   83532:	bf00      	nop
   83534:	40098000 	.word	0x40098000
   83538:	0008318d 	.word	0x0008318d
   8353c:	4009c000 	.word	0x4009c000
   83540:	000801e9 	.word	0x000801e9
   83544:	000831a5 	.word	0x000831a5
   83548:	00080b3d 	.word	0x00080b3d
   8354c:	00080769 	.word	0x00080769
   83550:	000801ef 	.word	0x000801ef
   83554:	000801eb 	.word	0x000801eb
   83558:	0008317b 	.word	0x0008317b
   8355c:	00083175 	.word	0x00083175
   83560:	00080759 	.word	0x00080759
   83564:	000801ed 	.word	0x000801ed
   83568:	00080b51 	.word	0x00080b51
   8356c:	000807d1 	.word	0x000807d1
   83570:	0008316f 	.word	0x0008316f
   83574:	00083185 	.word	0x00083185
   83578:	000801e7 	.word	0x000801e7
   8357c:	000801e5 	.word	0x000801e5
   83580:	000809e5 	.word	0x000809e5
   83584:	00083191 	.word	0x00083191

00083588 <USART1_Handler>:

ISR(USART_HANDLER_0)
{
   83588:	b508      	push	{r3, lr}
	usart_handler(0);
   8358a:	2000      	movs	r0, #0
   8358c:	4b01      	ldr	r3, [pc, #4]	; (83594 <USART1_Handler+0xc>)
   8358e:	4798      	blx	r3
   83590:	bd08      	pop	{r3, pc}
   83592:	bf00      	nop
   83594:	00083489 	.word	0x00083489

00083598 <USART0_Handler>:
}

ISR(USART_HANDLER_1)
{
   83598:	b508      	push	{r3, lr}
	usart_handler(1);
   8359a:	2001      	movs	r0, #1
   8359c:	4b01      	ldr	r3, [pc, #4]	; (835a4 <USART0_Handler+0xc>)
   8359e:	4798      	blx	r3
   835a0:	bd08      	pop	{r3, pc}
   835a2:	bf00      	nop
   835a4:	00083489 	.word	0x00083489

000835a8 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
   835a8:	b510      	push	{r4, lr}
	if (0 == port) {
   835aa:	b150      	cbz	r0, 835c2 <uart_rx_notify+0x1a>
		usart = USART_BASE_1;
   835ac:	2801      	cmp	r0, #1
   835ae:	4c0a      	ldr	r4, [pc, #40]	; (835d8 <uart_rx_notify+0x30>)
   835b0:	bf18      	it	ne
   835b2:	2400      	movne	r4, #0
	Usart* usart = get_usart(port);
	// If UART is open
	if (usart_get_interrupt_mask(usart)
   835b4:	4620      	mov	r0, r4
   835b6:	4b09      	ldr	r3, [pc, #36]	; (835dc <uart_rx_notify+0x34>)
   835b8:	4798      	blx	r3
   835ba:	f010 0f01 	tst.w	r0, #1
   835be:	d102      	bne.n	835c6 <uart_rx_notify+0x1e>
   835c0:	bd10      	pop	{r4, pc}
		usart = USART_BASE_0;
   835c2:	4c07      	ldr	r4, [pc, #28]	; (835e0 <uart_rx_notify+0x38>)
   835c4:	e7f6      	b.n	835b4 <uart_rx_notify+0xc>
		& US_IMR_RXRDY) {
		// Enable UART TX interrupt to send a new value
		usart_enable_tx(usart);
   835c6:	4620      	mov	r0, r4
   835c8:	4b06      	ldr	r3, [pc, #24]	; (835e4 <uart_rx_notify+0x3c>)
   835ca:	4798      	blx	r3
		usart_enable_interrupt(usart, US_IER_TXRDY);
   835cc:	2102      	movs	r1, #2
   835ce:	4620      	mov	r0, r4
   835d0:	4b05      	ldr	r3, [pc, #20]	; (835e8 <uart_rx_notify+0x40>)
   835d2:	4798      	blx	r3
	}
}
   835d4:	e7f4      	b.n	835c0 <uart_rx_notify+0x18>
   835d6:	bf00      	nop
   835d8:	40098000 	.word	0x40098000
   835dc:	00083189 	.word	0x00083189
   835e0:	4009c000 	.word	0x4009c000
   835e4:	00083169 	.word	0x00083169
   835e8:	00083181 	.word	0x00083181

000835ec <uart_config>:


void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
   835ec:	b570      	push	{r4, r5, r6, lr}
	if (0 == port) {
   835ee:	b198      	cbz	r0, 83618 <uart_config+0x2c>
		usart = USART_BASE_1;
   835f0:	2801      	cmp	r0, #1
   835f2:	4c26      	ldr	r4, [pc, #152]	; (8368c <uart_config+0xa0>)
   835f4:	bf18      	it	ne
   835f6:	2400      	movne	r4, #0
	Usart* usart = get_usart(port);
	uint32_t stopbits, parity, databits;
	uint32_t imr;

	switch (cfg->bCharFormat) {
   835f8:	790b      	ldrb	r3, [r1, #4]
   835fa:	2b01      	cmp	r3, #1
   835fc:	d00e      	beq.n	8361c <uart_config+0x30>
		stopbits = US_MR_NBSTOP_1_5_BIT;
		break;
	case CDC_STOP_BITS_1:
	default:
		// Default stop bit = 1 stop bit
		stopbits = US_MR_NBSTOP_1_BIT;
   835fe:	2b02      	cmp	r3, #2
   83600:	bf0c      	ite	eq
   83602:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
   83606:	2000      	movne	r0, #0
		break;
	}

	switch (cfg->bParityType) {
   83608:	794b      	ldrb	r3, [r1, #5]
   8360a:	3b01      	subs	r3, #1
   8360c:	2b03      	cmp	r3, #3
   8360e:	d811      	bhi.n	83634 <uart_config+0x48>
   83610:	e8df f003 	tbb	[pc, r3]
   83614:	0d0a1307 	.word	0x0d0a1307
		usart = USART_BASE_0;
   83618:	4c1d      	ldr	r4, [pc, #116]	; (83690 <uart_config+0xa4>)
   8361a:	e7ed      	b.n	835f8 <uart_config+0xc>
		stopbits = US_MR_NBSTOP_1_5_BIT;
   8361c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   83620:	e7f2      	b.n	83608 <uart_config+0x1c>
	case CDC_PAR_EVEN:
		parity = US_MR_PAR_EVEN;
		break;
	case CDC_PAR_ODD:
		parity = US_MR_PAR_ODD;
   83622:	f44f 7200 	mov.w	r2, #512	; 0x200
   83626:	e009      	b.n	8363c <uart_config+0x50>
		break;
	case CDC_PAR_MARK:
		parity = US_MR_PAR_MARK;
   83628:	f44f 62c0 	mov.w	r2, #1536	; 0x600
		break;
   8362c:	e006      	b.n	8363c <uart_config+0x50>
	case CDC_PAR_SPACE:
		parity = US_MR_PAR_SPACE;
   8362e:	f44f 6280 	mov.w	r2, #1024	; 0x400
		break;
   83632:	e003      	b.n	8363c <uart_config+0x50>
	default:
	case CDC_PAR_NONE:
		parity = US_MR_PAR_NO;
   83634:	f44f 6200 	mov.w	r2, #2048	; 0x800
		break;
   83638:	e000      	b.n	8363c <uart_config+0x50>
		parity = US_MR_PAR_EVEN;
   8363a:	2200      	movs	r2, #0
	}
	
	switch(cfg->bDataBits) {
   8363c:	798b      	ldrb	r3, [r1, #6]
   8363e:	1f5d      	subs	r5, r3, #5
   83640:	2d02      	cmp	r5, #2
	case 5: case 6: case 7:
		databits = cfg->bDataBits - 5;
   83642:	bf94      	ite	ls
   83644:	462b      	movls	r3, r5
		break;
	default:
	case 8:
		databits = US_MR_CHRL_8_BIT;
   83646:	23c0      	movhi	r3, #192	; 0xc0
		break;
	}

	// Options for USART.
	usart_options.baudrate = LE32_TO_CPU(cfg->dwDTERate);
   83648:	6809      	ldr	r1, [r1, #0]
   8364a:	4d12      	ldr	r5, [pc, #72]	; (83694 <uart_config+0xa8>)
   8364c:	6029      	str	r1, [r5, #0]
	usart_options.char_length = databits;
   8364e:	606b      	str	r3, [r5, #4]
	usart_options.parity_type = parity;
   83650:	60aa      	str	r2, [r5, #8]
	usart_options.stop_bits = stopbits;
   83652:	60e8      	str	r0, [r5, #12]
	usart_options.channel_mode = US_MR_CHMODE_NORMAL | US_MR_MAN;
   83654:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   83658:	612b      	str	r3, [r5, #16]
	imr = usart_get_interrupt_mask(usart);
   8365a:	4620      	mov	r0, r4
   8365c:	4b0e      	ldr	r3, [pc, #56]	; (83698 <uart_config+0xac>)
   8365e:	4798      	blx	r3
   83660:	4606      	mov	r6, r0
	usart_disable_interrupt(usart, 0xFFFFFFFF);
   83662:	f04f 31ff 	mov.w	r1, #4294967295
   83666:	4620      	mov	r0, r4
   83668:	4b0c      	ldr	r3, [pc, #48]	; (8369c <uart_config+0xb0>)
   8366a:	4798      	blx	r3
	usart_init_rs232(usart, &usart_options,
   8366c:	4a0c      	ldr	r2, [pc, #48]	; (836a0 <uart_config+0xb4>)
   8366e:	4629      	mov	r1, r5
   83670:	4620      	mov	r0, r4
   83672:	4b0c      	ldr	r3, [pc, #48]	; (836a4 <uart_config+0xb8>)
   83674:	4798      	blx	r3
			sysclk_get_peripheral_hz());
	//usart->US_MR |= US_MR_MAN; 
	// Restore both RX and TX
	usart_enable_tx(usart);
   83676:	4620      	mov	r0, r4
   83678:	4b0b      	ldr	r3, [pc, #44]	; (836a8 <uart_config+0xbc>)
   8367a:	4798      	blx	r3
	usart_enable_rx(usart);
   8367c:	4620      	mov	r0, r4
   8367e:	4b0b      	ldr	r3, [pc, #44]	; (836ac <uart_config+0xc0>)
   83680:	4798      	blx	r3
	usart_enable_interrupt(usart, imr);
   83682:	4631      	mov	r1, r6
   83684:	4620      	mov	r0, r4
   83686:	4b0a      	ldr	r3, [pc, #40]	; (836b0 <uart_config+0xc4>)
   83688:	4798      	blx	r3
   8368a:	bd70      	pop	{r4, r5, r6, pc}
   8368c:	40098000 	.word	0x40098000
   83690:	4009c000 	.word	0x4009c000
   83694:	20071900 	.word	0x20071900
   83698:	00083189 	.word	0x00083189
   8369c:	00083185 	.word	0x00083185
   836a0:	0501bd00 	.word	0x0501bd00
   836a4:	00083115 	.word	0x00083115
   836a8:	00083169 	.word	0x00083169
   836ac:	00083175 	.word	0x00083175
   836b0:	00083181 	.word	0x00083181

000836b4 <uart_open>:
}

void uart_open(uint8_t port)
{
   836b4:	b510      	push	{r4, lr}
	if (0 == port) {
   836b6:	b1f8      	cbz	r0, 836f8 <uart_open+0x44>
	} else if (1 == port) {
   836b8:	2801      	cmp	r0, #1
   836ba:	d111      	bne.n	836e0 <uart_open+0x2c>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   836bc:	4b17      	ldr	r3, [pc, #92]	; (8371c <uart_open+0x68>)
   836be:	2230      	movs	r2, #48	; 0x30
   836c0:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   836c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   836c8:	601a      	str	r2, [r3, #0]
		// IO is initialized in board init
		// Enable interrupt with priority higher than USB
		NVIC_SetPriority((IRQn_Type) USART_ID_1, USART_INT_LEVEL_1);
		NVIC_EnableIRQ((IRQn_Type) USART_ID_1);
		// Initialize it in RS232 mode.
		pmc_enable_periph_clk(USART_ID_1);
   836ca:	2011      	movs	r0, #17
   836cc:	4b14      	ldr	r3, [pc, #80]	; (83720 <uart_open+0x6c>)
   836ce:	4798      	blx	r3
		usart = USART_BASE_1;
   836d0:	4c14      	ldr	r4, [pc, #80]	; (83724 <uart_open+0x70>)
		USART_ENABLE_1();
	} else {
		return;
	}
	if (usart_init_rs232(usart, &usart_options,
   836d2:	4a15      	ldr	r2, [pc, #84]	; (83728 <uart_open+0x74>)
   836d4:	4915      	ldr	r1, [pc, #84]	; (8372c <uart_open+0x78>)
   836d6:	4620      	mov	r0, r4
   836d8:	4b15      	ldr	r3, [pc, #84]	; (83730 <uart_open+0x7c>)
   836da:	4798      	blx	r3
   836dc:	b108      	cbz	r0, 836e2 <uart_open+0x2e>
   836de:	bd10      	pop	{r4, pc}
   836e0:	bd10      	pop	{r4, pc}
				sysclk_get_peripheral_hz())) {
		return;
	}
	// Enable both RX and TX
	usart_enable_tx(usart);
   836e2:	4620      	mov	r0, r4
   836e4:	4b13      	ldr	r3, [pc, #76]	; (83734 <uart_open+0x80>)
   836e6:	4798      	blx	r3
	usart_enable_rx(usart);
   836e8:	4620      	mov	r0, r4
   836ea:	4b13      	ldr	r3, [pc, #76]	; (83738 <uart_open+0x84>)
   836ec:	4798      	blx	r3
	// Enable interrupts
	usart_enable_interrupt(usart, US_IER_RXRDY | US_IER_TXRDY);
   836ee:	2103      	movs	r1, #3
   836f0:	4620      	mov	r0, r4
   836f2:	4b12      	ldr	r3, [pc, #72]	; (8373c <uart_open+0x88>)
   836f4:	4798      	blx	r3
   836f6:	bd10      	pop	{r4, pc}
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   836f8:	4b08      	ldr	r3, [pc, #32]	; (8371c <uart_open+0x68>)
   836fa:	2230      	movs	r2, #48	; 0x30
   836fc:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   83700:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   83704:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   83706:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8370a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   8370e:	601a      	str	r2, [r3, #0]
		pmc_enable_periph_clk(USART_ID_0);
   83710:	2012      	movs	r0, #18
   83712:	4b03      	ldr	r3, [pc, #12]	; (83720 <uart_open+0x6c>)
   83714:	4798      	blx	r3
		usart = USART_BASE_0;
   83716:	4c0a      	ldr	r4, [pc, #40]	; (83740 <uart_open+0x8c>)
   83718:	e7db      	b.n	836d2 <uart_open+0x1e>
   8371a:	bf00      	nop
   8371c:	e000e100 	.word	0xe000e100
   83720:	000818dd 	.word	0x000818dd
   83724:	40098000 	.word	0x40098000
   83728:	0501bd00 	.word	0x0501bd00
   8372c:	20071900 	.word	0x20071900
   83730:	00083115 	.word	0x00083115
   83734:	00083169 	.word	0x00083169
   83738:	00083175 	.word	0x00083175
   8373c:	00083181 	.word	0x00083181
   83740:	4009c000 	.word	0x4009c000

00083744 <uart_close>:
}

void uart_close(uint8_t port)
{
   83744:	b508      	push	{r3, lr}
	if (0 == port) {
   83746:	b110      	cbz	r0, 8374e <uart_close+0xa>
		// Disable interrupts
		usart_disable_interrupt(USART_BASE_0, 0xFFFFFFFF);
		// Close RS232 communication
		USART_DISABLE_0();
	}
	else if (1 == port) {
   83748:	2801      	cmp	r0, #1
   8374a:	d006      	beq.n	8375a <uart_close+0x16>
   8374c:	bd08      	pop	{r3, pc}
		usart_disable_interrupt(USART_BASE_0, 0xFFFFFFFF);
   8374e:	f04f 31ff 	mov.w	r1, #4294967295
   83752:	4805      	ldr	r0, [pc, #20]	; (83768 <uart_close+0x24>)
   83754:	4b05      	ldr	r3, [pc, #20]	; (8376c <uart_close+0x28>)
   83756:	4798      	blx	r3
   83758:	bd08      	pop	{r3, pc}
		// Disable interrupts
		usart_disable_interrupt(USART_BASE_1, 0xFFFFFFFF);
   8375a:	f04f 31ff 	mov.w	r1, #4294967295
   8375e:	4804      	ldr	r0, [pc, #16]	; (83770 <uart_close+0x2c>)
   83760:	4b02      	ldr	r3, [pc, #8]	; (8376c <uart_close+0x28>)
   83762:	4798      	blx	r3
		// Close RS232 communication
		USART_DISABLE_1();
	}
}
   83764:	e7f2      	b.n	8374c <uart_close+0x8>
   83766:	bf00      	nop
   83768:	4009c000 	.word	0x4009c000
   8376c:	00083185 	.word	0x00083185
   83770:	40098000 	.word	0x40098000

00083774 <__libc_init_array>:
   83774:	b570      	push	{r4, r5, r6, lr}
   83776:	4e0f      	ldr	r6, [pc, #60]	; (837b4 <__libc_init_array+0x40>)
   83778:	4d0f      	ldr	r5, [pc, #60]	; (837b8 <__libc_init_array+0x44>)
   8377a:	1b76      	subs	r6, r6, r5
   8377c:	10b6      	asrs	r6, r6, #2
   8377e:	bf18      	it	ne
   83780:	2400      	movne	r4, #0
   83782:	d005      	beq.n	83790 <__libc_init_array+0x1c>
   83784:	3401      	adds	r4, #1
   83786:	f855 3b04 	ldr.w	r3, [r5], #4
   8378a:	4798      	blx	r3
   8378c:	42a6      	cmp	r6, r4
   8378e:	d1f9      	bne.n	83784 <__libc_init_array+0x10>
   83790:	4e0a      	ldr	r6, [pc, #40]	; (837bc <__libc_init_array+0x48>)
   83792:	4d0b      	ldr	r5, [pc, #44]	; (837c0 <__libc_init_array+0x4c>)
   83794:	f000 f8d4 	bl	83940 <_init>
   83798:	1b76      	subs	r6, r6, r5
   8379a:	10b6      	asrs	r6, r6, #2
   8379c:	bf18      	it	ne
   8379e:	2400      	movne	r4, #0
   837a0:	d006      	beq.n	837b0 <__libc_init_array+0x3c>
   837a2:	3401      	adds	r4, #1
   837a4:	f855 3b04 	ldr.w	r3, [r5], #4
   837a8:	4798      	blx	r3
   837aa:	42a6      	cmp	r6, r4
   837ac:	d1f9      	bne.n	837a2 <__libc_init_array+0x2e>
   837ae:	bd70      	pop	{r4, r5, r6, pc}
   837b0:	bd70      	pop	{r4, r5, r6, pc}
   837b2:	bf00      	nop
   837b4:	0008394c 	.word	0x0008394c
   837b8:	0008394c 	.word	0x0008394c
   837bc:	00083954 	.word	0x00083954
   837c0:	0008394c 	.word	0x0008394c

000837c4 <register_fini>:
   837c4:	4b02      	ldr	r3, [pc, #8]	; (837d0 <register_fini+0xc>)
   837c6:	b113      	cbz	r3, 837ce <register_fini+0xa>
   837c8:	4802      	ldr	r0, [pc, #8]	; (837d4 <register_fini+0x10>)
   837ca:	f000 b805 	b.w	837d8 <atexit>
   837ce:	4770      	bx	lr
   837d0:	00000000 	.word	0x00000000
   837d4:	000837e5 	.word	0x000837e5

000837d8 <atexit>:
   837d8:	2300      	movs	r3, #0
   837da:	4601      	mov	r1, r0
   837dc:	461a      	mov	r2, r3
   837de:	4618      	mov	r0, r3
   837e0:	f000 b81e 	b.w	83820 <__register_exitproc>

000837e4 <__libc_fini_array>:
   837e4:	b538      	push	{r3, r4, r5, lr}
   837e6:	4c0a      	ldr	r4, [pc, #40]	; (83810 <__libc_fini_array+0x2c>)
   837e8:	4d0a      	ldr	r5, [pc, #40]	; (83814 <__libc_fini_array+0x30>)
   837ea:	1b64      	subs	r4, r4, r5
   837ec:	10a4      	asrs	r4, r4, #2
   837ee:	d00a      	beq.n	83806 <__libc_fini_array+0x22>
   837f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   837f4:	3b01      	subs	r3, #1
   837f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   837fa:	3c01      	subs	r4, #1
   837fc:	f855 3904 	ldr.w	r3, [r5], #-4
   83800:	4798      	blx	r3
   83802:	2c00      	cmp	r4, #0
   83804:	d1f9      	bne.n	837fa <__libc_fini_array+0x16>
   83806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8380a:	f000 b8a3 	b.w	83954 <_fini>
   8380e:	bf00      	nop
   83810:	00083964 	.word	0x00083964
   83814:	00083960 	.word	0x00083960

00083818 <__retarget_lock_acquire_recursive>:
   83818:	4770      	bx	lr
   8381a:	bf00      	nop

0008381c <__retarget_lock_release_recursive>:
   8381c:	4770      	bx	lr
   8381e:	bf00      	nop

00083820 <__register_exitproc>:
   83820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83824:	4d2c      	ldr	r5, [pc, #176]	; (838d8 <__register_exitproc+0xb8>)
   83826:	4606      	mov	r6, r0
   83828:	6828      	ldr	r0, [r5, #0]
   8382a:	4698      	mov	r8, r3
   8382c:	460f      	mov	r7, r1
   8382e:	4691      	mov	r9, r2
   83830:	f7ff fff2 	bl	83818 <__retarget_lock_acquire_recursive>
   83834:	4b29      	ldr	r3, [pc, #164]	; (838dc <__register_exitproc+0xbc>)
   83836:	681c      	ldr	r4, [r3, #0]
   83838:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8383c:	2b00      	cmp	r3, #0
   8383e:	d03e      	beq.n	838be <__register_exitproc+0x9e>
   83840:	685a      	ldr	r2, [r3, #4]
   83842:	2a1f      	cmp	r2, #31
   83844:	dc1c      	bgt.n	83880 <__register_exitproc+0x60>
   83846:	f102 0e01 	add.w	lr, r2, #1
   8384a:	b176      	cbz	r6, 8386a <__register_exitproc+0x4a>
   8384c:	2101      	movs	r1, #1
   8384e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83852:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83856:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8385a:	4091      	lsls	r1, r2
   8385c:	4308      	orrs	r0, r1
   8385e:	2e02      	cmp	r6, #2
   83860:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83864:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83868:	d023      	beq.n	838b2 <__register_exitproc+0x92>
   8386a:	3202      	adds	r2, #2
   8386c:	f8c3 e004 	str.w	lr, [r3, #4]
   83870:	6828      	ldr	r0, [r5, #0]
   83872:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83876:	f7ff ffd1 	bl	8381c <__retarget_lock_release_recursive>
   8387a:	2000      	movs	r0, #0
   8387c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83880:	4b17      	ldr	r3, [pc, #92]	; (838e0 <__register_exitproc+0xc0>)
   83882:	b30b      	cbz	r3, 838c8 <__register_exitproc+0xa8>
   83884:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83888:	f3af 8000 	nop.w
   8388c:	4603      	mov	r3, r0
   8388e:	b1d8      	cbz	r0, 838c8 <__register_exitproc+0xa8>
   83890:	2000      	movs	r0, #0
   83892:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83896:	f04f 0e01 	mov.w	lr, #1
   8389a:	6058      	str	r0, [r3, #4]
   8389c:	6019      	str	r1, [r3, #0]
   8389e:	4602      	mov	r2, r0
   838a0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   838a4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   838a8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   838ac:	2e00      	cmp	r6, #0
   838ae:	d0dc      	beq.n	8386a <__register_exitproc+0x4a>
   838b0:	e7cc      	b.n	8384c <__register_exitproc+0x2c>
   838b2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   838b6:	4301      	orrs	r1, r0
   838b8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   838bc:	e7d5      	b.n	8386a <__register_exitproc+0x4a>
   838be:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   838c2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   838c6:	e7bb      	b.n	83840 <__register_exitproc+0x20>
   838c8:	6828      	ldr	r0, [r5, #0]
   838ca:	f7ff ffa7 	bl	8381c <__retarget_lock_release_recursive>
   838ce:	f04f 30ff 	mov.w	r0, #4294967295
   838d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   838d6:	bf00      	nop
   838d8:	20070750 	.word	0x20070750
   838dc:	0008393c 	.word	0x0008393c
   838e0:	00000000 	.word	0x00000000

000838e4 <LED_DESCRIPTOR>:
   838e4:	0000003b 00000000 00000055 00000000     ;.......U.......
   838f4:	00000056 00000000 00000057 00000001     V.......W.......
	...
   8390c:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8391c:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8392c:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...

0008393c <_global_impure_ptr>:
   8393c:	20070328                                (.. 

00083940 <_init>:
   83940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83942:	bf00      	nop
   83944:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83946:	bc08      	pop	{r3}
   83948:	469e      	mov	lr, r3
   8394a:	4770      	bx	lr

0008394c <__init_array_start>:
   8394c:	000837c5 	.word	0x000837c5

00083950 <__frame_dummy_init_array_entry>:
   83950:	00080119                                ....

00083954 <_fini>:
   83954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83956:	bf00      	nop
   83958:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8395a:	bc08      	pop	{r3}
   8395c:	469e      	mov	lr, r3
   8395e:	4770      	bx	lr

00083960 <__fini_array_start>:
   83960:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070320 	.word	0x20070320

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <udi_api_cdc_comm>:
2007012c:	000802d9 00080299 000806a9 000802ad     ................
2007013c:	00000000                                ....

20070140 <udi_api_cdc_data>:
20070140:	000808c1 00080681 000802a9 000802ad     ................
20070150:	00080535                                5...

20070154 <udc_config>:
20070154:	2007029c 2007016c 2007029c 200702b0     ... l.. ... ... 
20070164:	20070174 00000000                       t.. ....

2007016c <udc_config_fs>:
2007016c:	2007017c 200702bc                       |.. ... 

20070174 <udc_config_hs>:
20070174:	2007020c 200702bc                       ... ... 

2007017c <udc_desc_fs>:
2007017c:	008d0209 c0000104 000b0832 01020202     ........2.......
2007018c:	00040900 02020100 24050001 04011000     ...........$....
2007019c:	05020224 01000624 03012405 83050701     $...$....$......
200701ac:	10004003 00010409 00000a02 81050700     .@..............
200701bc:	00004002 02020507 08000040 0202020b     .@......@.......
200701cc:	09000102 01000204 00010202 10002405     .............$..
200701dc:	02240401 06240502 24050302 07030301     ..$...$....$....
200701ec:	40038605 04091000 0a020003 07000000     ...@............
200701fc:	40028405 05070000 00400205 00000000     ...@......@.....

2007020c <udc_desc_hs>:
2007020c:	008d0209 c0000104 000b0832 01020202     ........2.......
2007021c:	00040900 02020100 24050001 04011000     ...........$....
2007022c:	05020224 01000624 03012405 83050701     $...$....$......
2007023c:	10004003 00010409 00000a02 81050700     .@..............
2007024c:	00020002 02020507 08000200 0202020b     ................
2007025c:	09000102 01000204 00010202 10002405     .............$..
2007026c:	02240401 06240502 24050302 07030301     ..$...$....$....
2007027c:	40038605 04091000 0a020003 07000000     ...@............
2007028c:	00028405 05070002 02000205 00000000     ................

2007029c <udc_device_desc>:
2007029c:	02000112 40000000 242503eb 02010100     .......@..%$....
200702ac:	00000100                                ....

200702b0 <udc_device_qual>:
200702b0:	0200060a 40000000 00000001              .......@....

200702bc <udi_apis>:
200702bc:	2007012c 20070140 2007012c 20070140     ,.. @.. ,.. @.. 

200702cc <udc_string_desc>:
200702cc:	00000300 00000000 00000000 00000000     ................
	...

200702f4 <udc_string_desc_languageid>:
200702f4:	04090304                                ....

200702f8 <udc_string_manufacturer_name>:
200702f8:	6168654c 6e766f47 70654c61 00616865     LehaGovnaLepeha.

20070308 <udc_string_product_name>:
20070308:	20434443 636e614d 74736568 55207265     CDC Manchester U
20070318:	00545241                                ART.

2007031c <g_interrupt_enabled>:
2007031c:	00000001                                ....

20070320 <SystemCoreClock>:
20070320:	003d0900 00000000                       ..=.....

20070328 <impure_data>:
20070328:	00000000 20070614 2007067c 200706e4     ....... |.. ... 
	...
200703d0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200703e0:	0005deec 0000000b 00000000 00000000     ................
	...

20070750 <__atexit_recursive_mutex>:
20070750:	20071938                                8.. 
